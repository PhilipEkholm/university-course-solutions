
TestSetup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ff0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083ff0  00083ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b20  20070000  00083ff8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20070b20  00084b18  00020b20  2**2
                  ALLOC
  4 .stack        00002000  20070cb8  00084cb0  00020b20  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b20  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b49  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016bb7  00000000  00000000  00020ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000335a  00000000  00000000  00037759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004839  00000000  00000000  0003aab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009d0  00000000  00000000  0003f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000900  00000000  00000000  0003fcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019643  00000000  00000000  000405bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f9a6  00000000  00000000  00059bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064ada  00000000  00000000  000695a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002204  00000000  00000000  000ce080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 2c 07 20 05 0a 08 00 01 0a 08 00 01 0a 08 00     .,. ............
   80010:	01 0a 08 00 01 0a 08 00 01 0a 08 00 00 00 00 00     ................
	...
   8002c:	01 0a 08 00 01 0a 08 00 00 00 00 00 01 0a 08 00     ................
   8003c:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   8004c:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   8005c:	01 0a 08 00 01 0a 08 00 01 0a 08 00 00 00 00 00     ................
   8006c:	a9 08 08 00 bd 08 08 00 d1 08 08 00 e5 08 08 00     ................
	...
   80084:	c9 01 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   80094:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   800a4:	00 00 00 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   800b4:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   800c4:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   800d4:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................
   800e4:	01 0a 08 00 01 0a 08 00 01 0a 08 00 01 0a 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b20 	.word	0x20070b20
   80110:	00000000 	.word	0x00000000
   80114:	00083ff8 	.word	0x00083ff8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083ff8 	.word	0x00083ff8
   80154:	20070b24 	.word	0x20070b24
   80158:	00083ff8 	.word	0x00083ff8
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070c8c 	.word	0x20070c8c
   80198:	20070c84 	.word	0x20070c84

0008019c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801a2:	bf1d      	ittte	ne
   801a4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801a8:	61c1      	strne	r1, [r0, #28]
	return 0;
   801aa:	2000      	movne	r0, #0
		return 1;
   801ac:	2001      	moveq	r0, #1
}
   801ae:	4770      	bx	lr

000801b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801b0:	6943      	ldr	r3, [r0, #20]
   801b2:	f013 0f01 	tst.w	r3, #1
   801b6:	d005      	beq.n	801c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801b8:	6983      	ldr	r3, [r0, #24]
   801ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801be:	600b      	str	r3, [r1, #0]

	return 0;
   801c0:	2000      	movs	r0, #0
   801c2:	4770      	bx	lr
		return 1;
   801c4:	2001      	movs	r0, #1
}
   801c6:	4770      	bx	lr

000801c8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801c8:	b500      	push	{lr}
   801ca:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   801cc:	2201      	movs	r2, #1
   801ce:	f10d 0107 	add.w	r1, sp, #7
   801d2:	4810      	ldr	r0, [pc, #64]	; (80214 <USART0_Handler+0x4c>)
   801d4:	4b10      	ldr	r3, [pc, #64]	; (80218 <USART0_Handler+0x50>)
   801d6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801da:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801de:	2200      	movs	r2, #0
   801e0:	4b0e      	ldr	r3, [pc, #56]	; (8021c <USART0_Handler+0x54>)
   801e2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801e4:	4b0e      	ldr	r3, [pc, #56]	; (80220 <USART0_Handler+0x58>)
   801e6:	781b      	ldrb	r3, [r3, #0]
   801e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801ec:	4a0d      	ldr	r2, [pc, #52]	; (80224 <USART0_Handler+0x5c>)
   801ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801f0:	2b9b      	cmp	r3, #155	; 0x9b
   801f2:	d00b      	beq.n	8020c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   801f4:	3301      	adds	r3, #1
   801f6:	4a0a      	ldr	r2, [pc, #40]	; (80220 <USART0_Handler+0x58>)
   801f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801fa:	2201      	movs	r2, #1
   801fc:	4b07      	ldr	r3, [pc, #28]	; (8021c <USART0_Handler+0x54>)
   801fe:	701a      	strb	r2, [r3, #0]
   80200:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80204:	b662      	cpsie	i
}
   80206:	b003      	add	sp, #12
   80208:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8020c:	2200      	movs	r2, #0
   8020e:	4b04      	ldr	r3, [pc, #16]	; (80220 <USART0_Handler+0x58>)
   80210:	701a      	strb	r2, [r3, #0]
   80212:	e7f2      	b.n	801fa <USART0_Handler+0x32>
   80214:	40098000 	.word	0x40098000
   80218:	00080285 	.word	0x00080285
   8021c:	2007016e 	.word	0x2007016e
   80220:	20070bd8 	.word	0x20070bd8
   80224:	20070b3c 	.word	0x20070b3c

00080228 <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   80228:	4b01      	ldr	r3, [pc, #4]	; (80230 <pin_mapper+0x8>)
   8022a:	5c18      	ldrb	r0, [r3, r0]
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop
   80230:	2007012c 	.word	0x2007012c

00080234 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80234:	3801      	subs	r0, #1
   80236:	2802      	cmp	r0, #2
   80238:	d815      	bhi.n	80266 <_write+0x32>
{
   8023a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8023e:	460e      	mov	r6, r1
   80240:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80242:	b19a      	cbz	r2, 8026c <_write+0x38>
   80244:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80246:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80280 <_write+0x4c>
   8024a:	4f0c      	ldr	r7, [pc, #48]	; (8027c <_write+0x48>)
   8024c:	f8d8 0000 	ldr.w	r0, [r8]
   80250:	f815 1b01 	ldrb.w	r1, [r5], #1
   80254:	683b      	ldr	r3, [r7, #0]
   80256:	4798      	blx	r3
   80258:	2800      	cmp	r0, #0
   8025a:	db0a      	blt.n	80272 <_write+0x3e>
   8025c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8025e:	3c01      	subs	r4, #1
   80260:	d1f4      	bne.n	8024c <_write+0x18>
   80262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80266:	f04f 30ff 	mov.w	r0, #4294967295
   8026a:	4770      	bx	lr
	for (; len != 0; --len) {
   8026c:	4610      	mov	r0, r2
   8026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80272:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8027a:	bf00      	nop
   8027c:	20070c88 	.word	0x20070c88
   80280:	20070c8c 	.word	0x20070c8c

00080284 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80284:	2a00      	cmp	r2, #0
   80286:	d051      	beq.n	8032c <usart_serial_read_packet+0xa8>
{
   80288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8028c:	b083      	sub	sp, #12
   8028e:	4605      	mov	r5, r0
   80290:	460c      	mov	r4, r1
   80292:	4692      	mov	sl, r2
   80294:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80296:	4f26      	ldr	r7, [pc, #152]	; (80330 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80298:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80344 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8029c:	4e25      	ldr	r6, [pc, #148]	; (80334 <usart_serial_read_packet+0xb0>)
   8029e:	e01d      	b.n	802dc <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   802a0:	4621      	mov	r1, r4
   802a2:	4638      	mov	r0, r7
   802a4:	47c8      	blx	r9
   802a6:	2800      	cmp	r0, #0
   802a8:	d1fa      	bne.n	802a0 <usart_serial_read_packet+0x1c>
   802aa:	e021      	b.n	802f0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   802ac:	469b      	mov	fp, r3
   802ae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80348 <usart_serial_read_packet+0xc4>
   802b2:	a901      	add	r1, sp, #4
   802b4:	4658      	mov	r0, fp
   802b6:	47c0      	blx	r8
   802b8:	2800      	cmp	r0, #0
   802ba:	d1fa      	bne.n	802b2 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   802bc:	9b01      	ldr	r3, [sp, #4]
   802be:	7023      	strb	r3, [r4, #0]
   802c0:	e019      	b.n	802f6 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   802c2:	469b      	mov	fp, r3
   802c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80348 <usart_serial_read_packet+0xc4>
   802c8:	a901      	add	r1, sp, #4
   802ca:	4658      	mov	r0, fp
   802cc:	47c0      	blx	r8
   802ce:	2800      	cmp	r0, #0
   802d0:	d1fa      	bne.n	802c8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   802d2:	9b01      	ldr	r3, [sp, #4]
   802d4:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   802d6:	3401      	adds	r4, #1
	while (len) {
   802d8:	4554      	cmp	r4, sl
   802da:	d023      	beq.n	80324 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   802dc:	2300      	movs	r3, #0
   802de:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   802e0:	42bd      	cmp	r5, r7
   802e2:	d0dd      	beq.n	802a0 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   802e4:	4b14      	ldr	r3, [pc, #80]	; (80338 <usart_serial_read_packet+0xb4>)
   802e6:	429d      	cmp	r5, r3
   802e8:	d0e0      	beq.n	802ac <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   802ea:	4b14      	ldr	r3, [pc, #80]	; (8033c <usart_serial_read_packet+0xb8>)
   802ec:	429d      	cmp	r5, r3
   802ee:	d0e8      	beq.n	802c2 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   802f0:	4b13      	ldr	r3, [pc, #76]	; (80340 <usart_serial_read_packet+0xbc>)
   802f2:	429d      	cmp	r5, r3
   802f4:	d00b      	beq.n	8030e <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   802f6:	42b5      	cmp	r5, r6
   802f8:	d1ed      	bne.n	802d6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   802fa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80348 <usart_serial_read_packet+0xc4>
   802fe:	a901      	add	r1, sp, #4
   80300:	4630      	mov	r0, r6
   80302:	47c0      	blx	r8
   80304:	2800      	cmp	r0, #0
   80306:	d1fa      	bne.n	802fe <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80308:	9b01      	ldr	r3, [sp, #4]
   8030a:	7023      	strb	r3, [r4, #0]
   8030c:	e7e3      	b.n	802d6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8030e:	469b      	mov	fp, r3
   80310:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80348 <usart_serial_read_packet+0xc4>
   80314:	a901      	add	r1, sp, #4
   80316:	4658      	mov	r0, fp
   80318:	47c0      	blx	r8
   8031a:	2800      	cmp	r0, #0
   8031c:	d1fa      	bne.n	80314 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8031e:	9b01      	ldr	r3, [sp, #4]
   80320:	7023      	strb	r3, [r4, #0]
   80322:	e7d8      	b.n	802d6 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80324:	2000      	movs	r0, #0
   80326:	b003      	add	sp, #12
   80328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8032c:	2000      	movs	r0, #0
   8032e:	4770      	bx	lr
   80330:	400e0800 	.word	0x400e0800
   80334:	400a4000 	.word	0x400a4000
   80338:	40098000 	.word	0x40098000
   8033c:	4009c000 	.word	0x4009c000
   80340:	400a0000 	.word	0x400a0000
   80344:	00080393 	.word	0x00080393
   80348:	000801b1 	.word	0x000801b1

0008034c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8034c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8034e:	23ac      	movs	r3, #172	; 0xac
   80350:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80352:	680b      	ldr	r3, [r1, #0]
   80354:	684a      	ldr	r2, [r1, #4]
   80356:	fbb3 f3f2 	udiv	r3, r3, r2
   8035a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8035c:	1e5c      	subs	r4, r3, #1
   8035e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80362:	4294      	cmp	r4, r2
   80364:	d80b      	bhi.n	8037e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80366:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80368:	688b      	ldr	r3, [r1, #8]
   8036a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8036c:	f240 2302 	movw	r3, #514	; 0x202
   80370:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80374:	2350      	movs	r3, #80	; 0x50
   80376:	6003      	str	r3, [r0, #0]

	return 0;
   80378:	2000      	movs	r0, #0
}
   8037a:	bc10      	pop	{r4}
   8037c:	4770      	bx	lr
		return 1;
   8037e:	2001      	movs	r0, #1
   80380:	e7fb      	b.n	8037a <uart_init+0x2e>

00080382 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80382:	6943      	ldr	r3, [r0, #20]
   80384:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80388:	bf1a      	itte	ne
   8038a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8038c:	2000      	movne	r0, #0
		return 1;
   8038e:	2001      	moveq	r0, #1
}
   80390:	4770      	bx	lr

00080392 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80392:	6943      	ldr	r3, [r0, #20]
   80394:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80398:	bf1d      	ittte	ne
   8039a:	6983      	ldrne	r3, [r0, #24]
   8039c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8039e:	2000      	movne	r0, #0
		return 1;
   803a0:	2001      	moveq	r0, #1
}
   803a2:	4770      	bx	lr

000803a4 <usart_serial_getchar>:
{
   803a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   803a6:	b083      	sub	sp, #12
   803a8:	4604      	mov	r4, r0
   803aa:	460d      	mov	r5, r1
	uint32_t val = 0;
   803ac:	2300      	movs	r3, #0
   803ae:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   803b0:	4b20      	ldr	r3, [pc, #128]	; (80434 <usart_serial_getchar+0x90>)
   803b2:	4298      	cmp	r0, r3
   803b4:	d00d      	beq.n	803d2 <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   803b6:	4b20      	ldr	r3, [pc, #128]	; (80438 <usart_serial_getchar+0x94>)
   803b8:	4298      	cmp	r0, r3
   803ba:	d012      	beq.n	803e2 <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   803bc:	4b1f      	ldr	r3, [pc, #124]	; (8043c <usart_serial_getchar+0x98>)
   803be:	4298      	cmp	r0, r3
   803c0:	d019      	beq.n	803f6 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   803c2:	4b1f      	ldr	r3, [pc, #124]	; (80440 <usart_serial_getchar+0x9c>)
   803c4:	429c      	cmp	r4, r3
   803c6:	d020      	beq.n	8040a <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   803c8:	4b1e      	ldr	r3, [pc, #120]	; (80444 <usart_serial_getchar+0xa0>)
   803ca:	429c      	cmp	r4, r3
   803cc:	d027      	beq.n	8041e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   803ce:	b003      	add	sp, #12
   803d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   803d2:	461f      	mov	r7, r3
   803d4:	4e1c      	ldr	r6, [pc, #112]	; (80448 <usart_serial_getchar+0xa4>)
   803d6:	4629      	mov	r1, r5
   803d8:	4638      	mov	r0, r7
   803da:	47b0      	blx	r6
   803dc:	2800      	cmp	r0, #0
   803de:	d1fa      	bne.n	803d6 <usart_serial_getchar+0x32>
   803e0:	e7ef      	b.n	803c2 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   803e2:	461f      	mov	r7, r3
   803e4:	4e19      	ldr	r6, [pc, #100]	; (8044c <usart_serial_getchar+0xa8>)
   803e6:	a901      	add	r1, sp, #4
   803e8:	4638      	mov	r0, r7
   803ea:	47b0      	blx	r6
   803ec:	2800      	cmp	r0, #0
   803ee:	d1fa      	bne.n	803e6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   803f0:	9b01      	ldr	r3, [sp, #4]
   803f2:	702b      	strb	r3, [r5, #0]
   803f4:	e7e8      	b.n	803c8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   803f6:	461e      	mov	r6, r3
   803f8:	4c14      	ldr	r4, [pc, #80]	; (8044c <usart_serial_getchar+0xa8>)
   803fa:	a901      	add	r1, sp, #4
   803fc:	4630      	mov	r0, r6
   803fe:	47a0      	blx	r4
   80400:	2800      	cmp	r0, #0
   80402:	d1fa      	bne.n	803fa <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80404:	9b01      	ldr	r3, [sp, #4]
   80406:	702b      	strb	r3, [r5, #0]
   80408:	e7e1      	b.n	803ce <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8040a:	461e      	mov	r6, r3
   8040c:	4c0f      	ldr	r4, [pc, #60]	; (8044c <usart_serial_getchar+0xa8>)
   8040e:	a901      	add	r1, sp, #4
   80410:	4630      	mov	r0, r6
   80412:	47a0      	blx	r4
   80414:	2800      	cmp	r0, #0
   80416:	d1fa      	bne.n	8040e <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80418:	9b01      	ldr	r3, [sp, #4]
   8041a:	702b      	strb	r3, [r5, #0]
   8041c:	e7d7      	b.n	803ce <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8041e:	461e      	mov	r6, r3
   80420:	4c0a      	ldr	r4, [pc, #40]	; (8044c <usart_serial_getchar+0xa8>)
   80422:	a901      	add	r1, sp, #4
   80424:	4630      	mov	r0, r6
   80426:	47a0      	blx	r4
   80428:	2800      	cmp	r0, #0
   8042a:	d1fa      	bne.n	80422 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8042c:	9b01      	ldr	r3, [sp, #4]
   8042e:	702b      	strb	r3, [r5, #0]
}
   80430:	e7cd      	b.n	803ce <usart_serial_getchar+0x2a>
   80432:	bf00      	nop
   80434:	400e0800 	.word	0x400e0800
   80438:	40098000 	.word	0x40098000
   8043c:	4009c000 	.word	0x4009c000
   80440:	400a0000 	.word	0x400a0000
   80444:	400a4000 	.word	0x400a4000
   80448:	00080393 	.word	0x00080393
   8044c:	000801b1 	.word	0x000801b1

00080450 <usart_serial_putchar>:
{
   80450:	b570      	push	{r4, r5, r6, lr}
   80452:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80454:	4b1e      	ldr	r3, [pc, #120]	; (804d0 <usart_serial_putchar+0x80>)
   80456:	4298      	cmp	r0, r3
   80458:	d00d      	beq.n	80476 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8045a:	4b1e      	ldr	r3, [pc, #120]	; (804d4 <usart_serial_putchar+0x84>)
   8045c:	4298      	cmp	r0, r3
   8045e:	d013      	beq.n	80488 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80460:	4b1d      	ldr	r3, [pc, #116]	; (804d8 <usart_serial_putchar+0x88>)
   80462:	4298      	cmp	r0, r3
   80464:	d019      	beq.n	8049a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80466:	4b1d      	ldr	r3, [pc, #116]	; (804dc <usart_serial_putchar+0x8c>)
   80468:	4298      	cmp	r0, r3
   8046a:	d01f      	beq.n	804ac <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8046c:	4b1c      	ldr	r3, [pc, #112]	; (804e0 <usart_serial_putchar+0x90>)
   8046e:	4298      	cmp	r0, r3
   80470:	d025      	beq.n	804be <usart_serial_putchar+0x6e>
	return 0;
   80472:	2000      	movs	r0, #0
}
   80474:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80476:	461e      	mov	r6, r3
   80478:	4d1a      	ldr	r5, [pc, #104]	; (804e4 <usart_serial_putchar+0x94>)
   8047a:	4621      	mov	r1, r4
   8047c:	4630      	mov	r0, r6
   8047e:	47a8      	blx	r5
   80480:	2800      	cmp	r0, #0
   80482:	d1fa      	bne.n	8047a <usart_serial_putchar+0x2a>
		return 1;
   80484:	2001      	movs	r0, #1
   80486:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80488:	461e      	mov	r6, r3
   8048a:	4d17      	ldr	r5, [pc, #92]	; (804e8 <usart_serial_putchar+0x98>)
   8048c:	4621      	mov	r1, r4
   8048e:	4630      	mov	r0, r6
   80490:	47a8      	blx	r5
   80492:	2800      	cmp	r0, #0
   80494:	d1fa      	bne.n	8048c <usart_serial_putchar+0x3c>
		return 1;
   80496:	2001      	movs	r0, #1
   80498:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8049a:	461e      	mov	r6, r3
   8049c:	4d12      	ldr	r5, [pc, #72]	; (804e8 <usart_serial_putchar+0x98>)
   8049e:	4621      	mov	r1, r4
   804a0:	4630      	mov	r0, r6
   804a2:	47a8      	blx	r5
   804a4:	2800      	cmp	r0, #0
   804a6:	d1fa      	bne.n	8049e <usart_serial_putchar+0x4e>
		return 1;
   804a8:	2001      	movs	r0, #1
   804aa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804ac:	461e      	mov	r6, r3
   804ae:	4d0e      	ldr	r5, [pc, #56]	; (804e8 <usart_serial_putchar+0x98>)
   804b0:	4621      	mov	r1, r4
   804b2:	4630      	mov	r0, r6
   804b4:	47a8      	blx	r5
   804b6:	2800      	cmp	r0, #0
   804b8:	d1fa      	bne.n	804b0 <usart_serial_putchar+0x60>
		return 1;
   804ba:	2001      	movs	r0, #1
   804bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804be:	461e      	mov	r6, r3
   804c0:	4d09      	ldr	r5, [pc, #36]	; (804e8 <usart_serial_putchar+0x98>)
   804c2:	4621      	mov	r1, r4
   804c4:	4630      	mov	r0, r6
   804c6:	47a8      	blx	r5
   804c8:	2800      	cmp	r0, #0
   804ca:	d1fa      	bne.n	804c2 <usart_serial_putchar+0x72>
		return 1;
   804cc:	2001      	movs	r0, #1
   804ce:	bd70      	pop	{r4, r5, r6, pc}
   804d0:	400e0800 	.word	0x400e0800
   804d4:	40098000 	.word	0x40098000
   804d8:	4009c000 	.word	0x4009c000
   804dc:	400a0000 	.word	0x400a0000
   804e0:	400a4000 	.word	0x400a4000
   804e4:	00080383 	.word	0x00080383
   804e8:	0008019d 	.word	0x0008019d

000804ec <console_init>:
#include <conf_board.h>

#include "config/conf_uart_serial.h"
#include "console_driver.h"

void console_init(void) {
   804ec:	b530      	push	{r4, r5, lr}
   804ee:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804f0:	2008      	movs	r0, #8
   804f2:	4d12      	ldr	r5, [pc, #72]	; (8053c <console_init+0x50>)
   804f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   804f6:	4c12      	ldr	r4, [pc, #72]	; (80540 <console_init+0x54>)
   804f8:	4b12      	ldr	r3, [pc, #72]	; (80544 <console_init+0x58>)
   804fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   804fc:	4a12      	ldr	r2, [pc, #72]	; (80548 <console_init+0x5c>)
   804fe:	4b13      	ldr	r3, [pc, #76]	; (8054c <console_init+0x60>)
   80500:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80502:	4a13      	ldr	r2, [pc, #76]	; (80550 <console_init+0x64>)
   80504:	4b13      	ldr	r3, [pc, #76]	; (80554 <console_init+0x68>)
   80506:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80508:	4b13      	ldr	r3, [pc, #76]	; (80558 <console_init+0x6c>)
   8050a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8050c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80510:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80512:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80516:	9303      	str	r3, [sp, #12]
   80518:	2008      	movs	r0, #8
   8051a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   8051c:	a901      	add	r1, sp, #4
   8051e:	4620      	mov	r0, r4
   80520:	4b0e      	ldr	r3, [pc, #56]	; (8055c <console_init+0x70>)
   80522:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80524:	4d0e      	ldr	r5, [pc, #56]	; (80560 <console_init+0x74>)
   80526:	682b      	ldr	r3, [r5, #0]
   80528:	2100      	movs	r1, #0
   8052a:	6898      	ldr	r0, [r3, #8]
   8052c:	4c0d      	ldr	r4, [pc, #52]	; (80564 <console_init+0x78>)
   8052e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80530:	682b      	ldr	r3, [r5, #0]
   80532:	2100      	movs	r1, #0
   80534:	6858      	ldr	r0, [r3, #4]
   80536:	47a0      	blx	r4
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
   80538:	b005      	add	sp, #20
   8053a:	bd30      	pop	{r4, r5, pc}
   8053c:	000809e1 	.word	0x000809e1
   80540:	400e0800 	.word	0x400e0800
   80544:	20070c8c 	.word	0x20070c8c
   80548:	00080451 	.word	0x00080451
   8054c:	20070c88 	.word	0x20070c88
   80550:	000803a5 	.word	0x000803a5
   80554:	20070c84 	.word	0x20070c84
   80558:	0501bd00 	.word	0x0501bd00
   8055c:	0008034d 	.word	0x0008034d
   80560:	20070174 	.word	0x20070174
   80564:	000810a5 	.word	0x000810a5

00080568 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80568:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8056a:	480e      	ldr	r0, [pc, #56]	; (805a4 <sysclk_init+0x3c>)
   8056c:	4b0e      	ldr	r3, [pc, #56]	; (805a8 <sysclk_init+0x40>)
   8056e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80570:	213e      	movs	r1, #62	; 0x3e
   80572:	2000      	movs	r0, #0
   80574:	4b0d      	ldr	r3, [pc, #52]	; (805ac <sysclk_init+0x44>)
   80576:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80578:	4c0d      	ldr	r4, [pc, #52]	; (805b0 <sysclk_init+0x48>)
   8057a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8057c:	2800      	cmp	r0, #0
   8057e:	d0fc      	beq.n	8057a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80580:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <sysclk_init+0x4c>)
   80582:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80584:	4a0c      	ldr	r2, [pc, #48]	; (805b8 <sysclk_init+0x50>)
   80586:	4b0d      	ldr	r3, [pc, #52]	; (805bc <sysclk_init+0x54>)
   80588:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8058a:	4c0d      	ldr	r4, [pc, #52]	; (805c0 <sysclk_init+0x58>)
   8058c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8058e:	2800      	cmp	r0, #0
   80590:	d0fc      	beq.n	8058c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80592:	2010      	movs	r0, #16
   80594:	4b0b      	ldr	r3, [pc, #44]	; (805c4 <sysclk_init+0x5c>)
   80596:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80598:	4b0b      	ldr	r3, [pc, #44]	; (805c8 <sysclk_init+0x60>)
   8059a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8059c:	4801      	ldr	r0, [pc, #4]	; (805a4 <sysclk_init+0x3c>)
   8059e:	4b02      	ldr	r3, [pc, #8]	; (805a8 <sysclk_init+0x40>)
   805a0:	4798      	blx	r3
   805a2:	bd10      	pop	{r4, pc}
   805a4:	0501bd00 	.word	0x0501bd00
   805a8:	200700a5 	.word	0x200700a5
   805ac:	0008095d 	.word	0x0008095d
   805b0:	000809b1 	.word	0x000809b1
   805b4:	000809c1 	.word	0x000809c1
   805b8:	200d3f01 	.word	0x200d3f01
   805bc:	400e0600 	.word	0x400e0600
   805c0:	000809d1 	.word	0x000809d1
   805c4:	000808f9 	.word	0x000808f9
   805c8:	00080a9d 	.word	0x00080a9d

000805cc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805cc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805d2:	4b16      	ldr	r3, [pc, #88]	; (8062c <board_init+0x60>)
   805d4:	605a      	str	r2, [r3, #4]
   805d6:	200b      	movs	r0, #11
   805d8:	4c15      	ldr	r4, [pc, #84]	; (80630 <board_init+0x64>)
   805da:	47a0      	blx	r4
   805dc:	200c      	movs	r0, #12
   805de:	47a0      	blx	r4
   805e0:	200d      	movs	r0, #13
   805e2:	47a0      	blx	r4
   805e4:	200e      	movs	r0, #14
   805e6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805ec:	203b      	movs	r0, #59	; 0x3b
   805ee:	4c11      	ldr	r4, [pc, #68]	; (80634 <board_init+0x68>)
   805f0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805f6:	2055      	movs	r0, #85	; 0x55
   805f8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805fe:	2056      	movs	r0, #86	; 0x56
   80600:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80602:	490d      	ldr	r1, [pc, #52]	; (80638 <board_init+0x6c>)
   80604:	2068      	movs	r0, #104	; 0x68
   80606:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80608:	490c      	ldr	r1, [pc, #48]	; (8063c <board_init+0x70>)
   8060a:	205c      	movs	r0, #92	; 0x5c
   8060c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8060e:	4a0c      	ldr	r2, [pc, #48]	; (80640 <board_init+0x74>)
   80610:	f44f 7140 	mov.w	r1, #768	; 0x300
   80614:	480b      	ldr	r0, [pc, #44]	; (80644 <board_init+0x78>)
   80616:	4b0c      	ldr	r3, [pc, #48]	; (80648 <board_init+0x7c>)
   80618:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8061a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8061e:	202b      	movs	r0, #43	; 0x2b
   80620:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80622:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80626:	202a      	movs	r0, #42	; 0x2a
   80628:	47a0      	blx	r4
   8062a:	bd10      	pop	{r4, pc}
   8062c:	400e1a50 	.word	0x400e1a50
   80630:	000809e1 	.word	0x000809e1
   80634:	000806ed 	.word	0x000806ed
   80638:	28000079 	.word	0x28000079
   8063c:	28000001 	.word	0x28000001
   80640:	08000001 	.word	0x08000001
   80644:	400e0e00 	.word	0x400e0e00
   80648:	000807bd 	.word	0x000807bd

0008064c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8064c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8064e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80652:	d016      	beq.n	80682 <pio_set_peripheral+0x36>
   80654:	d80b      	bhi.n	8066e <pio_set_peripheral+0x22>
   80656:	b149      	cbz	r1, 8066c <pio_set_peripheral+0x20>
   80658:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8065c:	d105      	bne.n	8066a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8065e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80660:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80662:	400b      	ands	r3, r1
   80664:	ea23 0302 	bic.w	r3, r3, r2
   80668:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8066a:	6042      	str	r2, [r0, #4]
   8066c:	4770      	bx	lr
	switch (ul_type) {
   8066e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80672:	d0fb      	beq.n	8066c <pio_set_peripheral+0x20>
   80674:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80678:	d0f8      	beq.n	8066c <pio_set_peripheral+0x20>
   8067a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8067e:	d1f4      	bne.n	8066a <pio_set_peripheral+0x1e>
   80680:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80682:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80684:	4313      	orrs	r3, r2
   80686:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80688:	e7ef      	b.n	8066a <pio_set_peripheral+0x1e>

0008068a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8068a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8068c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80690:	bf14      	ite	ne
   80692:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80694:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80696:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8069a:	bf14      	ite	ne
   8069c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8069e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   806a0:	f012 0f02 	tst.w	r2, #2
   806a4:	d107      	bne.n	806b6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   806a6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   806aa:	bf18      	it	ne
   806ac:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   806b0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   806b2:	6001      	str	r1, [r0, #0]
   806b4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   806b6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   806ba:	e7f9      	b.n	806b0 <pio_set_input+0x26>

000806bc <pio_set_output>:
{
   806bc:	b410      	push	{r4}
   806be:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   806c0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   806c2:	b944      	cbnz	r4, 806d6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   806c4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   806c6:	b143      	cbz	r3, 806da <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   806c8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   806ca:	b942      	cbnz	r2, 806de <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   806cc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   806ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   806d0:	6001      	str	r1, [r0, #0]
}
   806d2:	bc10      	pop	{r4}
   806d4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   806d6:	6641      	str	r1, [r0, #100]	; 0x64
   806d8:	e7f5      	b.n	806c6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   806da:	6541      	str	r1, [r0, #84]	; 0x54
   806dc:	e7f5      	b.n	806ca <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   806de:	6301      	str	r1, [r0, #48]	; 0x30
   806e0:	e7f5      	b.n	806ce <pio_set_output+0x12>

000806e2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   806e2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   806e4:	4770      	bx	lr

000806e6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   806e6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   806e8:	4770      	bx	lr
	...

000806ec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   806ec:	b570      	push	{r4, r5, r6, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   806f2:	0943      	lsrs	r3, r0, #5
   806f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   806f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   806fc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   806fe:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80702:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80706:	d031      	beq.n	8076c <pio_configure_pin+0x80>
   80708:	d816      	bhi.n	80738 <pio_configure_pin+0x4c>
   8070a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8070e:	d01b      	beq.n	80748 <pio_configure_pin+0x5c>
   80710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80714:	d116      	bne.n	80744 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80716:	f000 001f 	and.w	r0, r0, #31
   8071a:	2601      	movs	r6, #1
   8071c:	4086      	lsls	r6, r0
   8071e:	4632      	mov	r2, r6
   80720:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80724:	4620      	mov	r0, r4
   80726:	4b22      	ldr	r3, [pc, #136]	; (807b0 <pio_configure_pin+0xc4>)
   80728:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8072a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8072e:	bf14      	ite	ne
   80730:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80732:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80734:	2001      	movs	r0, #1
   80736:	e017      	b.n	80768 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8073c:	d021      	beq.n	80782 <pio_configure_pin+0x96>
   8073e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80742:	d01e      	beq.n	80782 <pio_configure_pin+0x96>
		return 0;
   80744:	2000      	movs	r0, #0
   80746:	e00f      	b.n	80768 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80748:	f000 001f 	and.w	r0, r0, #31
   8074c:	2601      	movs	r6, #1
   8074e:	4086      	lsls	r6, r0
   80750:	4632      	mov	r2, r6
   80752:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80756:	4620      	mov	r0, r4
   80758:	4b15      	ldr	r3, [pc, #84]	; (807b0 <pio_configure_pin+0xc4>)
   8075a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8075c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80760:	bf14      	ite	ne
   80762:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80764:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80766:	2001      	movs	r0, #1
}
   80768:	b002      	add	sp, #8
   8076a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8076c:	f000 011f 	and.w	r1, r0, #31
   80770:	2601      	movs	r6, #1
   80772:	462a      	mov	r2, r5
   80774:	fa06 f101 	lsl.w	r1, r6, r1
   80778:	4620      	mov	r0, r4
   8077a:	4b0e      	ldr	r3, [pc, #56]	; (807b4 <pio_configure_pin+0xc8>)
   8077c:	4798      	blx	r3
	return 1;
   8077e:	4630      	mov	r0, r6
		break;
   80780:	e7f2      	b.n	80768 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80782:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80786:	f000 011f 	and.w	r1, r0, #31
   8078a:	2601      	movs	r6, #1
   8078c:	ea05 0306 	and.w	r3, r5, r6
   80790:	9300      	str	r3, [sp, #0]
   80792:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80796:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8079a:	bf14      	ite	ne
   8079c:	2200      	movne	r2, #0
   8079e:	2201      	moveq	r2, #1
   807a0:	fa06 f101 	lsl.w	r1, r6, r1
   807a4:	4620      	mov	r0, r4
   807a6:	4c04      	ldr	r4, [pc, #16]	; (807b8 <pio_configure_pin+0xcc>)
   807a8:	47a0      	blx	r4
	return 1;
   807aa:	4630      	mov	r0, r6
		break;
   807ac:	e7dc      	b.n	80768 <pio_configure_pin+0x7c>
   807ae:	bf00      	nop
   807b0:	0008064d 	.word	0x0008064d
   807b4:	0008068b 	.word	0x0008068b
   807b8:	000806bd 	.word	0x000806bd

000807bc <pio_configure_pin_group>:
{
   807bc:	b570      	push	{r4, r5, r6, lr}
   807be:	b082      	sub	sp, #8
   807c0:	4605      	mov	r5, r0
   807c2:	460e      	mov	r6, r1
   807c4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   807c6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   807ca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807ce:	d027      	beq.n	80820 <pio_configure_pin_group+0x64>
   807d0:	d811      	bhi.n	807f6 <pio_configure_pin_group+0x3a>
   807d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   807d6:	d016      	beq.n	80806 <pio_configure_pin_group+0x4a>
   807d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   807dc:	d111      	bne.n	80802 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   807de:	460a      	mov	r2, r1
   807e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807e4:	4b19      	ldr	r3, [pc, #100]	; (8084c <pio_configure_pin_group+0x90>)
   807e6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   807e8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807ec:	bf14      	ite	ne
   807ee:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807f0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   807f2:	2001      	movs	r0, #1
   807f4:	e012      	b.n	8081c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   807f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807fa:	d015      	beq.n	80828 <pio_configure_pin_group+0x6c>
   807fc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80800:	d012      	beq.n	80828 <pio_configure_pin_group+0x6c>
		return 0;
   80802:	2000      	movs	r0, #0
   80804:	e00a      	b.n	8081c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80806:	460a      	mov	r2, r1
   80808:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8080c:	4b0f      	ldr	r3, [pc, #60]	; (8084c <pio_configure_pin_group+0x90>)
   8080e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80810:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80814:	bf14      	ite	ne
   80816:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80818:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8081a:	2001      	movs	r0, #1
}
   8081c:	b002      	add	sp, #8
   8081e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80820:	4b0b      	ldr	r3, [pc, #44]	; (80850 <pio_configure_pin_group+0x94>)
   80822:	4798      	blx	r3
	return 1;
   80824:	2001      	movs	r0, #1
		break;
   80826:	e7f9      	b.n	8081c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80828:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8082c:	f004 0301 	and.w	r3, r4, #1
   80830:	9300      	str	r3, [sp, #0]
   80832:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80836:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8083a:	bf14      	ite	ne
   8083c:	2200      	movne	r2, #0
   8083e:	2201      	moveq	r2, #1
   80840:	4631      	mov	r1, r6
   80842:	4628      	mov	r0, r5
   80844:	4c03      	ldr	r4, [pc, #12]	; (80854 <pio_configure_pin_group+0x98>)
   80846:	47a0      	blx	r4
	return 1;
   80848:	2001      	movs	r0, #1
		break;
   8084a:	e7e7      	b.n	8081c <pio_configure_pin_group+0x60>
   8084c:	0008064d 	.word	0x0008064d
   80850:	0008068b 	.word	0x0008068b
   80854:	000806bd 	.word	0x000806bd

00080858 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8085c:	4604      	mov	r4, r0
   8085e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80860:	4b0e      	ldr	r3, [pc, #56]	; (8089c <pio_handler_process+0x44>)
   80862:	4798      	blx	r3
   80864:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80866:	4620      	mov	r0, r4
   80868:	4b0d      	ldr	r3, [pc, #52]	; (808a0 <pio_handler_process+0x48>)
   8086a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8086c:	4005      	ands	r5, r0
   8086e:	d013      	beq.n	80898 <pio_handler_process+0x40>
   80870:	4c0c      	ldr	r4, [pc, #48]	; (808a4 <pio_handler_process+0x4c>)
   80872:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80876:	e003      	b.n	80880 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80878:	42b4      	cmp	r4, r6
   8087a:	d00d      	beq.n	80898 <pio_handler_process+0x40>
   8087c:	3410      	adds	r4, #16
		while (status != 0) {
   8087e:	b15d      	cbz	r5, 80898 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80880:	6820      	ldr	r0, [r4, #0]
   80882:	4540      	cmp	r0, r8
   80884:	d1f8      	bne.n	80878 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80886:	6861      	ldr	r1, [r4, #4]
   80888:	4229      	tst	r1, r5
   8088a:	d0f5      	beq.n	80878 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8088c:	68e3      	ldr	r3, [r4, #12]
   8088e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80890:	6863      	ldr	r3, [r4, #4]
   80892:	ea25 0503 	bic.w	r5, r5, r3
   80896:	e7ef      	b.n	80878 <pio_handler_process+0x20>
   80898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8089c:	000806e3 	.word	0x000806e3
   808a0:	000806e7 	.word	0x000806e7
   808a4:	20070bdc 	.word	0x20070bdc

000808a8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   808a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   808aa:	210b      	movs	r1, #11
   808ac:	4801      	ldr	r0, [pc, #4]	; (808b4 <PIOA_Handler+0xc>)
   808ae:	4b02      	ldr	r3, [pc, #8]	; (808b8 <PIOA_Handler+0x10>)
   808b0:	4798      	blx	r3
   808b2:	bd08      	pop	{r3, pc}
   808b4:	400e0e00 	.word	0x400e0e00
   808b8:	00080859 	.word	0x00080859

000808bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   808bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   808be:	210c      	movs	r1, #12
   808c0:	4801      	ldr	r0, [pc, #4]	; (808c8 <PIOB_Handler+0xc>)
   808c2:	4b02      	ldr	r3, [pc, #8]	; (808cc <PIOB_Handler+0x10>)
   808c4:	4798      	blx	r3
   808c6:	bd08      	pop	{r3, pc}
   808c8:	400e1000 	.word	0x400e1000
   808cc:	00080859 	.word	0x00080859

000808d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   808d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   808d2:	210d      	movs	r1, #13
   808d4:	4801      	ldr	r0, [pc, #4]	; (808dc <PIOC_Handler+0xc>)
   808d6:	4b02      	ldr	r3, [pc, #8]	; (808e0 <PIOC_Handler+0x10>)
   808d8:	4798      	blx	r3
   808da:	bd08      	pop	{r3, pc}
   808dc:	400e1200 	.word	0x400e1200
   808e0:	00080859 	.word	0x00080859

000808e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   808e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   808e6:	210e      	movs	r1, #14
   808e8:	4801      	ldr	r0, [pc, #4]	; (808f0 <PIOD_Handler+0xc>)
   808ea:	4b02      	ldr	r3, [pc, #8]	; (808f4 <PIOD_Handler+0x10>)
   808ec:	4798      	blx	r3
   808ee:	bd08      	pop	{r3, pc}
   808f0:	400e1400 	.word	0x400e1400
   808f4:	00080859 	.word	0x00080859

000808f8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   808f8:	4a17      	ldr	r2, [pc, #92]	; (80958 <pmc_switch_mck_to_pllack+0x60>)
   808fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80900:	4318      	orrs	r0, r3
   80902:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80904:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80906:	f013 0f08 	tst.w	r3, #8
   8090a:	d10a      	bne.n	80922 <pmc_switch_mck_to_pllack+0x2a>
   8090c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80910:	4911      	ldr	r1, [pc, #68]	; (80958 <pmc_switch_mck_to_pllack+0x60>)
   80912:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80914:	f012 0f08 	tst.w	r2, #8
   80918:	d103      	bne.n	80922 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8091a:	3b01      	subs	r3, #1
   8091c:	d1f9      	bne.n	80912 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8091e:	2001      	movs	r0, #1
   80920:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80922:	4a0d      	ldr	r2, [pc, #52]	; (80958 <pmc_switch_mck_to_pllack+0x60>)
   80924:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80926:	f023 0303 	bic.w	r3, r3, #3
   8092a:	f043 0302 	orr.w	r3, r3, #2
   8092e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80930:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80932:	f013 0f08 	tst.w	r3, #8
   80936:	d10a      	bne.n	8094e <pmc_switch_mck_to_pllack+0x56>
   80938:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8093c:	4906      	ldr	r1, [pc, #24]	; (80958 <pmc_switch_mck_to_pllack+0x60>)
   8093e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80940:	f012 0f08 	tst.w	r2, #8
   80944:	d105      	bne.n	80952 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80946:	3b01      	subs	r3, #1
   80948:	d1f9      	bne.n	8093e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8094a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8094c:	4770      	bx	lr
	return 0;
   8094e:	2000      	movs	r0, #0
   80950:	4770      	bx	lr
   80952:	2000      	movs	r0, #0
   80954:	4770      	bx	lr
   80956:	bf00      	nop
   80958:	400e0600 	.word	0x400e0600

0008095c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8095c:	b9c8      	cbnz	r0, 80992 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8095e:	4a11      	ldr	r2, [pc, #68]	; (809a4 <pmc_switch_mainck_to_xtal+0x48>)
   80960:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80962:	0209      	lsls	r1, r1, #8
   80964:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80966:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8096a:	f023 0303 	bic.w	r3, r3, #3
   8096e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80972:	f043 0301 	orr.w	r3, r3, #1
   80976:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80978:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8097a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8097c:	f013 0f01 	tst.w	r3, #1
   80980:	d0fb      	beq.n	8097a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80982:	4a08      	ldr	r2, [pc, #32]	; (809a4 <pmc_switch_mainck_to_xtal+0x48>)
   80984:	6a13      	ldr	r3, [r2, #32]
   80986:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8098a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8098e:	6213      	str	r3, [r2, #32]
   80990:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80992:	4904      	ldr	r1, [pc, #16]	; (809a4 <pmc_switch_mainck_to_xtal+0x48>)
   80994:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80996:	4a04      	ldr	r2, [pc, #16]	; (809a8 <pmc_switch_mainck_to_xtal+0x4c>)
   80998:	401a      	ands	r2, r3
   8099a:	4b04      	ldr	r3, [pc, #16]	; (809ac <pmc_switch_mainck_to_xtal+0x50>)
   8099c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8099e:	620b      	str	r3, [r1, #32]
   809a0:	4770      	bx	lr
   809a2:	bf00      	nop
   809a4:	400e0600 	.word	0x400e0600
   809a8:	fec8fffc 	.word	0xfec8fffc
   809ac:	01370002 	.word	0x01370002

000809b0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   809b0:	4b02      	ldr	r3, [pc, #8]	; (809bc <pmc_osc_is_ready_mainck+0xc>)
   809b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809b4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   809b8:	4770      	bx	lr
   809ba:	bf00      	nop
   809bc:	400e0600 	.word	0x400e0600

000809c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   809c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   809c4:	4b01      	ldr	r3, [pc, #4]	; (809cc <pmc_disable_pllack+0xc>)
   809c6:	629a      	str	r2, [r3, #40]	; 0x28
   809c8:	4770      	bx	lr
   809ca:	bf00      	nop
   809cc:	400e0600 	.word	0x400e0600

000809d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   809d0:	4b02      	ldr	r3, [pc, #8]	; (809dc <pmc_is_locked_pllack+0xc>)
   809d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809d4:	f000 0002 	and.w	r0, r0, #2
   809d8:	4770      	bx	lr
   809da:	bf00      	nop
   809dc:	400e0600 	.word	0x400e0600

000809e0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   809e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   809e4:	4b05      	ldr	r3, [pc, #20]	; (809fc <pmc_enable_periph_clk+0x1c>)
   809e6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   809ea:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   809ee:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   809f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   809f6:	2000      	movs	r0, #0
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	400e0600 	.word	0x400e0600

00080a00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a00:	e7fe      	b.n	80a00 <Dummy_Handler>
	...

00080a04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a04:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a06:	4b1c      	ldr	r3, [pc, #112]	; (80a78 <Reset_Handler+0x74>)
   80a08:	4a1c      	ldr	r2, [pc, #112]	; (80a7c <Reset_Handler+0x78>)
   80a0a:	429a      	cmp	r2, r3
   80a0c:	d010      	beq.n	80a30 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80a0e:	4b1c      	ldr	r3, [pc, #112]	; (80a80 <Reset_Handler+0x7c>)
   80a10:	4a19      	ldr	r2, [pc, #100]	; (80a78 <Reset_Handler+0x74>)
   80a12:	429a      	cmp	r2, r3
   80a14:	d20c      	bcs.n	80a30 <Reset_Handler+0x2c>
   80a16:	3b01      	subs	r3, #1
   80a18:	1a9b      	subs	r3, r3, r2
   80a1a:	f023 0303 	bic.w	r3, r3, #3
   80a1e:	3304      	adds	r3, #4
   80a20:	4413      	add	r3, r2
   80a22:	4916      	ldr	r1, [pc, #88]	; (80a7c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80a24:	f851 0b04 	ldr.w	r0, [r1], #4
   80a28:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80a2c:	429a      	cmp	r2, r3
   80a2e:	d1f9      	bne.n	80a24 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a30:	4b14      	ldr	r3, [pc, #80]	; (80a84 <Reset_Handler+0x80>)
   80a32:	4a15      	ldr	r2, [pc, #84]	; (80a88 <Reset_Handler+0x84>)
   80a34:	429a      	cmp	r2, r3
   80a36:	d20a      	bcs.n	80a4e <Reset_Handler+0x4a>
   80a38:	3b01      	subs	r3, #1
   80a3a:	1a9b      	subs	r3, r3, r2
   80a3c:	f023 0303 	bic.w	r3, r3, #3
   80a40:	3304      	adds	r3, #4
   80a42:	4413      	add	r3, r2
		*pDest++ = 0;
   80a44:	2100      	movs	r1, #0
   80a46:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80a4a:	4293      	cmp	r3, r2
   80a4c:	d1fb      	bne.n	80a46 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a4e:	4b0f      	ldr	r3, [pc, #60]	; (80a8c <Reset_Handler+0x88>)
   80a50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80a54:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80a58:	490d      	ldr	r1, [pc, #52]	; (80a90 <Reset_Handler+0x8c>)
   80a5a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a5c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80a64:	d203      	bcs.n	80a6e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a66:	688b      	ldr	r3, [r1, #8]
   80a68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80a6c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a6e:	4b09      	ldr	r3, [pc, #36]	; (80a94 <Reset_Handler+0x90>)
   80a70:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a72:	4b09      	ldr	r3, [pc, #36]	; (80a98 <Reset_Handler+0x94>)
   80a74:	4798      	blx	r3
   80a76:	e7fe      	b.n	80a76 <Reset_Handler+0x72>
   80a78:	20070000 	.word	0x20070000
   80a7c:	00083ff8 	.word	0x00083ff8
   80a80:	20070b20 	.word	0x20070b20
   80a84:	20070cb8 	.word	0x20070cb8
   80a88:	20070b20 	.word	0x20070b20
   80a8c:	00080000 	.word	0x00080000
   80a90:	e000ed00 	.word	0xe000ed00
   80a94:	00080f91 	.word	0x00080f91
   80a98:	00080d9d 	.word	0x00080d9d

00080a9c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80a9c:	4b3d      	ldr	r3, [pc, #244]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80aa0:	f003 0303 	and.w	r3, r3, #3
   80aa4:	2b03      	cmp	r3, #3
   80aa6:	d80e      	bhi.n	80ac6 <SystemCoreClockUpdate+0x2a>
   80aa8:	e8df f003 	tbb	[pc, r3]
   80aac:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ab0:	4b39      	ldr	r3, [pc, #228]	; (80b98 <SystemCoreClockUpdate+0xfc>)
   80ab2:	695b      	ldr	r3, [r3, #20]
   80ab4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ab8:	bf14      	ite	ne
   80aba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80abe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ac2:	4b36      	ldr	r3, [pc, #216]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80ac4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ac6:	4b33      	ldr	r3, [pc, #204]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ace:	2b70      	cmp	r3, #112	; 0x70
   80ad0:	d057      	beq.n	80b82 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ad2:	4b30      	ldr	r3, [pc, #192]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ad6:	4931      	ldr	r1, [pc, #196]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80ad8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80adc:	680b      	ldr	r3, [r1, #0]
   80ade:	40d3      	lsrs	r3, r2
   80ae0:	600b      	str	r3, [r1, #0]
   80ae2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ae4:	4b2b      	ldr	r3, [pc, #172]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80ae6:	6a1b      	ldr	r3, [r3, #32]
   80ae8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80aec:	d003      	beq.n	80af6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80aee:	4a2c      	ldr	r2, [pc, #176]	; (80ba0 <SystemCoreClockUpdate+0x104>)
   80af0:	4b2a      	ldr	r3, [pc, #168]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80af2:	601a      	str	r2, [r3, #0]
   80af4:	e7e7      	b.n	80ac6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80af6:	4a2b      	ldr	r2, [pc, #172]	; (80ba4 <SystemCoreClockUpdate+0x108>)
   80af8:	4b28      	ldr	r3, [pc, #160]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80afa:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80afc:	4b25      	ldr	r3, [pc, #148]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80afe:	6a1b      	ldr	r3, [r3, #32]
   80b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b04:	2b10      	cmp	r3, #16
   80b06:	d005      	beq.n	80b14 <SystemCoreClockUpdate+0x78>
   80b08:	2b20      	cmp	r3, #32
   80b0a:	d1dc      	bne.n	80ac6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80b0c:	4a24      	ldr	r2, [pc, #144]	; (80ba0 <SystemCoreClockUpdate+0x104>)
   80b0e:	4b23      	ldr	r3, [pc, #140]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b10:	601a      	str	r2, [r3, #0]
				break;
   80b12:	e7d8      	b.n	80ac6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80b14:	4a24      	ldr	r2, [pc, #144]	; (80ba8 <SystemCoreClockUpdate+0x10c>)
   80b16:	4b21      	ldr	r3, [pc, #132]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b18:	601a      	str	r2, [r3, #0]
				break;
   80b1a:	e7d4      	b.n	80ac6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b1c:	4b1d      	ldr	r3, [pc, #116]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80b1e:	6a1b      	ldr	r3, [r3, #32]
   80b20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b24:	d00c      	beq.n	80b40 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b26:	4a1e      	ldr	r2, [pc, #120]	; (80ba0 <SystemCoreClockUpdate+0x104>)
   80b28:	4b1c      	ldr	r3, [pc, #112]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b2a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b2c:	4b19      	ldr	r3, [pc, #100]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b30:	f003 0303 	and.w	r3, r3, #3
   80b34:	2b02      	cmp	r3, #2
   80b36:	d016      	beq.n	80b66 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b38:	4a1c      	ldr	r2, [pc, #112]	; (80bac <SystemCoreClockUpdate+0x110>)
   80b3a:	4b18      	ldr	r3, [pc, #96]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b3c:	601a      	str	r2, [r3, #0]
   80b3e:	e7c2      	b.n	80ac6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b40:	4a18      	ldr	r2, [pc, #96]	; (80ba4 <SystemCoreClockUpdate+0x108>)
   80b42:	4b16      	ldr	r3, [pc, #88]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b44:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b46:	4b13      	ldr	r3, [pc, #76]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80b48:	6a1b      	ldr	r3, [r3, #32]
   80b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b4e:	2b10      	cmp	r3, #16
   80b50:	d005      	beq.n	80b5e <SystemCoreClockUpdate+0xc2>
   80b52:	2b20      	cmp	r3, #32
   80b54:	d1ea      	bne.n	80b2c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80b56:	4a12      	ldr	r2, [pc, #72]	; (80ba0 <SystemCoreClockUpdate+0x104>)
   80b58:	4b10      	ldr	r3, [pc, #64]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b5a:	601a      	str	r2, [r3, #0]
				break;
   80b5c:	e7e6      	b.n	80b2c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80b5e:	4a12      	ldr	r2, [pc, #72]	; (80ba8 <SystemCoreClockUpdate+0x10c>)
   80b60:	4b0e      	ldr	r3, [pc, #56]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b62:	601a      	str	r2, [r3, #0]
				break;
   80b64:	e7e2      	b.n	80b2c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b66:	4a0b      	ldr	r2, [pc, #44]	; (80b94 <SystemCoreClockUpdate+0xf8>)
   80b68:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b6a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80b6c:	480b      	ldr	r0, [pc, #44]	; (80b9c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b6e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80b72:	6803      	ldr	r3, [r0, #0]
   80b74:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b78:	b2d2      	uxtb	r2, r2
   80b7a:	fbb3 f3f2 	udiv	r3, r3, r2
   80b7e:	6003      	str	r3, [r0, #0]
   80b80:	e7a1      	b.n	80ac6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80b82:	4a06      	ldr	r2, [pc, #24]	; (80b9c <SystemCoreClockUpdate+0x100>)
   80b84:	6813      	ldr	r3, [r2, #0]
   80b86:	490a      	ldr	r1, [pc, #40]	; (80bb0 <SystemCoreClockUpdate+0x114>)
   80b88:	fba1 1303 	umull	r1, r3, r1, r3
   80b8c:	085b      	lsrs	r3, r3, #1
   80b8e:	6013      	str	r3, [r2, #0]
   80b90:	4770      	bx	lr
   80b92:	bf00      	nop
   80b94:	400e0600 	.word	0x400e0600
   80b98:	400e1a10 	.word	0x400e1a10
   80b9c:	20070170 	.word	0x20070170
   80ba0:	00b71b00 	.word	0x00b71b00
   80ba4:	003d0900 	.word	0x003d0900
   80ba8:	007a1200 	.word	0x007a1200
   80bac:	0e4e1c00 	.word	0x0e4e1c00
   80bb0:	aaaaaaab 	.word	0xaaaaaaab

00080bb4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80bb4:	4b0a      	ldr	r3, [pc, #40]	; (80be0 <_sbrk+0x2c>)
   80bb6:	681b      	ldr	r3, [r3, #0]
   80bb8:	b153      	cbz	r3, 80bd0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80bba:	4b09      	ldr	r3, [pc, #36]	; (80be0 <_sbrk+0x2c>)
   80bbc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80bbe:	181a      	adds	r2, r3, r0
   80bc0:	4908      	ldr	r1, [pc, #32]	; (80be4 <_sbrk+0x30>)
   80bc2:	4291      	cmp	r1, r2
   80bc4:	db08      	blt.n	80bd8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80bc6:	4610      	mov	r0, r2
   80bc8:	4a05      	ldr	r2, [pc, #20]	; (80be0 <_sbrk+0x2c>)
   80bca:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80bcc:	4618      	mov	r0, r3
   80bce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80bd0:	4a05      	ldr	r2, [pc, #20]	; (80be8 <_sbrk+0x34>)
   80bd2:	4b03      	ldr	r3, [pc, #12]	; (80be0 <_sbrk+0x2c>)
   80bd4:	601a      	str	r2, [r3, #0]
   80bd6:	e7f0      	b.n	80bba <_sbrk+0x6>
		return (caddr_t) -1;	
   80bd8:	f04f 30ff 	mov.w	r0, #4294967295
}
   80bdc:	4770      	bx	lr
   80bde:	bf00      	nop
   80be0:	20070c4c 	.word	0x20070c4c
   80be4:	20087ffc 	.word	0x20087ffc
   80be8:	20072cb8 	.word	0x20072cb8

00080bec <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80bec:	f04f 30ff 	mov.w	r0, #4294967295
   80bf0:	4770      	bx	lr

00080bf2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80bf6:	604b      	str	r3, [r1, #4]

	return 0;
}
   80bf8:	2000      	movs	r0, #0
   80bfa:	4770      	bx	lr

00080bfc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80bfc:	2001      	movs	r0, #1
   80bfe:	4770      	bx	lr

00080c00 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c00:	2000      	movs	r0, #0
   80c02:	4770      	bx	lr

00080c04 <enable_pins>:
#define RIGHT_LED  49
#define BTN1       47
#define BTN2       45
#define VCC        43

void enable_pins(void) {
   80c04:	b538      	push	{r3, r4, r5, lr}
	ioport_enable_pin(pin_mapper(LEFT_LED));
   80c06:	2035      	movs	r0, #53	; 0x35
   80c08:	4d62      	ldr	r5, [pc, #392]	; (80d94 <enable_pins+0x190>)
   80c0a:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80c0c:	f000 031f 	and.w	r3, r0, #31
   80c10:	2401      	movs	r4, #1
   80c12:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c16:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c18:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c1c:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80c20:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80c22:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(MIDDLE_LED));
   80c24:	2033      	movs	r0, #51	; 0x33
   80c26:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   80c28:	f000 031f 	and.w	r3, r0, #31
   80c2c:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c30:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c32:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c36:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80c3a:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80c3c:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(RIGHT_LED));
   80c3e:	2031      	movs	r0, #49	; 0x31
   80c40:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   80c42:	f000 031f 	and.w	r3, r0, #31
   80c46:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c4a:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c4c:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c50:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80c54:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80c56:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(BTN1));
   80c58:	202f      	movs	r0, #47	; 0x2f
   80c5a:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   80c5c:	f000 031f 	and.w	r3, r0, #31
   80c60:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c64:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c66:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c6a:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80c6e:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80c70:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(BTN2));
   80c72:	202d      	movs	r0, #45	; 0x2d
   80c74:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   80c76:	f000 031f 	and.w	r3, r0, #31
   80c7a:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c7e:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c80:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c84:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80c88:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80c8a:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(VCC));
   80c8c:	202b      	movs	r0, #43	; 0x2b
   80c8e:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   80c90:	f000 031f 	and.w	r3, r0, #31
   80c94:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   80c98:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80c9a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   80c9e:	f200 7007 	addw	r0, r0, #1799	; 0x707
   80ca2:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80ca4:	6003      	str	r3, [r0, #0]
	
	ioport_set_pin_dir(pin_mapper(LEFT_LED), IOPORT_DIR_OUTPUT);
   80ca6:	2035      	movs	r0, #53	; 0x35
   80ca8:	47a8      	blx	r5
	return pin >> 5;
   80caa:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80cac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80cb0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80cb4:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80cb6:	f000 001f 	and.w	r0, r0, #31
   80cba:	fa04 f000 	lsl.w	r0, r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80cbe:	6118      	str	r0, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80cc0:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(MIDDLE_LED), IOPORT_DIR_OUTPUT);
   80cc4:	2033      	movs	r0, #51	; 0x33
   80cc6:	47a8      	blx	r5
	return pin >> 5;
   80cc8:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80cca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80cce:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80cd2:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80cd4:	f000 001f 	and.w	r0, r0, #31
   80cd8:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80cdc:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80cde:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(RIGHT_LED), IOPORT_DIR_OUTPUT);
   80ce2:	2031      	movs	r0, #49	; 0x31
   80ce4:	47a8      	blx	r5
	return pin >> 5;
   80ce6:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80ce8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80cec:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80cf0:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80cf2:	f000 001f 	and.w	r0, r0, #31
   80cf6:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80cfa:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80cfc:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(VCC), IOPORT_DIR_OUTPUT);
   80d00:	202b      	movs	r0, #43	; 0x2b
   80d02:	47a8      	blx	r5
	return pin >> 5;
   80d04:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80d06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80d0a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80d0e:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80d10:	f000 001f 	and.w	r0, r0, #31
   80d14:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80d18:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80d1a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	
	ioport_set_pin_dir(pin_mapper(BTN1), IOPORT_DIR_INPUT);
   80d1e:	202f      	movs	r0, #47	; 0x2f
   80d20:	47a8      	blx	r5
	return pin >> 5;
   80d22:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80d24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80d28:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80d2c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80d2e:	f000 001f 	and.w	r0, r0, #31
   80d32:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80d36:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80d38:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(BTN2), IOPORT_DIR_INPUT);
   80d3c:	202d      	movs	r0, #45	; 0x2d
   80d3e:	47a8      	blx	r5
	return pin >> 5;
   80d40:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80d42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80d46:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80d4a:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80d4c:	f000 001f 	and.w	r0, r0, #31
   80d50:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80d54:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80d56:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	
	ioport_set_pin_level(pin_mapper(VCC), 1);
   80d5a:	202b      	movs	r0, #43	; 0x2b
   80d5c:	47a8      	blx	r5
	return pin >> 5;
   80d5e:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80d60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80d64:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80d68:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80d6a:	f000 001f 	and.w	r0, r0, #31
   80d6e:	4084      	lsls	r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80d70:	631c      	str	r4, [r3, #48]	; 0x30
	
	/* Unfortunately PIO-system doesn't follow ioport convention so we must enter SAM-pins */
	PIOC->PIO_PUDR  |= PIO_PC18 | PIO_PC16; /* Set pull-up for both buttons */
   80d72:	4b09      	ldr	r3, [pc, #36]	; (80d98 <enable_pins+0x194>)
   80d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   80d76:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
   80d7a:	661a      	str	r2, [r3, #96]	; 0x60
	PIOC->PIO_IFER  |= PIO_PC18 | PIO_PC16; /* Enable switch debounce filter for both buttons */
   80d7c:	6a1a      	ldr	r2, [r3, #32]
   80d7e:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
   80d82:	621a      	str	r2, [r3, #32]
	PIOC->PIO_DIFSR |= PIO_PC18 | PIO_PC16;
   80d84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   80d88:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
   80d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80d90:	bd38      	pop	{r3, r4, r5, pc}
   80d92:	bf00      	nop
   80d94:	00080229 	.word	0x00080229
   80d98:	400e1200 	.word	0x400e1200

00080d9c <main>:
}

int main (void) {
   80d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	sysclk_init();
   80da0:	4b70      	ldr	r3, [pc, #448]	; (80f64 <main+0x1c8>)
   80da2:	4798      	blx	r3
	board_init();
   80da4:	4b70      	ldr	r3, [pc, #448]	; (80f68 <main+0x1cc>)
   80da6:	4798      	blx	r3

	console_init();
   80da8:	4b70      	ldr	r3, [pc, #448]	; (80f6c <main+0x1d0>)
   80daa:	4798      	blx	r3
   80dac:	200b      	movs	r0, #11
   80dae:	4c70      	ldr	r4, [pc, #448]	; (80f70 <main+0x1d4>)
   80db0:	47a0      	blx	r4
   80db2:	200c      	movs	r0, #12
   80db4:	47a0      	blx	r4
   80db6:	200d      	movs	r0, #13
   80db8:	47a0      	blx	r4
   80dba:	200e      	movs	r0, #14
   80dbc:	47a0      	blx	r4
	ioport_init();
	enable_pins();
   80dbe:	4b6d      	ldr	r3, [pc, #436]	; (80f74 <main+0x1d8>)
   80dc0:	4798      	blx	r3
	
	uint8_t button1_pressed = 0,
			button2_pressed = 0;
	
	while(1) {
		button1_pressed = ~ioport_get_pin_level(pin_mapper(BTN1)) & 1;
   80dc2:	4d6d      	ldr	r5, [pc, #436]	; (80f78 <main+0x1dc>)
		}
		else {
			ioport_set_pin_level(pin_mapper(RIGHT_LED), 0);
			ioport_set_pin_level(pin_mapper(MIDDLE_LED), 0);
			ioport_set_pin_level(pin_mapper(LEFT_LED), 0);
			printf("No button pressed\n");
   80dc4:	4f6d      	ldr	r7, [pc, #436]	; (80f7c <main+0x1e0>)
   80dc6:	4e6e      	ldr	r6, [pc, #440]	; (80f80 <main+0x1e4>)
   80dc8:	e054      	b.n	80e74 <main+0xd8>
			ioport_set_pin_level(pin_mapper(RIGHT_LED), 1);
   80dca:	2031      	movs	r0, #49	; 0x31
   80dcc:	47a8      	blx	r5
	return pin >> 5;
   80dce:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80dd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80dd4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80dd8:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80dda:	f000 001f 	and.w	r0, r0, #31
   80dde:	2401      	movs	r4, #1
   80de0:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80de4:	6318      	str	r0, [r3, #48]	; 0x30
			ioport_set_pin_level(pin_mapper(MIDDLE_LED), 1);
   80de6:	2033      	movs	r0, #51	; 0x33
   80de8:	47a8      	blx	r5
	return pin >> 5;
   80dea:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80dec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80df0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80df4:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80df6:	f000 001f 	and.w	r0, r0, #31
   80dfa:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80dfe:	6318      	str	r0, [r3, #48]	; 0x30
			ioport_set_pin_level(pin_mapper(LEFT_LED), 1);
   80e00:	2035      	movs	r0, #53	; 0x35
   80e02:	47a8      	blx	r5
	return pin >> 5;
   80e04:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e0a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e0e:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80e10:	f000 001f 	and.w	r0, r0, #31
   80e14:	4084      	lsls	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80e16:	631c      	str	r4, [r3, #48]	; 0x30
			printf("Both buttons pressed\n");
   80e18:	485a      	ldr	r0, [pc, #360]	; (80f84 <main+0x1e8>)
   80e1a:	47b0      	blx	r6
   80e1c:	e02a      	b.n	80e74 <main+0xd8>
		else if (button2_pressed) {
   80e1e:	2b00      	cmp	r3, #0
   80e20:	d175      	bne.n	80f0e <main+0x172>
			ioport_set_pin_level(pin_mapper(RIGHT_LED), 1);
   80e22:	2031      	movs	r0, #49	; 0x31
   80e24:	47a8      	blx	r5
	return pin >> 5;
   80e26:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e2c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e30:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80e32:	f000 001f 	and.w	r0, r0, #31
   80e36:	2401      	movs	r4, #1
   80e38:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80e3c:	6318      	str	r0, [r3, #48]	; 0x30
			ioport_set_pin_level(pin_mapper(MIDDLE_LED), 0);
   80e3e:	2033      	movs	r0, #51	; 0x33
   80e40:	47a8      	blx	r5
	return pin >> 5;
   80e42:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e44:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e48:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e4c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80e4e:	f000 001f 	and.w	r0, r0, #31
   80e52:	fa04 f000 	lsl.w	r0, r4, r0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80e56:	6358      	str	r0, [r3, #52]	; 0x34
			ioport_set_pin_level(pin_mapper(LEFT_LED), 0);
   80e58:	2035      	movs	r0, #53	; 0x35
   80e5a:	47a8      	blx	r5
	return pin >> 5;
   80e5c:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e62:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e66:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80e68:	f000 001f 	and.w	r0, r0, #31
   80e6c:	4084      	lsls	r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80e6e:	635c      	str	r4, [r3, #52]	; 0x34
			printf("Button 2 pressed\n");
   80e70:	4845      	ldr	r0, [pc, #276]	; (80f88 <main+0x1ec>)
   80e72:	47b0      	blx	r6
		button1_pressed = ~ioport_get_pin_level(pin_mapper(BTN1)) & 1;
   80e74:	202f      	movs	r0, #47	; 0x2f
   80e76:	47a8      	blx	r5
	return pin >> 5;
   80e78:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e7e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e82:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
   80e86:	f000 041f 	and.w	r4, r0, #31
   80e8a:	f04f 0801 	mov.w	r8, #1
   80e8e:	fa08 f404 	lsl.w	r4, r8, r4
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80e92:	401c      	ands	r4, r3
		button2_pressed = ~ioport_get_pin_level(pin_mapper(BTN2)) & 1;
   80e94:	202d      	movs	r0, #45	; 0x2d
   80e96:	47a8      	blx	r5
	return pin >> 5;
   80e98:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80e9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e9e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ea2:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
   80ea6:	f000 001f 	and.w	r0, r0, #31
   80eaa:	fa08 f800 	lsl.w	r8, r8, r0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80eae:	ea08 0303 	and.w	r3, r8, r3
		if (button1_pressed && button2_pressed) {
   80eb2:	2c00      	cmp	r4, #0
   80eb4:	d1b3      	bne.n	80e1e <main+0x82>
   80eb6:	2b00      	cmp	r3, #0
   80eb8:	d087      	beq.n	80dca <main+0x2e>
			ioport_set_pin_level(pin_mapper(RIGHT_LED), 0);
   80eba:	2031      	movs	r0, #49	; 0x31
   80ebc:	47a8      	blx	r5
	return pin >> 5;
   80ebe:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80ec0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ec4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ec8:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80eca:	f000 001f 	and.w	r0, r0, #31
   80ece:	2401      	movs	r4, #1
   80ed0:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ed4:	6358      	str	r0, [r3, #52]	; 0x34
			ioport_set_pin_level(pin_mapper(MIDDLE_LED), 0);
   80ed6:	2033      	movs	r0, #51	; 0x33
   80ed8:	47a8      	blx	r5
	return pin >> 5;
   80eda:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80edc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ee0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ee4:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80ee6:	f000 001f 	and.w	r0, r0, #31
   80eea:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80eee:	6358      	str	r0, [r3, #52]	; 0x34
			ioport_set_pin_level(pin_mapper(LEFT_LED), 1);
   80ef0:	2035      	movs	r0, #53	; 0x35
   80ef2:	47a8      	blx	r5
	return pin >> 5;
   80ef4:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80ef6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80efa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80efe:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80f00:	f000 001f 	and.w	r0, r0, #31
   80f04:	4084      	lsls	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80f06:	631c      	str	r4, [r3, #48]	; 0x30
			printf("Button 1 pressed\n");
   80f08:	4820      	ldr	r0, [pc, #128]	; (80f8c <main+0x1f0>)
   80f0a:	47b0      	blx	r6
   80f0c:	e7b2      	b.n	80e74 <main+0xd8>
			ioport_set_pin_level(pin_mapper(RIGHT_LED), 0);
   80f0e:	2031      	movs	r0, #49	; 0x31
   80f10:	47a8      	blx	r5
	return pin >> 5;
   80f12:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f18:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f1c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80f1e:	f000 001f 	and.w	r0, r0, #31
   80f22:	2401      	movs	r4, #1
   80f24:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f28:	6358      	str	r0, [r3, #52]	; 0x34
			ioport_set_pin_level(pin_mapper(MIDDLE_LED), 0);
   80f2a:	2033      	movs	r0, #51	; 0x33
   80f2c:	47a8      	blx	r5
	return pin >> 5;
   80f2e:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f30:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f34:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f38:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80f3a:	f000 001f 	and.w	r0, r0, #31
   80f3e:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f42:	6358      	str	r0, [r3, #52]	; 0x34
			ioport_set_pin_level(pin_mapper(LEFT_LED), 0);
   80f44:	2035      	movs	r0, #53	; 0x35
   80f46:	47a8      	blx	r5
	return pin >> 5;
   80f48:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80f4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f4e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f52:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80f54:	f000 001f 	and.w	r0, r0, #31
   80f58:	4084      	lsls	r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f5a:	635c      	str	r4, [r3, #52]	; 0x34
			printf("No button pressed\n");
   80f5c:	4638      	mov	r0, r7
   80f5e:	47b0      	blx	r6
   80f60:	e788      	b.n	80e74 <main+0xd8>
   80f62:	bf00      	nop
   80f64:	00080569 	.word	0x00080569
   80f68:	000805cd 	.word	0x000805cd
   80f6c:	000804ed 	.word	0x000804ed
   80f70:	000809e1 	.word	0x000809e1
   80f74:	00080c05 	.word	0x00080c05
   80f78:	00080229 	.word	0x00080229
   80f7c:	00083e50 	.word	0x00083e50
   80f80:	00080fe1 	.word	0x00080fe1
   80f84:	00083e10 	.word	0x00083e10
   80f88:	00083e3c 	.word	0x00083e3c
   80f8c:	00083e28 	.word	0x00083e28

00080f90 <__libc_init_array>:
   80f90:	b570      	push	{r4, r5, r6, lr}
   80f92:	4e0f      	ldr	r6, [pc, #60]	; (80fd0 <__libc_init_array+0x40>)
   80f94:	4d0f      	ldr	r5, [pc, #60]	; (80fd4 <__libc_init_array+0x44>)
   80f96:	1b76      	subs	r6, r6, r5
   80f98:	10b6      	asrs	r6, r6, #2
   80f9a:	bf18      	it	ne
   80f9c:	2400      	movne	r4, #0
   80f9e:	d005      	beq.n	80fac <__libc_init_array+0x1c>
   80fa0:	3401      	adds	r4, #1
   80fa2:	f855 3b04 	ldr.w	r3, [r5], #4
   80fa6:	4798      	blx	r3
   80fa8:	42a6      	cmp	r6, r4
   80faa:	d1f9      	bne.n	80fa0 <__libc_init_array+0x10>
   80fac:	4e0a      	ldr	r6, [pc, #40]	; (80fd8 <__libc_init_array+0x48>)
   80fae:	4d0b      	ldr	r5, [pc, #44]	; (80fdc <__libc_init_array+0x4c>)
   80fb0:	f003 f80c 	bl	83fcc <_init>
   80fb4:	1b76      	subs	r6, r6, r5
   80fb6:	10b6      	asrs	r6, r6, #2
   80fb8:	bf18      	it	ne
   80fba:	2400      	movne	r4, #0
   80fbc:	d006      	beq.n	80fcc <__libc_init_array+0x3c>
   80fbe:	3401      	adds	r4, #1
   80fc0:	f855 3b04 	ldr.w	r3, [r5], #4
   80fc4:	4798      	blx	r3
   80fc6:	42a6      	cmp	r6, r4
   80fc8:	d1f9      	bne.n	80fbe <__libc_init_array+0x2e>
   80fca:	bd70      	pop	{r4, r5, r6, pc}
   80fcc:	bd70      	pop	{r4, r5, r6, pc}
   80fce:	bf00      	nop
   80fd0:	00083fd8 	.word	0x00083fd8
   80fd4:	00083fd8 	.word	0x00083fd8
   80fd8:	00083fe0 	.word	0x00083fe0
   80fdc:	00083fd8 	.word	0x00083fd8

00080fe0 <iprintf>:
   80fe0:	b40f      	push	{r0, r1, r2, r3}
   80fe2:	b510      	push	{r4, lr}
   80fe4:	4b07      	ldr	r3, [pc, #28]	; (81004 <iprintf+0x24>)
   80fe6:	b082      	sub	sp, #8
   80fe8:	ac04      	add	r4, sp, #16
   80fea:	f854 2b04 	ldr.w	r2, [r4], #4
   80fee:	6818      	ldr	r0, [r3, #0]
   80ff0:	4623      	mov	r3, r4
   80ff2:	6881      	ldr	r1, [r0, #8]
   80ff4:	9401      	str	r4, [sp, #4]
   80ff6:	f000 f965 	bl	812c4 <_vfiprintf_r>
   80ffa:	b002      	add	sp, #8
   80ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81000:	b004      	add	sp, #16
   81002:	4770      	bx	lr
   81004:	20070174 	.word	0x20070174

00081008 <memset>:
   81008:	b470      	push	{r4, r5, r6}
   8100a:	0786      	lsls	r6, r0, #30
   8100c:	d046      	beq.n	8109c <memset+0x94>
   8100e:	1e54      	subs	r4, r2, #1
   81010:	2a00      	cmp	r2, #0
   81012:	d041      	beq.n	81098 <memset+0x90>
   81014:	b2ca      	uxtb	r2, r1
   81016:	4603      	mov	r3, r0
   81018:	e002      	b.n	81020 <memset+0x18>
   8101a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8101e:	d33b      	bcc.n	81098 <memset+0x90>
   81020:	f803 2b01 	strb.w	r2, [r3], #1
   81024:	079d      	lsls	r5, r3, #30
   81026:	d1f8      	bne.n	8101a <memset+0x12>
   81028:	2c03      	cmp	r4, #3
   8102a:	d92e      	bls.n	8108a <memset+0x82>
   8102c:	b2cd      	uxtb	r5, r1
   8102e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81032:	2c0f      	cmp	r4, #15
   81034:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81038:	d919      	bls.n	8106e <memset+0x66>
   8103a:	4626      	mov	r6, r4
   8103c:	f103 0210 	add.w	r2, r3, #16
   81040:	3e10      	subs	r6, #16
   81042:	2e0f      	cmp	r6, #15
   81044:	f842 5c10 	str.w	r5, [r2, #-16]
   81048:	f842 5c0c 	str.w	r5, [r2, #-12]
   8104c:	f842 5c08 	str.w	r5, [r2, #-8]
   81050:	f842 5c04 	str.w	r5, [r2, #-4]
   81054:	f102 0210 	add.w	r2, r2, #16
   81058:	d8f2      	bhi.n	81040 <memset+0x38>
   8105a:	f1a4 0210 	sub.w	r2, r4, #16
   8105e:	f022 020f 	bic.w	r2, r2, #15
   81062:	f004 040f 	and.w	r4, r4, #15
   81066:	3210      	adds	r2, #16
   81068:	2c03      	cmp	r4, #3
   8106a:	4413      	add	r3, r2
   8106c:	d90d      	bls.n	8108a <memset+0x82>
   8106e:	461e      	mov	r6, r3
   81070:	4622      	mov	r2, r4
   81072:	3a04      	subs	r2, #4
   81074:	2a03      	cmp	r2, #3
   81076:	f846 5b04 	str.w	r5, [r6], #4
   8107a:	d8fa      	bhi.n	81072 <memset+0x6a>
   8107c:	1f22      	subs	r2, r4, #4
   8107e:	f022 0203 	bic.w	r2, r2, #3
   81082:	3204      	adds	r2, #4
   81084:	4413      	add	r3, r2
   81086:	f004 0403 	and.w	r4, r4, #3
   8108a:	b12c      	cbz	r4, 81098 <memset+0x90>
   8108c:	b2c9      	uxtb	r1, r1
   8108e:	441c      	add	r4, r3
   81090:	f803 1b01 	strb.w	r1, [r3], #1
   81094:	429c      	cmp	r4, r3
   81096:	d1fb      	bne.n	81090 <memset+0x88>
   81098:	bc70      	pop	{r4, r5, r6}
   8109a:	4770      	bx	lr
   8109c:	4614      	mov	r4, r2
   8109e:	4603      	mov	r3, r0
   810a0:	e7c2      	b.n	81028 <memset+0x20>
   810a2:	bf00      	nop

000810a4 <setbuf>:
   810a4:	2900      	cmp	r1, #0
   810a6:	bf0c      	ite	eq
   810a8:	2202      	moveq	r2, #2
   810aa:	2200      	movne	r2, #0
   810ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   810b0:	f000 b800 	b.w	810b4 <setvbuf>

000810b4 <setvbuf>:
   810b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810b8:	4d61      	ldr	r5, [pc, #388]	; (81240 <setvbuf+0x18c>)
   810ba:	b083      	sub	sp, #12
   810bc:	682d      	ldr	r5, [r5, #0]
   810be:	4604      	mov	r4, r0
   810c0:	460f      	mov	r7, r1
   810c2:	4690      	mov	r8, r2
   810c4:	461e      	mov	r6, r3
   810c6:	b115      	cbz	r5, 810ce <setvbuf+0x1a>
   810c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810ca:	2b00      	cmp	r3, #0
   810cc:	d064      	beq.n	81198 <setvbuf+0xe4>
   810ce:	f1b8 0f02 	cmp.w	r8, #2
   810d2:	d006      	beq.n	810e2 <setvbuf+0x2e>
   810d4:	f1b8 0f01 	cmp.w	r8, #1
   810d8:	f200 809f 	bhi.w	8121a <setvbuf+0x166>
   810dc:	2e00      	cmp	r6, #0
   810de:	f2c0 809c 	blt.w	8121a <setvbuf+0x166>
   810e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   810e4:	07d8      	lsls	r0, r3, #31
   810e6:	d534      	bpl.n	81152 <setvbuf+0x9e>
   810e8:	4621      	mov	r1, r4
   810ea:	4628      	mov	r0, r5
   810ec:	f001 f882 	bl	821f4 <_fflush_r>
   810f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   810f2:	b141      	cbz	r1, 81106 <setvbuf+0x52>
   810f4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   810f8:	4299      	cmp	r1, r3
   810fa:	d002      	beq.n	81102 <setvbuf+0x4e>
   810fc:	4628      	mov	r0, r5
   810fe:	f001 f9f7 	bl	824f0 <_free_r>
   81102:	2300      	movs	r3, #0
   81104:	6323      	str	r3, [r4, #48]	; 0x30
   81106:	2200      	movs	r2, #0
   81108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8110c:	61a2      	str	r2, [r4, #24]
   8110e:	6062      	str	r2, [r4, #4]
   81110:	061a      	lsls	r2, r3, #24
   81112:	d43a      	bmi.n	8118a <setvbuf+0xd6>
   81114:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81118:	f023 0303 	bic.w	r3, r3, #3
   8111c:	f1b8 0f02 	cmp.w	r8, #2
   81120:	81a3      	strh	r3, [r4, #12]
   81122:	d01d      	beq.n	81160 <setvbuf+0xac>
   81124:	ab01      	add	r3, sp, #4
   81126:	466a      	mov	r2, sp
   81128:	4621      	mov	r1, r4
   8112a:	4628      	mov	r0, r5
   8112c:	f001 fc7e 	bl	82a2c <__swhatbuf_r>
   81130:	89a3      	ldrh	r3, [r4, #12]
   81132:	4318      	orrs	r0, r3
   81134:	81a0      	strh	r0, [r4, #12]
   81136:	2e00      	cmp	r6, #0
   81138:	d132      	bne.n	811a0 <setvbuf+0xec>
   8113a:	9e00      	ldr	r6, [sp, #0]
   8113c:	4630      	mov	r0, r6
   8113e:	f001 fced 	bl	82b1c <malloc>
   81142:	4607      	mov	r7, r0
   81144:	2800      	cmp	r0, #0
   81146:	d06b      	beq.n	81220 <setvbuf+0x16c>
   81148:	89a3      	ldrh	r3, [r4, #12]
   8114a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8114e:	81a3      	strh	r3, [r4, #12]
   81150:	e028      	b.n	811a4 <setvbuf+0xf0>
   81152:	89a3      	ldrh	r3, [r4, #12]
   81154:	0599      	lsls	r1, r3, #22
   81156:	d4c7      	bmi.n	810e8 <setvbuf+0x34>
   81158:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8115a:	f001 fc63 	bl	82a24 <__retarget_lock_acquire_recursive>
   8115e:	e7c3      	b.n	810e8 <setvbuf+0x34>
   81160:	2500      	movs	r5, #0
   81162:	2600      	movs	r6, #0
   81164:	2001      	movs	r0, #1
   81166:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81168:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8116c:	f043 0302 	orr.w	r3, r3, #2
   81170:	60a6      	str	r6, [r4, #8]
   81172:	07ce      	lsls	r6, r1, #31
   81174:	81a3      	strh	r3, [r4, #12]
   81176:	6160      	str	r0, [r4, #20]
   81178:	6022      	str	r2, [r4, #0]
   8117a:	6122      	str	r2, [r4, #16]
   8117c:	d401      	bmi.n	81182 <setvbuf+0xce>
   8117e:	0598      	lsls	r0, r3, #22
   81180:	d53e      	bpl.n	81200 <setvbuf+0x14c>
   81182:	4628      	mov	r0, r5
   81184:	b003      	add	sp, #12
   81186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8118a:	6921      	ldr	r1, [r4, #16]
   8118c:	4628      	mov	r0, r5
   8118e:	f001 f9af 	bl	824f0 <_free_r>
   81192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81196:	e7bd      	b.n	81114 <setvbuf+0x60>
   81198:	4628      	mov	r0, r5
   8119a:	f001 f883 	bl	822a4 <__sinit>
   8119e:	e796      	b.n	810ce <setvbuf+0x1a>
   811a0:	2f00      	cmp	r7, #0
   811a2:	d0cb      	beq.n	8113c <setvbuf+0x88>
   811a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   811a6:	2b00      	cmp	r3, #0
   811a8:	d033      	beq.n	81212 <setvbuf+0x15e>
   811aa:	9b00      	ldr	r3, [sp, #0]
   811ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   811b0:	429e      	cmp	r6, r3
   811b2:	bf1c      	itt	ne
   811b4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   811b8:	81a2      	strhne	r2, [r4, #12]
   811ba:	f1b8 0f01 	cmp.w	r8, #1
   811be:	bf04      	itt	eq
   811c0:	f042 0201 	orreq.w	r2, r2, #1
   811c4:	81a2      	strheq	r2, [r4, #12]
   811c6:	b292      	uxth	r2, r2
   811c8:	f012 0308 	ands.w	r3, r2, #8
   811cc:	6027      	str	r7, [r4, #0]
   811ce:	6127      	str	r7, [r4, #16]
   811d0:	6166      	str	r6, [r4, #20]
   811d2:	d00e      	beq.n	811f2 <setvbuf+0x13e>
   811d4:	07d1      	lsls	r1, r2, #31
   811d6:	d51a      	bpl.n	8120e <setvbuf+0x15a>
   811d8:	2300      	movs	r3, #0
   811da:	6e65      	ldr	r5, [r4, #100]	; 0x64
   811dc:	4276      	negs	r6, r6
   811de:	f015 0501 	ands.w	r5, r5, #1
   811e2:	61a6      	str	r6, [r4, #24]
   811e4:	60a3      	str	r3, [r4, #8]
   811e6:	d009      	beq.n	811fc <setvbuf+0x148>
   811e8:	2500      	movs	r5, #0
   811ea:	4628      	mov	r0, r5
   811ec:	b003      	add	sp, #12
   811ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   811f2:	60a3      	str	r3, [r4, #8]
   811f4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   811f6:	f015 0501 	ands.w	r5, r5, #1
   811fa:	d1f5      	bne.n	811e8 <setvbuf+0x134>
   811fc:	0593      	lsls	r3, r2, #22
   811fe:	d4c0      	bmi.n	81182 <setvbuf+0xce>
   81200:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81202:	f001 fc11 	bl	82a28 <__retarget_lock_release_recursive>
   81206:	4628      	mov	r0, r5
   81208:	b003      	add	sp, #12
   8120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8120e:	60a6      	str	r6, [r4, #8]
   81210:	e7f0      	b.n	811f4 <setvbuf+0x140>
   81212:	4628      	mov	r0, r5
   81214:	f001 f846 	bl	822a4 <__sinit>
   81218:	e7c7      	b.n	811aa <setvbuf+0xf6>
   8121a:	f04f 35ff 	mov.w	r5, #4294967295
   8121e:	e7b0      	b.n	81182 <setvbuf+0xce>
   81220:	f8dd 9000 	ldr.w	r9, [sp]
   81224:	45b1      	cmp	r9, r6
   81226:	d004      	beq.n	81232 <setvbuf+0x17e>
   81228:	4648      	mov	r0, r9
   8122a:	f001 fc77 	bl	82b1c <malloc>
   8122e:	4607      	mov	r7, r0
   81230:	b920      	cbnz	r0, 8123c <setvbuf+0x188>
   81232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81236:	f04f 35ff 	mov.w	r5, #4294967295
   8123a:	e792      	b.n	81162 <setvbuf+0xae>
   8123c:	464e      	mov	r6, r9
   8123e:	e783      	b.n	81148 <setvbuf+0x94>
   81240:	20070174 	.word	0x20070174

00081244 <__sprint_r.part.0>:
   81244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81248:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8124a:	4693      	mov	fp, r2
   8124c:	049c      	lsls	r4, r3, #18
   8124e:	d52f      	bpl.n	812b0 <__sprint_r.part.0+0x6c>
   81250:	6893      	ldr	r3, [r2, #8]
   81252:	6812      	ldr	r2, [r2, #0]
   81254:	b353      	cbz	r3, 812ac <__sprint_r.part.0+0x68>
   81256:	460e      	mov	r6, r1
   81258:	4607      	mov	r7, r0
   8125a:	f102 0908 	add.w	r9, r2, #8
   8125e:	e919 0420 	ldmdb	r9, {r5, sl}
   81262:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81266:	d017      	beq.n	81298 <__sprint_r.part.0+0x54>
   81268:	2400      	movs	r4, #0
   8126a:	3d04      	subs	r5, #4
   8126c:	e001      	b.n	81272 <__sprint_r.part.0+0x2e>
   8126e:	45a0      	cmp	r8, r4
   81270:	d010      	beq.n	81294 <__sprint_r.part.0+0x50>
   81272:	4632      	mov	r2, r6
   81274:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81278:	4638      	mov	r0, r7
   8127a:	f001 f8b5 	bl	823e8 <_fputwc_r>
   8127e:	1c43      	adds	r3, r0, #1
   81280:	f104 0401 	add.w	r4, r4, #1
   81284:	d1f3      	bne.n	8126e <__sprint_r.part.0+0x2a>
   81286:	2300      	movs	r3, #0
   81288:	f8cb 3008 	str.w	r3, [fp, #8]
   8128c:	f8cb 3004 	str.w	r3, [fp, #4]
   81290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81294:	f8db 3008 	ldr.w	r3, [fp, #8]
   81298:	f02a 0a03 	bic.w	sl, sl, #3
   8129c:	eba3 030a 	sub.w	r3, r3, sl
   812a0:	f8cb 3008 	str.w	r3, [fp, #8]
   812a4:	f109 0908 	add.w	r9, r9, #8
   812a8:	2b00      	cmp	r3, #0
   812aa:	d1d8      	bne.n	8125e <__sprint_r.part.0+0x1a>
   812ac:	2000      	movs	r0, #0
   812ae:	e7ea      	b.n	81286 <__sprint_r.part.0+0x42>
   812b0:	f001 fa04 	bl	826bc <__sfvwrite_r>
   812b4:	2300      	movs	r3, #0
   812b6:	f8cb 3008 	str.w	r3, [fp, #8]
   812ba:	f8cb 3004 	str.w	r3, [fp, #4]
   812be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812c2:	bf00      	nop

000812c4 <_vfiprintf_r>:
   812c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812c8:	b0ad      	sub	sp, #180	; 0xb4
   812ca:	461d      	mov	r5, r3
   812cc:	468b      	mov	fp, r1
   812ce:	4690      	mov	r8, r2
   812d0:	9307      	str	r3, [sp, #28]
   812d2:	9006      	str	r0, [sp, #24]
   812d4:	b118      	cbz	r0, 812de <_vfiprintf_r+0x1a>
   812d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   812d8:	2b00      	cmp	r3, #0
   812da:	f000 80f3 	beq.w	814c4 <_vfiprintf_r+0x200>
   812de:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   812e2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   812e6:	07df      	lsls	r7, r3, #31
   812e8:	b281      	uxth	r1, r0
   812ea:	d402      	bmi.n	812f2 <_vfiprintf_r+0x2e>
   812ec:	058e      	lsls	r6, r1, #22
   812ee:	f140 80fc 	bpl.w	814ea <_vfiprintf_r+0x226>
   812f2:	048c      	lsls	r4, r1, #18
   812f4:	d40a      	bmi.n	8130c <_vfiprintf_r+0x48>
   812f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   812fa:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   812fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81302:	f8ab 100c 	strh.w	r1, [fp, #12]
   81306:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8130a:	b289      	uxth	r1, r1
   8130c:	0708      	lsls	r0, r1, #28
   8130e:	f140 80b3 	bpl.w	81478 <_vfiprintf_r+0x1b4>
   81312:	f8db 3010 	ldr.w	r3, [fp, #16]
   81316:	2b00      	cmp	r3, #0
   81318:	f000 80ae 	beq.w	81478 <_vfiprintf_r+0x1b4>
   8131c:	f001 031a 	and.w	r3, r1, #26
   81320:	2b0a      	cmp	r3, #10
   81322:	f000 80b5 	beq.w	81490 <_vfiprintf_r+0x1cc>
   81326:	2300      	movs	r3, #0
   81328:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8132c:	46d1      	mov	r9, sl
   8132e:	930b      	str	r3, [sp, #44]	; 0x2c
   81330:	9303      	str	r3, [sp, #12]
   81332:	9311      	str	r3, [sp, #68]	; 0x44
   81334:	9310      	str	r3, [sp, #64]	; 0x40
   81336:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8133a:	f8cd b010 	str.w	fp, [sp, #16]
   8133e:	f898 3000 	ldrb.w	r3, [r8]
   81342:	4644      	mov	r4, r8
   81344:	b1fb      	cbz	r3, 81386 <_vfiprintf_r+0xc2>
   81346:	2b25      	cmp	r3, #37	; 0x25
   81348:	d102      	bne.n	81350 <_vfiprintf_r+0x8c>
   8134a:	e01c      	b.n	81386 <_vfiprintf_r+0xc2>
   8134c:	2b25      	cmp	r3, #37	; 0x25
   8134e:	d003      	beq.n	81358 <_vfiprintf_r+0x94>
   81350:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81354:	2b00      	cmp	r3, #0
   81356:	d1f9      	bne.n	8134c <_vfiprintf_r+0x88>
   81358:	eba4 0508 	sub.w	r5, r4, r8
   8135c:	b19d      	cbz	r5, 81386 <_vfiprintf_r+0xc2>
   8135e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81360:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81362:	3301      	adds	r3, #1
   81364:	442a      	add	r2, r5
   81366:	2b07      	cmp	r3, #7
   81368:	f8c9 8000 	str.w	r8, [r9]
   8136c:	f8c9 5004 	str.w	r5, [r9, #4]
   81370:	9211      	str	r2, [sp, #68]	; 0x44
   81372:	9310      	str	r3, [sp, #64]	; 0x40
   81374:	dd7a      	ble.n	8146c <_vfiprintf_r+0x1a8>
   81376:	2a00      	cmp	r2, #0
   81378:	f040 84b5 	bne.w	81ce6 <_vfiprintf_r+0xa22>
   8137c:	46d1      	mov	r9, sl
   8137e:	9b03      	ldr	r3, [sp, #12]
   81380:	9210      	str	r2, [sp, #64]	; 0x40
   81382:	442b      	add	r3, r5
   81384:	9303      	str	r3, [sp, #12]
   81386:	7823      	ldrb	r3, [r4, #0]
   81388:	2b00      	cmp	r3, #0
   8138a:	f000 83e5 	beq.w	81b58 <_vfiprintf_r+0x894>
   8138e:	2000      	movs	r0, #0
   81390:	f04f 0300 	mov.w	r3, #0
   81394:	f104 0801 	add.w	r8, r4, #1
   81398:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8139c:	7862      	ldrb	r2, [r4, #1]
   8139e:	4606      	mov	r6, r0
   813a0:	4605      	mov	r5, r0
   813a2:	4603      	mov	r3, r0
   813a4:	f04f 34ff 	mov.w	r4, #4294967295
   813a8:	f108 0801 	add.w	r8, r8, #1
   813ac:	f1a2 0120 	sub.w	r1, r2, #32
   813b0:	2958      	cmp	r1, #88	; 0x58
   813b2:	f200 82d9 	bhi.w	81968 <_vfiprintf_r+0x6a4>
   813b6:	e8df f011 	tbh	[pc, r1, lsl #1]
   813ba:	0228      	.short	0x0228
   813bc:	02d702d7 	.word	0x02d702d7
   813c0:	02d70230 	.word	0x02d70230
   813c4:	02d702d7 	.word	0x02d702d7
   813c8:	02d702d7 	.word	0x02d702d7
   813cc:	00a002d7 	.word	0x00a002d7
   813d0:	02d70288 	.word	0x02d70288
   813d4:	02b800a8 	.word	0x02b800a8
   813d8:	01a602d7 	.word	0x01a602d7
   813dc:	01ab01ab 	.word	0x01ab01ab
   813e0:	01ab01ab 	.word	0x01ab01ab
   813e4:	01ab01ab 	.word	0x01ab01ab
   813e8:	01ab01ab 	.word	0x01ab01ab
   813ec:	02d701ab 	.word	0x02d701ab
   813f0:	02d702d7 	.word	0x02d702d7
   813f4:	02d702d7 	.word	0x02d702d7
   813f8:	02d702d7 	.word	0x02d702d7
   813fc:	02d702d7 	.word	0x02d702d7
   81400:	01b902d7 	.word	0x01b902d7
   81404:	02d702d7 	.word	0x02d702d7
   81408:	02d702d7 	.word	0x02d702d7
   8140c:	02d702d7 	.word	0x02d702d7
   81410:	02d702d7 	.word	0x02d702d7
   81414:	02d702d7 	.word	0x02d702d7
   81418:	02d7019e 	.word	0x02d7019e
   8141c:	02d702d7 	.word	0x02d702d7
   81420:	02d702d7 	.word	0x02d702d7
   81424:	02d701a2 	.word	0x02d701a2
   81428:	025a02d7 	.word	0x025a02d7
   8142c:	02d702d7 	.word	0x02d702d7
   81430:	02d702d7 	.word	0x02d702d7
   81434:	02d702d7 	.word	0x02d702d7
   81438:	02d702d7 	.word	0x02d702d7
   8143c:	02d702d7 	.word	0x02d702d7
   81440:	02220261 	.word	0x02220261
   81444:	02d702d7 	.word	0x02d702d7
   81448:	027602d7 	.word	0x027602d7
   8144c:	02d70222 	.word	0x02d70222
   81450:	027b02d7 	.word	0x027b02d7
   81454:	01fc02d7 	.word	0x01fc02d7
   81458:	02100189 	.word	0x02100189
   8145c:	02d702d2 	.word	0x02d702d2
   81460:	02d70295 	.word	0x02d70295
   81464:	02d700ad 	.word	0x02d700ad
   81468:	023502d7 	.word	0x023502d7
   8146c:	f109 0908 	add.w	r9, r9, #8
   81470:	9b03      	ldr	r3, [sp, #12]
   81472:	442b      	add	r3, r5
   81474:	9303      	str	r3, [sp, #12]
   81476:	e786      	b.n	81386 <_vfiprintf_r+0xc2>
   81478:	4659      	mov	r1, fp
   8147a:	9806      	ldr	r0, [sp, #24]
   8147c:	f000 fdaa 	bl	81fd4 <__swsetup_r>
   81480:	bb18      	cbnz	r0, 814ca <_vfiprintf_r+0x206>
   81482:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81486:	f001 031a 	and.w	r3, r1, #26
   8148a:	2b0a      	cmp	r3, #10
   8148c:	f47f af4b 	bne.w	81326 <_vfiprintf_r+0x62>
   81490:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81494:	2b00      	cmp	r3, #0
   81496:	f6ff af46 	blt.w	81326 <_vfiprintf_r+0x62>
   8149a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8149e:	07db      	lsls	r3, r3, #31
   814a0:	d405      	bmi.n	814ae <_vfiprintf_r+0x1ea>
   814a2:	058f      	lsls	r7, r1, #22
   814a4:	d403      	bmi.n	814ae <_vfiprintf_r+0x1ea>
   814a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   814aa:	f001 fabd 	bl	82a28 <__retarget_lock_release_recursive>
   814ae:	462b      	mov	r3, r5
   814b0:	4642      	mov	r2, r8
   814b2:	4659      	mov	r1, fp
   814b4:	9806      	ldr	r0, [sp, #24]
   814b6:	f000 fd49 	bl	81f4c <__sbprintf>
   814ba:	9003      	str	r0, [sp, #12]
   814bc:	9803      	ldr	r0, [sp, #12]
   814be:	b02d      	add	sp, #180	; 0xb4
   814c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814c4:	f000 feee 	bl	822a4 <__sinit>
   814c8:	e709      	b.n	812de <_vfiprintf_r+0x1a>
   814ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   814ce:	07d9      	lsls	r1, r3, #31
   814d0:	d404      	bmi.n	814dc <_vfiprintf_r+0x218>
   814d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   814d6:	059a      	lsls	r2, r3, #22
   814d8:	f140 84ae 	bpl.w	81e38 <_vfiprintf_r+0xb74>
   814dc:	f04f 33ff 	mov.w	r3, #4294967295
   814e0:	9303      	str	r3, [sp, #12]
   814e2:	9803      	ldr	r0, [sp, #12]
   814e4:	b02d      	add	sp, #180	; 0xb4
   814e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   814ee:	f001 fa99 	bl	82a24 <__retarget_lock_acquire_recursive>
   814f2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   814f6:	b281      	uxth	r1, r0
   814f8:	e6fb      	b.n	812f2 <_vfiprintf_r+0x2e>
   814fa:	9907      	ldr	r1, [sp, #28]
   814fc:	460a      	mov	r2, r1
   814fe:	680d      	ldr	r5, [r1, #0]
   81500:	3204      	adds	r2, #4
   81502:	2d00      	cmp	r5, #0
   81504:	9207      	str	r2, [sp, #28]
   81506:	da02      	bge.n	8150e <_vfiprintf_r+0x24a>
   81508:	426d      	negs	r5, r5
   8150a:	f043 0304 	orr.w	r3, r3, #4
   8150e:	f898 2000 	ldrb.w	r2, [r8]
   81512:	e749      	b.n	813a8 <_vfiprintf_r+0xe4>
   81514:	9508      	str	r5, [sp, #32]
   81516:	069e      	lsls	r6, r3, #26
   81518:	f100 845a 	bmi.w	81dd0 <_vfiprintf_r+0xb0c>
   8151c:	9907      	ldr	r1, [sp, #28]
   8151e:	06dd      	lsls	r5, r3, #27
   81520:	460a      	mov	r2, r1
   81522:	f100 83ef 	bmi.w	81d04 <_vfiprintf_r+0xa40>
   81526:	0658      	lsls	r0, r3, #25
   81528:	f140 83ec 	bpl.w	81d04 <_vfiprintf_r+0xa40>
   8152c:	2700      	movs	r7, #0
   8152e:	2201      	movs	r2, #1
   81530:	880e      	ldrh	r6, [r1, #0]
   81532:	3104      	adds	r1, #4
   81534:	9107      	str	r1, [sp, #28]
   81536:	f04f 0100 	mov.w	r1, #0
   8153a:	2500      	movs	r5, #0
   8153c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81540:	1c61      	adds	r1, r4, #1
   81542:	f000 8117 	beq.w	81774 <_vfiprintf_r+0x4b0>
   81546:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8154a:	9102      	str	r1, [sp, #8]
   8154c:	ea56 0107 	orrs.w	r1, r6, r7
   81550:	f040 8115 	bne.w	8177e <_vfiprintf_r+0x4ba>
   81554:	2c00      	cmp	r4, #0
   81556:	f040 835b 	bne.w	81c10 <_vfiprintf_r+0x94c>
   8155a:	2a00      	cmp	r2, #0
   8155c:	f040 83b6 	bne.w	81ccc <_vfiprintf_r+0xa08>
   81560:	f013 0301 	ands.w	r3, r3, #1
   81564:	9305      	str	r3, [sp, #20]
   81566:	f000 8455 	beq.w	81e14 <_vfiprintf_r+0xb50>
   8156a:	2330      	movs	r3, #48	; 0x30
   8156c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81570:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81574:	9b05      	ldr	r3, [sp, #20]
   81576:	42a3      	cmp	r3, r4
   81578:	bfb8      	it	lt
   8157a:	4623      	movlt	r3, r4
   8157c:	9301      	str	r3, [sp, #4]
   8157e:	b10d      	cbz	r5, 81584 <_vfiprintf_r+0x2c0>
   81580:	3301      	adds	r3, #1
   81582:	9301      	str	r3, [sp, #4]
   81584:	9b02      	ldr	r3, [sp, #8]
   81586:	f013 0302 	ands.w	r3, r3, #2
   8158a:	9309      	str	r3, [sp, #36]	; 0x24
   8158c:	d002      	beq.n	81594 <_vfiprintf_r+0x2d0>
   8158e:	9b01      	ldr	r3, [sp, #4]
   81590:	3302      	adds	r3, #2
   81592:	9301      	str	r3, [sp, #4]
   81594:	9b02      	ldr	r3, [sp, #8]
   81596:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8159a:	930a      	str	r3, [sp, #40]	; 0x28
   8159c:	f040 8215 	bne.w	819ca <_vfiprintf_r+0x706>
   815a0:	9b08      	ldr	r3, [sp, #32]
   815a2:	9a01      	ldr	r2, [sp, #4]
   815a4:	1a9d      	subs	r5, r3, r2
   815a6:	2d00      	cmp	r5, #0
   815a8:	f340 820f 	ble.w	819ca <_vfiprintf_r+0x706>
   815ac:	2d10      	cmp	r5, #16
   815ae:	f340 8484 	ble.w	81eba <_vfiprintf_r+0xbf6>
   815b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   815b4:	46ce      	mov	lr, r9
   815b6:	2710      	movs	r7, #16
   815b8:	46a1      	mov	r9, r4
   815ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   815bc:	4ec5      	ldr	r6, [pc, #788]	; (818d4 <_vfiprintf_r+0x610>)
   815be:	4619      	mov	r1, r3
   815c0:	9c06      	ldr	r4, [sp, #24]
   815c2:	e007      	b.n	815d4 <_vfiprintf_r+0x310>
   815c4:	f101 0c02 	add.w	ip, r1, #2
   815c8:	4601      	mov	r1, r0
   815ca:	f10e 0e08 	add.w	lr, lr, #8
   815ce:	3d10      	subs	r5, #16
   815d0:	2d10      	cmp	r5, #16
   815d2:	dd11      	ble.n	815f8 <_vfiprintf_r+0x334>
   815d4:	1c48      	adds	r0, r1, #1
   815d6:	3210      	adds	r2, #16
   815d8:	2807      	cmp	r0, #7
   815da:	9211      	str	r2, [sp, #68]	; 0x44
   815dc:	e88e 00c0 	stmia.w	lr, {r6, r7}
   815e0:	9010      	str	r0, [sp, #64]	; 0x40
   815e2:	ddef      	ble.n	815c4 <_vfiprintf_r+0x300>
   815e4:	2a00      	cmp	r2, #0
   815e6:	f040 81d9 	bne.w	8199c <_vfiprintf_r+0x6d8>
   815ea:	3d10      	subs	r5, #16
   815ec:	2d10      	cmp	r5, #16
   815ee:	4611      	mov	r1, r2
   815f0:	f04f 0c01 	mov.w	ip, #1
   815f4:	46d6      	mov	lr, sl
   815f6:	dced      	bgt.n	815d4 <_vfiprintf_r+0x310>
   815f8:	464c      	mov	r4, r9
   815fa:	4661      	mov	r1, ip
   815fc:	46f1      	mov	r9, lr
   815fe:	442a      	add	r2, r5
   81600:	2907      	cmp	r1, #7
   81602:	9211      	str	r2, [sp, #68]	; 0x44
   81604:	f8c9 6000 	str.w	r6, [r9]
   81608:	f8c9 5004 	str.w	r5, [r9, #4]
   8160c:	9110      	str	r1, [sp, #64]	; 0x40
   8160e:	f300 82eb 	bgt.w	81be8 <_vfiprintf_r+0x924>
   81612:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81616:	f109 0908 	add.w	r9, r9, #8
   8161a:	1c48      	adds	r0, r1, #1
   8161c:	2d00      	cmp	r5, #0
   8161e:	f040 81dc 	bne.w	819da <_vfiprintf_r+0x716>
   81622:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81624:	2b00      	cmp	r3, #0
   81626:	f000 81f6 	beq.w	81a16 <_vfiprintf_r+0x752>
   8162a:	2102      	movs	r1, #2
   8162c:	ab0e      	add	r3, sp, #56	; 0x38
   8162e:	440a      	add	r2, r1
   81630:	2807      	cmp	r0, #7
   81632:	9211      	str	r2, [sp, #68]	; 0x44
   81634:	9010      	str	r0, [sp, #64]	; 0x40
   81636:	f8c9 1004 	str.w	r1, [r9, #4]
   8163a:	f8c9 3000 	str.w	r3, [r9]
   8163e:	f340 81e6 	ble.w	81a0e <_vfiprintf_r+0x74a>
   81642:	2a00      	cmp	r2, #0
   81644:	f040 8395 	bne.w	81d72 <_vfiprintf_r+0xaae>
   81648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8164a:	2001      	movs	r0, #1
   8164c:	2b80      	cmp	r3, #128	; 0x80
   8164e:	4611      	mov	r1, r2
   81650:	46d1      	mov	r9, sl
   81652:	f040 81e4 	bne.w	81a1e <_vfiprintf_r+0x75a>
   81656:	9b08      	ldr	r3, [sp, #32]
   81658:	9d01      	ldr	r5, [sp, #4]
   8165a:	1b5e      	subs	r6, r3, r5
   8165c:	2e00      	cmp	r6, #0
   8165e:	f340 81de 	ble.w	81a1e <_vfiprintf_r+0x75a>
   81662:	2e10      	cmp	r6, #16
   81664:	f340 843c 	ble.w	81ee0 <_vfiprintf_r+0xc1c>
   81668:	46cc      	mov	ip, r9
   8166a:	2710      	movs	r7, #16
   8166c:	46a1      	mov	r9, r4
   8166e:	4d9a      	ldr	r5, [pc, #616]	; (818d8 <_vfiprintf_r+0x614>)
   81670:	9c06      	ldr	r4, [sp, #24]
   81672:	e007      	b.n	81684 <_vfiprintf_r+0x3c0>
   81674:	f101 0e02 	add.w	lr, r1, #2
   81678:	4601      	mov	r1, r0
   8167a:	f10c 0c08 	add.w	ip, ip, #8
   8167e:	3e10      	subs	r6, #16
   81680:	2e10      	cmp	r6, #16
   81682:	dd11      	ble.n	816a8 <_vfiprintf_r+0x3e4>
   81684:	1c48      	adds	r0, r1, #1
   81686:	3210      	adds	r2, #16
   81688:	2807      	cmp	r0, #7
   8168a:	9211      	str	r2, [sp, #68]	; 0x44
   8168c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81690:	9010      	str	r0, [sp, #64]	; 0x40
   81692:	ddef      	ble.n	81674 <_vfiprintf_r+0x3b0>
   81694:	2a00      	cmp	r2, #0
   81696:	f040 829b 	bne.w	81bd0 <_vfiprintf_r+0x90c>
   8169a:	3e10      	subs	r6, #16
   8169c:	2e10      	cmp	r6, #16
   8169e:	f04f 0e01 	mov.w	lr, #1
   816a2:	4611      	mov	r1, r2
   816a4:	46d4      	mov	ip, sl
   816a6:	dced      	bgt.n	81684 <_vfiprintf_r+0x3c0>
   816a8:	464c      	mov	r4, r9
   816aa:	46e1      	mov	r9, ip
   816ac:	4432      	add	r2, r6
   816ae:	f1be 0f07 	cmp.w	lr, #7
   816b2:	9211      	str	r2, [sp, #68]	; 0x44
   816b4:	e889 0060 	stmia.w	r9, {r5, r6}
   816b8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   816bc:	f300 8366 	bgt.w	81d8c <_vfiprintf_r+0xac8>
   816c0:	f109 0908 	add.w	r9, r9, #8
   816c4:	f10e 0001 	add.w	r0, lr, #1
   816c8:	4671      	mov	r1, lr
   816ca:	e1a8      	b.n	81a1e <_vfiprintf_r+0x75a>
   816cc:	9508      	str	r5, [sp, #32]
   816ce:	f013 0220 	ands.w	r2, r3, #32
   816d2:	f040 8389 	bne.w	81de8 <_vfiprintf_r+0xb24>
   816d6:	f013 0110 	ands.w	r1, r3, #16
   816da:	f040 8319 	bne.w	81d10 <_vfiprintf_r+0xa4c>
   816de:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   816e2:	f000 8315 	beq.w	81d10 <_vfiprintf_r+0xa4c>
   816e6:	9807      	ldr	r0, [sp, #28]
   816e8:	460a      	mov	r2, r1
   816ea:	4601      	mov	r1, r0
   816ec:	3104      	adds	r1, #4
   816ee:	8806      	ldrh	r6, [r0, #0]
   816f0:	2700      	movs	r7, #0
   816f2:	9107      	str	r1, [sp, #28]
   816f4:	e71f      	b.n	81536 <_vfiprintf_r+0x272>
   816f6:	9508      	str	r5, [sp, #32]
   816f8:	f043 0310 	orr.w	r3, r3, #16
   816fc:	e7e7      	b.n	816ce <_vfiprintf_r+0x40a>
   816fe:	9508      	str	r5, [sp, #32]
   81700:	f043 0310 	orr.w	r3, r3, #16
   81704:	e707      	b.n	81516 <_vfiprintf_r+0x252>
   81706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8170a:	f898 2000 	ldrb.w	r2, [r8]
   8170e:	e64b      	b.n	813a8 <_vfiprintf_r+0xe4>
   81710:	2500      	movs	r5, #0
   81712:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81716:	f818 2b01 	ldrb.w	r2, [r8], #1
   8171a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8171e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81722:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81726:	2909      	cmp	r1, #9
   81728:	d9f5      	bls.n	81716 <_vfiprintf_r+0x452>
   8172a:	e63f      	b.n	813ac <_vfiprintf_r+0xe8>
   8172c:	9508      	str	r5, [sp, #32]
   8172e:	2800      	cmp	r0, #0
   81730:	f040 8402 	bne.w	81f38 <_vfiprintf_r+0xc74>
   81734:	f043 0310 	orr.w	r3, r3, #16
   81738:	069e      	lsls	r6, r3, #26
   8173a:	f100 833d 	bmi.w	81db8 <_vfiprintf_r+0xaf4>
   8173e:	9907      	ldr	r1, [sp, #28]
   81740:	06dd      	lsls	r5, r3, #27
   81742:	460a      	mov	r2, r1
   81744:	f100 82f0 	bmi.w	81d28 <_vfiprintf_r+0xa64>
   81748:	0658      	lsls	r0, r3, #25
   8174a:	f140 82ed 	bpl.w	81d28 <_vfiprintf_r+0xa64>
   8174e:	f9b1 6000 	ldrsh.w	r6, [r1]
   81752:	3204      	adds	r2, #4
   81754:	17f7      	asrs	r7, r6, #31
   81756:	4630      	mov	r0, r6
   81758:	4639      	mov	r1, r7
   8175a:	9207      	str	r2, [sp, #28]
   8175c:	2800      	cmp	r0, #0
   8175e:	f171 0200 	sbcs.w	r2, r1, #0
   81762:	f2c0 835a 	blt.w	81e1a <_vfiprintf_r+0xb56>
   81766:	1c61      	adds	r1, r4, #1
   81768:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8176c:	f04f 0201 	mov.w	r2, #1
   81770:	f47f aee9 	bne.w	81546 <_vfiprintf_r+0x282>
   81774:	ea56 0107 	orrs.w	r1, r6, r7
   81778:	f000 824b 	beq.w	81c12 <_vfiprintf_r+0x94e>
   8177c:	9302      	str	r3, [sp, #8]
   8177e:	2a01      	cmp	r2, #1
   81780:	f000 828a 	beq.w	81c98 <_vfiprintf_r+0x9d4>
   81784:	2a02      	cmp	r2, #2
   81786:	f040 825a 	bne.w	81c3e <_vfiprintf_r+0x97a>
   8178a:	46d3      	mov	fp, sl
   8178c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8178e:	0933      	lsrs	r3, r6, #4
   81790:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81794:	0939      	lsrs	r1, r7, #4
   81796:	f006 020f 	and.w	r2, r6, #15
   8179a:	460f      	mov	r7, r1
   8179c:	461e      	mov	r6, r3
   8179e:	5c83      	ldrb	r3, [r0, r2]
   817a0:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   817a4:	ea56 0307 	orrs.w	r3, r6, r7
   817a8:	d1f1      	bne.n	8178e <_vfiprintf_r+0x4ca>
   817aa:	ebaa 030b 	sub.w	r3, sl, fp
   817ae:	9305      	str	r3, [sp, #20]
   817b0:	e6e0      	b.n	81574 <_vfiprintf_r+0x2b0>
   817b2:	2800      	cmp	r0, #0
   817b4:	f040 83bd 	bne.w	81f32 <_vfiprintf_r+0xc6e>
   817b8:	0699      	lsls	r1, r3, #26
   817ba:	f100 8359 	bmi.w	81e70 <_vfiprintf_r+0xbac>
   817be:	06da      	lsls	r2, r3, #27
   817c0:	f100 80e5 	bmi.w	8198e <_vfiprintf_r+0x6ca>
   817c4:	065b      	lsls	r3, r3, #25
   817c6:	f140 80e2 	bpl.w	8198e <_vfiprintf_r+0x6ca>
   817ca:	9a07      	ldr	r2, [sp, #28]
   817cc:	6813      	ldr	r3, [r2, #0]
   817ce:	3204      	adds	r2, #4
   817d0:	9207      	str	r2, [sp, #28]
   817d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   817d6:	801a      	strh	r2, [r3, #0]
   817d8:	e5b1      	b.n	8133e <_vfiprintf_r+0x7a>
   817da:	2278      	movs	r2, #120	; 0x78
   817dc:	2130      	movs	r1, #48	; 0x30
   817de:	9508      	str	r5, [sp, #32]
   817e0:	9d07      	ldr	r5, [sp, #28]
   817e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   817e6:	1d2a      	adds	r2, r5, #4
   817e8:	9207      	str	r2, [sp, #28]
   817ea:	4a3c      	ldr	r2, [pc, #240]	; (818dc <_vfiprintf_r+0x618>)
   817ec:	682e      	ldr	r6, [r5, #0]
   817ee:	920b      	str	r2, [sp, #44]	; 0x2c
   817f0:	f043 0302 	orr.w	r3, r3, #2
   817f4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   817f8:	2700      	movs	r7, #0
   817fa:	2202      	movs	r2, #2
   817fc:	e69b      	b.n	81536 <_vfiprintf_r+0x272>
   817fe:	9508      	str	r5, [sp, #32]
   81800:	2800      	cmp	r0, #0
   81802:	d099      	beq.n	81738 <_vfiprintf_r+0x474>
   81804:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81808:	e796      	b.n	81738 <_vfiprintf_r+0x474>
   8180a:	f898 2000 	ldrb.w	r2, [r8]
   8180e:	2e00      	cmp	r6, #0
   81810:	f47f adca 	bne.w	813a8 <_vfiprintf_r+0xe4>
   81814:	2001      	movs	r0, #1
   81816:	2620      	movs	r6, #32
   81818:	e5c6      	b.n	813a8 <_vfiprintf_r+0xe4>
   8181a:	f043 0301 	orr.w	r3, r3, #1
   8181e:	f898 2000 	ldrb.w	r2, [r8]
   81822:	e5c1      	b.n	813a8 <_vfiprintf_r+0xe4>
   81824:	9508      	str	r5, [sp, #32]
   81826:	2800      	cmp	r0, #0
   81828:	f040 8380 	bne.w	81f2c <_vfiprintf_r+0xc68>
   8182c:	492b      	ldr	r1, [pc, #172]	; (818dc <_vfiprintf_r+0x618>)
   8182e:	910b      	str	r1, [sp, #44]	; 0x2c
   81830:	069f      	lsls	r7, r3, #26
   81832:	f100 82e5 	bmi.w	81e00 <_vfiprintf_r+0xb3c>
   81836:	9807      	ldr	r0, [sp, #28]
   81838:	06de      	lsls	r6, r3, #27
   8183a:	4601      	mov	r1, r0
   8183c:	f100 826f 	bmi.w	81d1e <_vfiprintf_r+0xa5a>
   81840:	065d      	lsls	r5, r3, #25
   81842:	f140 826c 	bpl.w	81d1e <_vfiprintf_r+0xa5a>
   81846:	2700      	movs	r7, #0
   81848:	3104      	adds	r1, #4
   8184a:	8806      	ldrh	r6, [r0, #0]
   8184c:	9107      	str	r1, [sp, #28]
   8184e:	07d8      	lsls	r0, r3, #31
   81850:	f140 8220 	bpl.w	81c94 <_vfiprintf_r+0x9d0>
   81854:	ea56 0107 	orrs.w	r1, r6, r7
   81858:	f000 821c 	beq.w	81c94 <_vfiprintf_r+0x9d0>
   8185c:	2130      	movs	r1, #48	; 0x30
   8185e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81862:	f043 0302 	orr.w	r3, r3, #2
   81866:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8186a:	2202      	movs	r2, #2
   8186c:	e663      	b.n	81536 <_vfiprintf_r+0x272>
   8186e:	9508      	str	r5, [sp, #32]
   81870:	2800      	cmp	r0, #0
   81872:	f040 8355 	bne.w	81f20 <_vfiprintf_r+0xc5c>
   81876:	491a      	ldr	r1, [pc, #104]	; (818e0 <_vfiprintf_r+0x61c>)
   81878:	910b      	str	r1, [sp, #44]	; 0x2c
   8187a:	e7d9      	b.n	81830 <_vfiprintf_r+0x56c>
   8187c:	2201      	movs	r2, #1
   8187e:	9807      	ldr	r0, [sp, #28]
   81880:	4611      	mov	r1, r2
   81882:	9201      	str	r2, [sp, #4]
   81884:	6802      	ldr	r2, [r0, #0]
   81886:	f04f 0400 	mov.w	r4, #0
   8188a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8188e:	4602      	mov	r2, r0
   81890:	3204      	adds	r2, #4
   81892:	9508      	str	r5, [sp, #32]
   81894:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81898:	9105      	str	r1, [sp, #20]
   8189a:	9207      	str	r2, [sp, #28]
   8189c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   818a0:	9302      	str	r3, [sp, #8]
   818a2:	2400      	movs	r4, #0
   818a4:	e66e      	b.n	81584 <_vfiprintf_r+0x2c0>
   818a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   818aa:	f898 2000 	ldrb.w	r2, [r8]
   818ae:	e57b      	b.n	813a8 <_vfiprintf_r+0xe4>
   818b0:	f898 2000 	ldrb.w	r2, [r8]
   818b4:	2a6c      	cmp	r2, #108	; 0x6c
   818b6:	bf03      	ittte	eq
   818b8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   818bc:	f043 0320 	orreq.w	r3, r3, #32
   818c0:	f108 0801 	addeq.w	r8, r8, #1
   818c4:	f043 0310 	orrne.w	r3, r3, #16
   818c8:	e56e      	b.n	813a8 <_vfiprintf_r+0xe4>
   818ca:	f898 2000 	ldrb.w	r2, [r8]
   818ce:	2001      	movs	r0, #1
   818d0:	262b      	movs	r6, #43	; 0x2b
   818d2:	e569      	b.n	813a8 <_vfiprintf_r+0xe4>
   818d4:	00083e98 	.word	0x00083e98
   818d8:	00083ea8 	.word	0x00083ea8
   818dc:	00083e7c 	.word	0x00083e7c
   818e0:	00083e68 	.word	0x00083e68
   818e4:	f04f 0200 	mov.w	r2, #0
   818e8:	9907      	ldr	r1, [sp, #28]
   818ea:	9508      	str	r5, [sp, #32]
   818ec:	f8d1 b000 	ldr.w	fp, [r1]
   818f0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   818f4:	1d0d      	adds	r5, r1, #4
   818f6:	f1bb 0f00 	cmp.w	fp, #0
   818fa:	f000 82e4 	beq.w	81ec6 <_vfiprintf_r+0xc02>
   818fe:	1c67      	adds	r7, r4, #1
   81900:	f000 82c3 	beq.w	81e8a <_vfiprintf_r+0xbc6>
   81904:	4622      	mov	r2, r4
   81906:	2100      	movs	r1, #0
   81908:	4658      	mov	r0, fp
   8190a:	9301      	str	r3, [sp, #4]
   8190c:	f001 fbc6 	bl	8309c <memchr>
   81910:	9b01      	ldr	r3, [sp, #4]
   81912:	2800      	cmp	r0, #0
   81914:	f000 82e8 	beq.w	81ee8 <_vfiprintf_r+0xc24>
   81918:	eba0 020b 	sub.w	r2, r0, fp
   8191c:	9507      	str	r5, [sp, #28]
   8191e:	9205      	str	r2, [sp, #20]
   81920:	9302      	str	r3, [sp, #8]
   81922:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81926:	2400      	movs	r4, #0
   81928:	e624      	b.n	81574 <_vfiprintf_r+0x2b0>
   8192a:	f898 2000 	ldrb.w	r2, [r8]
   8192e:	f108 0701 	add.w	r7, r8, #1
   81932:	2a2a      	cmp	r2, #42	; 0x2a
   81934:	f000 82e9 	beq.w	81f0a <_vfiprintf_r+0xc46>
   81938:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8193c:	2909      	cmp	r1, #9
   8193e:	46b8      	mov	r8, r7
   81940:	f04f 0400 	mov.w	r4, #0
   81944:	f63f ad32 	bhi.w	813ac <_vfiprintf_r+0xe8>
   81948:	f818 2b01 	ldrb.w	r2, [r8], #1
   8194c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81950:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81954:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81958:	2909      	cmp	r1, #9
   8195a:	d9f5      	bls.n	81948 <_vfiprintf_r+0x684>
   8195c:	e526      	b.n	813ac <_vfiprintf_r+0xe8>
   8195e:	f043 0320 	orr.w	r3, r3, #32
   81962:	f898 2000 	ldrb.w	r2, [r8]
   81966:	e51f      	b.n	813a8 <_vfiprintf_r+0xe4>
   81968:	9508      	str	r5, [sp, #32]
   8196a:	2800      	cmp	r0, #0
   8196c:	f040 82db 	bne.w	81f26 <_vfiprintf_r+0xc62>
   81970:	2a00      	cmp	r2, #0
   81972:	f000 80f1 	beq.w	81b58 <_vfiprintf_r+0x894>
   81976:	2101      	movs	r1, #1
   81978:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8197c:	f04f 0200 	mov.w	r2, #0
   81980:	9101      	str	r1, [sp, #4]
   81982:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81986:	9105      	str	r1, [sp, #20]
   81988:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   8198c:	e788      	b.n	818a0 <_vfiprintf_r+0x5dc>
   8198e:	9a07      	ldr	r2, [sp, #28]
   81990:	6813      	ldr	r3, [r2, #0]
   81992:	3204      	adds	r2, #4
   81994:	9207      	str	r2, [sp, #28]
   81996:	9a03      	ldr	r2, [sp, #12]
   81998:	601a      	str	r2, [r3, #0]
   8199a:	e4d0      	b.n	8133e <_vfiprintf_r+0x7a>
   8199c:	aa0f      	add	r2, sp, #60	; 0x3c
   8199e:	9904      	ldr	r1, [sp, #16]
   819a0:	4620      	mov	r0, r4
   819a2:	f7ff fc4f 	bl	81244 <__sprint_r.part.0>
   819a6:	2800      	cmp	r0, #0
   819a8:	f040 8143 	bne.w	81c32 <_vfiprintf_r+0x96e>
   819ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   819ae:	46d6      	mov	lr, sl
   819b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   819b2:	f101 0c01 	add.w	ip, r1, #1
   819b6:	e60a      	b.n	815ce <_vfiprintf_r+0x30a>
   819b8:	aa0f      	add	r2, sp, #60	; 0x3c
   819ba:	9904      	ldr	r1, [sp, #16]
   819bc:	9806      	ldr	r0, [sp, #24]
   819be:	f7ff fc41 	bl	81244 <__sprint_r.part.0>
   819c2:	2800      	cmp	r0, #0
   819c4:	f040 8135 	bne.w	81c32 <_vfiprintf_r+0x96e>
   819c8:	46d1      	mov	r9, sl
   819ca:	9910      	ldr	r1, [sp, #64]	; 0x40
   819cc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   819d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   819d2:	1c48      	adds	r0, r1, #1
   819d4:	2d00      	cmp	r5, #0
   819d6:	f43f ae24 	beq.w	81622 <_vfiprintf_r+0x35e>
   819da:	2101      	movs	r1, #1
   819dc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   819e0:	440a      	add	r2, r1
   819e2:	2807      	cmp	r0, #7
   819e4:	9211      	str	r2, [sp, #68]	; 0x44
   819e6:	9010      	str	r0, [sp, #64]	; 0x40
   819e8:	f8c9 1004 	str.w	r1, [r9, #4]
   819ec:	f8c9 5000 	str.w	r5, [r9]
   819f0:	f340 8109 	ble.w	81c06 <_vfiprintf_r+0x942>
   819f4:	2a00      	cmp	r2, #0
   819f6:	f040 81af 	bne.w	81d58 <_vfiprintf_r+0xa94>
   819fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   819fc:	2b00      	cmp	r3, #0
   819fe:	f43f ae23 	beq.w	81648 <_vfiprintf_r+0x384>
   81a02:	2202      	movs	r2, #2
   81a04:	4608      	mov	r0, r1
   81a06:	46d1      	mov	r9, sl
   81a08:	ab0e      	add	r3, sp, #56	; 0x38
   81a0a:	921d      	str	r2, [sp, #116]	; 0x74
   81a0c:	931c      	str	r3, [sp, #112]	; 0x70
   81a0e:	4601      	mov	r1, r0
   81a10:	f109 0908 	add.w	r9, r9, #8
   81a14:	3001      	adds	r0, #1
   81a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81a18:	2b80      	cmp	r3, #128	; 0x80
   81a1a:	f43f ae1c 	beq.w	81656 <_vfiprintf_r+0x392>
   81a1e:	9b05      	ldr	r3, [sp, #20]
   81a20:	1ae4      	subs	r4, r4, r3
   81a22:	2c00      	cmp	r4, #0
   81a24:	dd2f      	ble.n	81a86 <_vfiprintf_r+0x7c2>
   81a26:	2c10      	cmp	r4, #16
   81a28:	f340 8220 	ble.w	81e6c <_vfiprintf_r+0xba8>
   81a2c:	46ce      	mov	lr, r9
   81a2e:	2610      	movs	r6, #16
   81a30:	4db2      	ldr	r5, [pc, #712]	; (81cfc <_vfiprintf_r+0xa38>)
   81a32:	9f06      	ldr	r7, [sp, #24]
   81a34:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81a38:	e006      	b.n	81a48 <_vfiprintf_r+0x784>
   81a3a:	1c88      	adds	r0, r1, #2
   81a3c:	4619      	mov	r1, r3
   81a3e:	f10e 0e08 	add.w	lr, lr, #8
   81a42:	3c10      	subs	r4, #16
   81a44:	2c10      	cmp	r4, #16
   81a46:	dd10      	ble.n	81a6a <_vfiprintf_r+0x7a6>
   81a48:	1c4b      	adds	r3, r1, #1
   81a4a:	3210      	adds	r2, #16
   81a4c:	2b07      	cmp	r3, #7
   81a4e:	9211      	str	r2, [sp, #68]	; 0x44
   81a50:	e88e 0060 	stmia.w	lr, {r5, r6}
   81a54:	9310      	str	r3, [sp, #64]	; 0x40
   81a56:	ddf0      	ble.n	81a3a <_vfiprintf_r+0x776>
   81a58:	2a00      	cmp	r2, #0
   81a5a:	d165      	bne.n	81b28 <_vfiprintf_r+0x864>
   81a5c:	3c10      	subs	r4, #16
   81a5e:	2c10      	cmp	r4, #16
   81a60:	f04f 0001 	mov.w	r0, #1
   81a64:	4611      	mov	r1, r2
   81a66:	46d6      	mov	lr, sl
   81a68:	dcee      	bgt.n	81a48 <_vfiprintf_r+0x784>
   81a6a:	46f1      	mov	r9, lr
   81a6c:	4422      	add	r2, r4
   81a6e:	2807      	cmp	r0, #7
   81a70:	9211      	str	r2, [sp, #68]	; 0x44
   81a72:	f8c9 5000 	str.w	r5, [r9]
   81a76:	f8c9 4004 	str.w	r4, [r9, #4]
   81a7a:	9010      	str	r0, [sp, #64]	; 0x40
   81a7c:	f300 8085 	bgt.w	81b8a <_vfiprintf_r+0x8c6>
   81a80:	f109 0908 	add.w	r9, r9, #8
   81a84:	3001      	adds	r0, #1
   81a86:	9905      	ldr	r1, [sp, #20]
   81a88:	2807      	cmp	r0, #7
   81a8a:	440a      	add	r2, r1
   81a8c:	9211      	str	r2, [sp, #68]	; 0x44
   81a8e:	f8c9 b000 	str.w	fp, [r9]
   81a92:	f8c9 1004 	str.w	r1, [r9, #4]
   81a96:	9010      	str	r0, [sp, #64]	; 0x40
   81a98:	f340 8082 	ble.w	81ba0 <_vfiprintf_r+0x8dc>
   81a9c:	2a00      	cmp	r2, #0
   81a9e:	f040 8118 	bne.w	81cd2 <_vfiprintf_r+0xa0e>
   81aa2:	9b02      	ldr	r3, [sp, #8]
   81aa4:	9210      	str	r2, [sp, #64]	; 0x40
   81aa6:	0758      	lsls	r0, r3, #29
   81aa8:	d535      	bpl.n	81b16 <_vfiprintf_r+0x852>
   81aaa:	9b08      	ldr	r3, [sp, #32]
   81aac:	9901      	ldr	r1, [sp, #4]
   81aae:	1a5c      	subs	r4, r3, r1
   81ab0:	2c00      	cmp	r4, #0
   81ab2:	f340 80e7 	ble.w	81c84 <_vfiprintf_r+0x9c0>
   81ab6:	46d1      	mov	r9, sl
   81ab8:	2c10      	cmp	r4, #16
   81aba:	f340 820d 	ble.w	81ed8 <_vfiprintf_r+0xc14>
   81abe:	2510      	movs	r5, #16
   81ac0:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ac2:	4e8f      	ldr	r6, [pc, #572]	; (81d00 <_vfiprintf_r+0xa3c>)
   81ac4:	9f06      	ldr	r7, [sp, #24]
   81ac6:	f8dd b010 	ldr.w	fp, [sp, #16]
   81aca:	e006      	b.n	81ada <_vfiprintf_r+0x816>
   81acc:	1c88      	adds	r0, r1, #2
   81ace:	4619      	mov	r1, r3
   81ad0:	f109 0908 	add.w	r9, r9, #8
   81ad4:	3c10      	subs	r4, #16
   81ad6:	2c10      	cmp	r4, #16
   81ad8:	dd11      	ble.n	81afe <_vfiprintf_r+0x83a>
   81ada:	1c4b      	adds	r3, r1, #1
   81adc:	3210      	adds	r2, #16
   81ade:	2b07      	cmp	r3, #7
   81ae0:	9211      	str	r2, [sp, #68]	; 0x44
   81ae2:	f8c9 6000 	str.w	r6, [r9]
   81ae6:	f8c9 5004 	str.w	r5, [r9, #4]
   81aea:	9310      	str	r3, [sp, #64]	; 0x40
   81aec:	ddee      	ble.n	81acc <_vfiprintf_r+0x808>
   81aee:	bb42      	cbnz	r2, 81b42 <_vfiprintf_r+0x87e>
   81af0:	3c10      	subs	r4, #16
   81af2:	2c10      	cmp	r4, #16
   81af4:	f04f 0001 	mov.w	r0, #1
   81af8:	4611      	mov	r1, r2
   81afa:	46d1      	mov	r9, sl
   81afc:	dced      	bgt.n	81ada <_vfiprintf_r+0x816>
   81afe:	4422      	add	r2, r4
   81b00:	2807      	cmp	r0, #7
   81b02:	9211      	str	r2, [sp, #68]	; 0x44
   81b04:	f8c9 6000 	str.w	r6, [r9]
   81b08:	f8c9 4004 	str.w	r4, [r9, #4]
   81b0c:	9010      	str	r0, [sp, #64]	; 0x40
   81b0e:	dd51      	ble.n	81bb4 <_vfiprintf_r+0x8f0>
   81b10:	2a00      	cmp	r2, #0
   81b12:	f040 819a 	bne.w	81e4a <_vfiprintf_r+0xb86>
   81b16:	9b03      	ldr	r3, [sp, #12]
   81b18:	9a08      	ldr	r2, [sp, #32]
   81b1a:	9901      	ldr	r1, [sp, #4]
   81b1c:	428a      	cmp	r2, r1
   81b1e:	bfac      	ite	ge
   81b20:	189b      	addge	r3, r3, r2
   81b22:	185b      	addlt	r3, r3, r1
   81b24:	9303      	str	r3, [sp, #12]
   81b26:	e04e      	b.n	81bc6 <_vfiprintf_r+0x902>
   81b28:	aa0f      	add	r2, sp, #60	; 0x3c
   81b2a:	4649      	mov	r1, r9
   81b2c:	4638      	mov	r0, r7
   81b2e:	f7ff fb89 	bl	81244 <__sprint_r.part.0>
   81b32:	2800      	cmp	r0, #0
   81b34:	f040 813e 	bne.w	81db4 <_vfiprintf_r+0xaf0>
   81b38:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b3a:	46d6      	mov	lr, sl
   81b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b3e:	1c48      	adds	r0, r1, #1
   81b40:	e77f      	b.n	81a42 <_vfiprintf_r+0x77e>
   81b42:	aa0f      	add	r2, sp, #60	; 0x3c
   81b44:	4659      	mov	r1, fp
   81b46:	4638      	mov	r0, r7
   81b48:	f7ff fb7c 	bl	81244 <__sprint_r.part.0>
   81b4c:	b960      	cbnz	r0, 81b68 <_vfiprintf_r+0x8a4>
   81b4e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b50:	46d1      	mov	r9, sl
   81b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b54:	1c48      	adds	r0, r1, #1
   81b56:	e7bd      	b.n	81ad4 <_vfiprintf_r+0x810>
   81b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81b5a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81b5e:	2b00      	cmp	r3, #0
   81b60:	f040 81ca 	bne.w	81ef8 <_vfiprintf_r+0xc34>
   81b64:	2300      	movs	r3, #0
   81b66:	9310      	str	r3, [sp, #64]	; 0x40
   81b68:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81b6c:	f013 0f01 	tst.w	r3, #1
   81b70:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81b74:	d102      	bne.n	81b7c <_vfiprintf_r+0x8b8>
   81b76:	059a      	lsls	r2, r3, #22
   81b78:	f140 80dd 	bpl.w	81d36 <_vfiprintf_r+0xa72>
   81b7c:	065b      	lsls	r3, r3, #25
   81b7e:	f53f acad 	bmi.w	814dc <_vfiprintf_r+0x218>
   81b82:	9803      	ldr	r0, [sp, #12]
   81b84:	b02d      	add	sp, #180	; 0xb4
   81b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b8a:	2a00      	cmp	r2, #0
   81b8c:	f040 8105 	bne.w	81d9a <_vfiprintf_r+0xad6>
   81b90:	2301      	movs	r3, #1
   81b92:	46d1      	mov	r9, sl
   81b94:	9a05      	ldr	r2, [sp, #20]
   81b96:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81b9a:	921d      	str	r2, [sp, #116]	; 0x74
   81b9c:	9211      	str	r2, [sp, #68]	; 0x44
   81b9e:	9310      	str	r3, [sp, #64]	; 0x40
   81ba0:	f109 0908 	add.w	r9, r9, #8
   81ba4:	9b02      	ldr	r3, [sp, #8]
   81ba6:	0759      	lsls	r1, r3, #29
   81ba8:	d504      	bpl.n	81bb4 <_vfiprintf_r+0x8f0>
   81baa:	9b08      	ldr	r3, [sp, #32]
   81bac:	9901      	ldr	r1, [sp, #4]
   81bae:	1a5c      	subs	r4, r3, r1
   81bb0:	2c00      	cmp	r4, #0
   81bb2:	dc81      	bgt.n	81ab8 <_vfiprintf_r+0x7f4>
   81bb4:	9b03      	ldr	r3, [sp, #12]
   81bb6:	9908      	ldr	r1, [sp, #32]
   81bb8:	9801      	ldr	r0, [sp, #4]
   81bba:	4281      	cmp	r1, r0
   81bbc:	bfac      	ite	ge
   81bbe:	185b      	addge	r3, r3, r1
   81bc0:	181b      	addlt	r3, r3, r0
   81bc2:	9303      	str	r3, [sp, #12]
   81bc4:	bb72      	cbnz	r2, 81c24 <_vfiprintf_r+0x960>
   81bc6:	2300      	movs	r3, #0
   81bc8:	46d1      	mov	r9, sl
   81bca:	9310      	str	r3, [sp, #64]	; 0x40
   81bcc:	f7ff bbb7 	b.w	8133e <_vfiprintf_r+0x7a>
   81bd0:	aa0f      	add	r2, sp, #60	; 0x3c
   81bd2:	9904      	ldr	r1, [sp, #16]
   81bd4:	4620      	mov	r0, r4
   81bd6:	f7ff fb35 	bl	81244 <__sprint_r.part.0>
   81bda:	bb50      	cbnz	r0, 81c32 <_vfiprintf_r+0x96e>
   81bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bde:	46d4      	mov	ip, sl
   81be0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81be2:	f101 0e01 	add.w	lr, r1, #1
   81be6:	e54a      	b.n	8167e <_vfiprintf_r+0x3ba>
   81be8:	2a00      	cmp	r2, #0
   81bea:	f47f aee5 	bne.w	819b8 <_vfiprintf_r+0x6f4>
   81bee:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81bf2:	2900      	cmp	r1, #0
   81bf4:	f000 811a 	beq.w	81e2c <_vfiprintf_r+0xb68>
   81bf8:	2201      	movs	r2, #1
   81bfa:	46d1      	mov	r9, sl
   81bfc:	4610      	mov	r0, r2
   81bfe:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81c02:	921d      	str	r2, [sp, #116]	; 0x74
   81c04:	911c      	str	r1, [sp, #112]	; 0x70
   81c06:	4601      	mov	r1, r0
   81c08:	f109 0908 	add.w	r9, r9, #8
   81c0c:	3001      	adds	r0, #1
   81c0e:	e508      	b.n	81622 <_vfiprintf_r+0x35e>
   81c10:	9b02      	ldr	r3, [sp, #8]
   81c12:	2a01      	cmp	r2, #1
   81c14:	f000 8097 	beq.w	81d46 <_vfiprintf_r+0xa82>
   81c18:	2a02      	cmp	r2, #2
   81c1a:	d10d      	bne.n	81c38 <_vfiprintf_r+0x974>
   81c1c:	9302      	str	r3, [sp, #8]
   81c1e:	2600      	movs	r6, #0
   81c20:	2700      	movs	r7, #0
   81c22:	e5b2      	b.n	8178a <_vfiprintf_r+0x4c6>
   81c24:	aa0f      	add	r2, sp, #60	; 0x3c
   81c26:	9904      	ldr	r1, [sp, #16]
   81c28:	9806      	ldr	r0, [sp, #24]
   81c2a:	f7ff fb0b 	bl	81244 <__sprint_r.part.0>
   81c2e:	2800      	cmp	r0, #0
   81c30:	d0c9      	beq.n	81bc6 <_vfiprintf_r+0x902>
   81c32:	f8dd b010 	ldr.w	fp, [sp, #16]
   81c36:	e797      	b.n	81b68 <_vfiprintf_r+0x8a4>
   81c38:	2600      	movs	r6, #0
   81c3a:	2700      	movs	r7, #0
   81c3c:	9302      	str	r3, [sp, #8]
   81c3e:	4651      	mov	r1, sl
   81c40:	e000      	b.n	81c44 <_vfiprintf_r+0x980>
   81c42:	4659      	mov	r1, fp
   81c44:	08f2      	lsrs	r2, r6, #3
   81c46:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81c4a:	08f8      	lsrs	r0, r7, #3
   81c4c:	f006 0307 	and.w	r3, r6, #7
   81c50:	4607      	mov	r7, r0
   81c52:	4616      	mov	r6, r2
   81c54:	3330      	adds	r3, #48	; 0x30
   81c56:	ea56 0207 	orrs.w	r2, r6, r7
   81c5a:	f801 3c01 	strb.w	r3, [r1, #-1]
   81c5e:	f101 3bff 	add.w	fp, r1, #4294967295
   81c62:	d1ee      	bne.n	81c42 <_vfiprintf_r+0x97e>
   81c64:	9a02      	ldr	r2, [sp, #8]
   81c66:	07d6      	lsls	r6, r2, #31
   81c68:	f57f ad9f 	bpl.w	817aa <_vfiprintf_r+0x4e6>
   81c6c:	2b30      	cmp	r3, #48	; 0x30
   81c6e:	f43f ad9c 	beq.w	817aa <_vfiprintf_r+0x4e6>
   81c72:	2330      	movs	r3, #48	; 0x30
   81c74:	3902      	subs	r1, #2
   81c76:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81c7a:	ebaa 0301 	sub.w	r3, sl, r1
   81c7e:	9305      	str	r3, [sp, #20]
   81c80:	468b      	mov	fp, r1
   81c82:	e477      	b.n	81574 <_vfiprintf_r+0x2b0>
   81c84:	9b03      	ldr	r3, [sp, #12]
   81c86:	9a08      	ldr	r2, [sp, #32]
   81c88:	428a      	cmp	r2, r1
   81c8a:	bfac      	ite	ge
   81c8c:	189b      	addge	r3, r3, r2
   81c8e:	185b      	addlt	r3, r3, r1
   81c90:	9303      	str	r3, [sp, #12]
   81c92:	e798      	b.n	81bc6 <_vfiprintf_r+0x902>
   81c94:	2202      	movs	r2, #2
   81c96:	e44e      	b.n	81536 <_vfiprintf_r+0x272>
   81c98:	2f00      	cmp	r7, #0
   81c9a:	bf08      	it	eq
   81c9c:	2e0a      	cmpeq	r6, #10
   81c9e:	d351      	bcc.n	81d44 <_vfiprintf_r+0xa80>
   81ca0:	46d3      	mov	fp, sl
   81ca2:	4630      	mov	r0, r6
   81ca4:	4639      	mov	r1, r7
   81ca6:	220a      	movs	r2, #10
   81ca8:	2300      	movs	r3, #0
   81caa:	f001 ff29 	bl	83b00 <__aeabi_uldivmod>
   81cae:	3230      	adds	r2, #48	; 0x30
   81cb0:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81cb4:	4630      	mov	r0, r6
   81cb6:	4639      	mov	r1, r7
   81cb8:	2300      	movs	r3, #0
   81cba:	220a      	movs	r2, #10
   81cbc:	f001 ff20 	bl	83b00 <__aeabi_uldivmod>
   81cc0:	4606      	mov	r6, r0
   81cc2:	460f      	mov	r7, r1
   81cc4:	ea56 0307 	orrs.w	r3, r6, r7
   81cc8:	d1eb      	bne.n	81ca2 <_vfiprintf_r+0x9de>
   81cca:	e56e      	b.n	817aa <_vfiprintf_r+0x4e6>
   81ccc:	9405      	str	r4, [sp, #20]
   81cce:	46d3      	mov	fp, sl
   81cd0:	e450      	b.n	81574 <_vfiprintf_r+0x2b0>
   81cd2:	aa0f      	add	r2, sp, #60	; 0x3c
   81cd4:	9904      	ldr	r1, [sp, #16]
   81cd6:	9806      	ldr	r0, [sp, #24]
   81cd8:	f7ff fab4 	bl	81244 <__sprint_r.part.0>
   81cdc:	2800      	cmp	r0, #0
   81cde:	d1a8      	bne.n	81c32 <_vfiprintf_r+0x96e>
   81ce0:	46d1      	mov	r9, sl
   81ce2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ce4:	e75e      	b.n	81ba4 <_vfiprintf_r+0x8e0>
   81ce6:	aa0f      	add	r2, sp, #60	; 0x3c
   81ce8:	9904      	ldr	r1, [sp, #16]
   81cea:	9806      	ldr	r0, [sp, #24]
   81cec:	f7ff faaa 	bl	81244 <__sprint_r.part.0>
   81cf0:	2800      	cmp	r0, #0
   81cf2:	d19e      	bne.n	81c32 <_vfiprintf_r+0x96e>
   81cf4:	46d1      	mov	r9, sl
   81cf6:	f7ff bbbb 	b.w	81470 <_vfiprintf_r+0x1ac>
   81cfa:	bf00      	nop
   81cfc:	00083ea8 	.word	0x00083ea8
   81d00:	00083e98 	.word	0x00083e98
   81d04:	3104      	adds	r1, #4
   81d06:	6816      	ldr	r6, [r2, #0]
   81d08:	2700      	movs	r7, #0
   81d0a:	2201      	movs	r2, #1
   81d0c:	9107      	str	r1, [sp, #28]
   81d0e:	e412      	b.n	81536 <_vfiprintf_r+0x272>
   81d10:	9807      	ldr	r0, [sp, #28]
   81d12:	2700      	movs	r7, #0
   81d14:	4601      	mov	r1, r0
   81d16:	3104      	adds	r1, #4
   81d18:	6806      	ldr	r6, [r0, #0]
   81d1a:	9107      	str	r1, [sp, #28]
   81d1c:	e40b      	b.n	81536 <_vfiprintf_r+0x272>
   81d1e:	680e      	ldr	r6, [r1, #0]
   81d20:	3104      	adds	r1, #4
   81d22:	9107      	str	r1, [sp, #28]
   81d24:	2700      	movs	r7, #0
   81d26:	e592      	b.n	8184e <_vfiprintf_r+0x58a>
   81d28:	6816      	ldr	r6, [r2, #0]
   81d2a:	3204      	adds	r2, #4
   81d2c:	17f7      	asrs	r7, r6, #31
   81d2e:	9207      	str	r2, [sp, #28]
   81d30:	4630      	mov	r0, r6
   81d32:	4639      	mov	r1, r7
   81d34:	e512      	b.n	8175c <_vfiprintf_r+0x498>
   81d36:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81d3a:	f000 fe75 	bl	82a28 <__retarget_lock_release_recursive>
   81d3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81d42:	e71b      	b.n	81b7c <_vfiprintf_r+0x8b8>
   81d44:	9b02      	ldr	r3, [sp, #8]
   81d46:	9302      	str	r3, [sp, #8]
   81d48:	2301      	movs	r3, #1
   81d4a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81d4e:	3630      	adds	r6, #48	; 0x30
   81d50:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81d54:	9305      	str	r3, [sp, #20]
   81d56:	e40d      	b.n	81574 <_vfiprintf_r+0x2b0>
   81d58:	aa0f      	add	r2, sp, #60	; 0x3c
   81d5a:	9904      	ldr	r1, [sp, #16]
   81d5c:	9806      	ldr	r0, [sp, #24]
   81d5e:	f7ff fa71 	bl	81244 <__sprint_r.part.0>
   81d62:	2800      	cmp	r0, #0
   81d64:	f47f af65 	bne.w	81c32 <_vfiprintf_r+0x96e>
   81d68:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d6a:	46d1      	mov	r9, sl
   81d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d6e:	1c48      	adds	r0, r1, #1
   81d70:	e457      	b.n	81622 <_vfiprintf_r+0x35e>
   81d72:	aa0f      	add	r2, sp, #60	; 0x3c
   81d74:	9904      	ldr	r1, [sp, #16]
   81d76:	9806      	ldr	r0, [sp, #24]
   81d78:	f7ff fa64 	bl	81244 <__sprint_r.part.0>
   81d7c:	2800      	cmp	r0, #0
   81d7e:	f47f af58 	bne.w	81c32 <_vfiprintf_r+0x96e>
   81d82:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d84:	46d1      	mov	r9, sl
   81d86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d88:	1c48      	adds	r0, r1, #1
   81d8a:	e644      	b.n	81a16 <_vfiprintf_r+0x752>
   81d8c:	2a00      	cmp	r2, #0
   81d8e:	f040 8087 	bne.w	81ea0 <_vfiprintf_r+0xbdc>
   81d92:	2001      	movs	r0, #1
   81d94:	4611      	mov	r1, r2
   81d96:	46d1      	mov	r9, sl
   81d98:	e641      	b.n	81a1e <_vfiprintf_r+0x75a>
   81d9a:	aa0f      	add	r2, sp, #60	; 0x3c
   81d9c:	9904      	ldr	r1, [sp, #16]
   81d9e:	9806      	ldr	r0, [sp, #24]
   81da0:	f7ff fa50 	bl	81244 <__sprint_r.part.0>
   81da4:	2800      	cmp	r0, #0
   81da6:	f47f af44 	bne.w	81c32 <_vfiprintf_r+0x96e>
   81daa:	9810      	ldr	r0, [sp, #64]	; 0x40
   81dac:	46d1      	mov	r9, sl
   81dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81db0:	3001      	adds	r0, #1
   81db2:	e668      	b.n	81a86 <_vfiprintf_r+0x7c2>
   81db4:	46cb      	mov	fp, r9
   81db6:	e6d7      	b.n	81b68 <_vfiprintf_r+0x8a4>
   81db8:	9d07      	ldr	r5, [sp, #28]
   81dba:	3507      	adds	r5, #7
   81dbc:	f025 0507 	bic.w	r5, r5, #7
   81dc0:	f105 0208 	add.w	r2, r5, #8
   81dc4:	e9d5 0100 	ldrd	r0, r1, [r5]
   81dc8:	9207      	str	r2, [sp, #28]
   81dca:	4606      	mov	r6, r0
   81dcc:	460f      	mov	r7, r1
   81dce:	e4c5      	b.n	8175c <_vfiprintf_r+0x498>
   81dd0:	9d07      	ldr	r5, [sp, #28]
   81dd2:	3507      	adds	r5, #7
   81dd4:	f025 0207 	bic.w	r2, r5, #7
   81dd8:	f102 0108 	add.w	r1, r2, #8
   81ddc:	e9d2 6700 	ldrd	r6, r7, [r2]
   81de0:	9107      	str	r1, [sp, #28]
   81de2:	2201      	movs	r2, #1
   81de4:	f7ff bba7 	b.w	81536 <_vfiprintf_r+0x272>
   81de8:	9d07      	ldr	r5, [sp, #28]
   81dea:	3507      	adds	r5, #7
   81dec:	f025 0207 	bic.w	r2, r5, #7
   81df0:	f102 0108 	add.w	r1, r2, #8
   81df4:	e9d2 6700 	ldrd	r6, r7, [r2]
   81df8:	9107      	str	r1, [sp, #28]
   81dfa:	2200      	movs	r2, #0
   81dfc:	f7ff bb9b 	b.w	81536 <_vfiprintf_r+0x272>
   81e00:	9d07      	ldr	r5, [sp, #28]
   81e02:	3507      	adds	r5, #7
   81e04:	f025 0107 	bic.w	r1, r5, #7
   81e08:	f101 0008 	add.w	r0, r1, #8
   81e0c:	9007      	str	r0, [sp, #28]
   81e0e:	e9d1 6700 	ldrd	r6, r7, [r1]
   81e12:	e51c      	b.n	8184e <_vfiprintf_r+0x58a>
   81e14:	46d3      	mov	fp, sl
   81e16:	f7ff bbad 	b.w	81574 <_vfiprintf_r+0x2b0>
   81e1a:	252d      	movs	r5, #45	; 0x2d
   81e1c:	4276      	negs	r6, r6
   81e1e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81e22:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81e26:	2201      	movs	r2, #1
   81e28:	f7ff bb8a 	b.w	81540 <_vfiprintf_r+0x27c>
   81e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81e2e:	b9b3      	cbnz	r3, 81e5e <_vfiprintf_r+0xb9a>
   81e30:	4611      	mov	r1, r2
   81e32:	2001      	movs	r0, #1
   81e34:	46d1      	mov	r9, sl
   81e36:	e5f2      	b.n	81a1e <_vfiprintf_r+0x75a>
   81e38:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e3c:	f000 fdf4 	bl	82a28 <__retarget_lock_release_recursive>
   81e40:	f04f 33ff 	mov.w	r3, #4294967295
   81e44:	9303      	str	r3, [sp, #12]
   81e46:	f7ff bb4c 	b.w	814e2 <_vfiprintf_r+0x21e>
   81e4a:	aa0f      	add	r2, sp, #60	; 0x3c
   81e4c:	9904      	ldr	r1, [sp, #16]
   81e4e:	9806      	ldr	r0, [sp, #24]
   81e50:	f7ff f9f8 	bl	81244 <__sprint_r.part.0>
   81e54:	2800      	cmp	r0, #0
   81e56:	f47f aeec 	bne.w	81c32 <_vfiprintf_r+0x96e>
   81e5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e5c:	e6aa      	b.n	81bb4 <_vfiprintf_r+0x8f0>
   81e5e:	2202      	movs	r2, #2
   81e60:	ab0e      	add	r3, sp, #56	; 0x38
   81e62:	921d      	str	r2, [sp, #116]	; 0x74
   81e64:	931c      	str	r3, [sp, #112]	; 0x70
   81e66:	2001      	movs	r0, #1
   81e68:	46d1      	mov	r9, sl
   81e6a:	e5d0      	b.n	81a0e <_vfiprintf_r+0x74a>
   81e6c:	4d34      	ldr	r5, [pc, #208]	; (81f40 <_vfiprintf_r+0xc7c>)
   81e6e:	e5fd      	b.n	81a6c <_vfiprintf_r+0x7a8>
   81e70:	9a07      	ldr	r2, [sp, #28]
   81e72:	4613      	mov	r3, r2
   81e74:	3304      	adds	r3, #4
   81e76:	9307      	str	r3, [sp, #28]
   81e78:	9b03      	ldr	r3, [sp, #12]
   81e7a:	6811      	ldr	r1, [r2, #0]
   81e7c:	17dd      	asrs	r5, r3, #31
   81e7e:	461a      	mov	r2, r3
   81e80:	462b      	mov	r3, r5
   81e82:	e9c1 2300 	strd	r2, r3, [r1]
   81e86:	f7ff ba5a 	b.w	8133e <_vfiprintf_r+0x7a>
   81e8a:	4658      	mov	r0, fp
   81e8c:	9507      	str	r5, [sp, #28]
   81e8e:	9302      	str	r3, [sp, #8]
   81e90:	f001 fc3c 	bl	8370c <strlen>
   81e94:	2400      	movs	r4, #0
   81e96:	9005      	str	r0, [sp, #20]
   81e98:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e9c:	f7ff bb6a 	b.w	81574 <_vfiprintf_r+0x2b0>
   81ea0:	aa0f      	add	r2, sp, #60	; 0x3c
   81ea2:	9904      	ldr	r1, [sp, #16]
   81ea4:	9806      	ldr	r0, [sp, #24]
   81ea6:	f7ff f9cd 	bl	81244 <__sprint_r.part.0>
   81eaa:	2800      	cmp	r0, #0
   81eac:	f47f aec1 	bne.w	81c32 <_vfiprintf_r+0x96e>
   81eb0:	9910      	ldr	r1, [sp, #64]	; 0x40
   81eb2:	46d1      	mov	r9, sl
   81eb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81eb6:	1c48      	adds	r0, r1, #1
   81eb8:	e5b1      	b.n	81a1e <_vfiprintf_r+0x75a>
   81eba:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ebc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ebe:	3101      	adds	r1, #1
   81ec0:	4e20      	ldr	r6, [pc, #128]	; (81f44 <_vfiprintf_r+0xc80>)
   81ec2:	f7ff bb9c 	b.w	815fe <_vfiprintf_r+0x33a>
   81ec6:	2c06      	cmp	r4, #6
   81ec8:	bf28      	it	cs
   81eca:	2406      	movcs	r4, #6
   81ecc:	9507      	str	r5, [sp, #28]
   81ece:	9405      	str	r4, [sp, #20]
   81ed0:	9401      	str	r4, [sp, #4]
   81ed2:	f8df b074 	ldr.w	fp, [pc, #116]	; 81f48 <_vfiprintf_r+0xc84>
   81ed6:	e4e3      	b.n	818a0 <_vfiprintf_r+0x5dc>
   81ed8:	9810      	ldr	r0, [sp, #64]	; 0x40
   81eda:	4e1a      	ldr	r6, [pc, #104]	; (81f44 <_vfiprintf_r+0xc80>)
   81edc:	3001      	adds	r0, #1
   81ede:	e60e      	b.n	81afe <_vfiprintf_r+0x83a>
   81ee0:	4686      	mov	lr, r0
   81ee2:	4d17      	ldr	r5, [pc, #92]	; (81f40 <_vfiprintf_r+0xc7c>)
   81ee4:	f7ff bbe2 	b.w	816ac <_vfiprintf_r+0x3e8>
   81ee8:	9405      	str	r4, [sp, #20]
   81eea:	9507      	str	r5, [sp, #28]
   81eec:	9302      	str	r3, [sp, #8]
   81eee:	4604      	mov	r4, r0
   81ef0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81ef4:	f7ff bb3e 	b.w	81574 <_vfiprintf_r+0x2b0>
   81ef8:	9806      	ldr	r0, [sp, #24]
   81efa:	aa0f      	add	r2, sp, #60	; 0x3c
   81efc:	4659      	mov	r1, fp
   81efe:	f7ff f9a1 	bl	81244 <__sprint_r.part.0>
   81f02:	2800      	cmp	r0, #0
   81f04:	f43f ae2e 	beq.w	81b64 <_vfiprintf_r+0x8a0>
   81f08:	e62e      	b.n	81b68 <_vfiprintf_r+0x8a4>
   81f0a:	9907      	ldr	r1, [sp, #28]
   81f0c:	f898 2001 	ldrb.w	r2, [r8, #1]
   81f10:	680c      	ldr	r4, [r1, #0]
   81f12:	3104      	adds	r1, #4
   81f14:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   81f18:	46b8      	mov	r8, r7
   81f1a:	9107      	str	r1, [sp, #28]
   81f1c:	f7ff ba44 	b.w	813a8 <_vfiprintf_r+0xe4>
   81f20:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f24:	e4a7      	b.n	81876 <_vfiprintf_r+0x5b2>
   81f26:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f2a:	e521      	b.n	81970 <_vfiprintf_r+0x6ac>
   81f2c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f30:	e47c      	b.n	8182c <_vfiprintf_r+0x568>
   81f32:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f36:	e43f      	b.n	817b8 <_vfiprintf_r+0x4f4>
   81f38:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f3c:	f7ff bbfa 	b.w	81734 <_vfiprintf_r+0x470>
   81f40:	00083ea8 	.word	0x00083ea8
   81f44:	00083e98 	.word	0x00083e98
   81f48:	00083e90 	.word	0x00083e90

00081f4c <__sbprintf>:
   81f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f50:	460c      	mov	r4, r1
   81f52:	f04f 0e00 	mov.w	lr, #0
   81f56:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f5a:	4606      	mov	r6, r0
   81f5c:	4617      	mov	r7, r2
   81f5e:	4698      	mov	r8, r3
   81f60:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81f62:	89e3      	ldrh	r3, [r4, #14]
   81f64:	8989      	ldrh	r1, [r1, #12]
   81f66:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81f6a:	f021 0102 	bic.w	r1, r1, #2
   81f6e:	9219      	str	r2, [sp, #100]	; 0x64
   81f70:	f8ad 300e 	strh.w	r3, [sp, #14]
   81f74:	69e2      	ldr	r2, [r4, #28]
   81f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f78:	f8ad 100c 	strh.w	r1, [sp, #12]
   81f7c:	a816      	add	r0, sp, #88	; 0x58
   81f7e:	a91a      	add	r1, sp, #104	; 0x68
   81f80:	f8cd e018 	str.w	lr, [sp, #24]
   81f84:	9207      	str	r2, [sp, #28]
   81f86:	9309      	str	r3, [sp, #36]	; 0x24
   81f88:	9100      	str	r1, [sp, #0]
   81f8a:	9104      	str	r1, [sp, #16]
   81f8c:	9502      	str	r5, [sp, #8]
   81f8e:	9505      	str	r5, [sp, #20]
   81f90:	f000 fd44 	bl	82a1c <__retarget_lock_init_recursive>
   81f94:	4643      	mov	r3, r8
   81f96:	463a      	mov	r2, r7
   81f98:	4669      	mov	r1, sp
   81f9a:	4630      	mov	r0, r6
   81f9c:	f7ff f992 	bl	812c4 <_vfiprintf_r>
   81fa0:	1e05      	subs	r5, r0, #0
   81fa2:	db07      	blt.n	81fb4 <__sbprintf+0x68>
   81fa4:	4630      	mov	r0, r6
   81fa6:	4669      	mov	r1, sp
   81fa8:	f000 f924 	bl	821f4 <_fflush_r>
   81fac:	2800      	cmp	r0, #0
   81fae:	bf18      	it	ne
   81fb0:	f04f 35ff 	movne.w	r5, #4294967295
   81fb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81fb8:	065b      	lsls	r3, r3, #25
   81fba:	d503      	bpl.n	81fc4 <__sbprintf+0x78>
   81fbc:	89a3      	ldrh	r3, [r4, #12]
   81fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fc2:	81a3      	strh	r3, [r4, #12]
   81fc4:	9816      	ldr	r0, [sp, #88]	; 0x58
   81fc6:	f000 fd2b 	bl	82a20 <__retarget_lock_close_recursive>
   81fca:	4628      	mov	r0, r5
   81fcc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081fd4 <__swsetup_r>:
   81fd4:	b538      	push	{r3, r4, r5, lr}
   81fd6:	4b30      	ldr	r3, [pc, #192]	; (82098 <__swsetup_r+0xc4>)
   81fd8:	4605      	mov	r5, r0
   81fda:	6818      	ldr	r0, [r3, #0]
   81fdc:	460c      	mov	r4, r1
   81fde:	b110      	cbz	r0, 81fe6 <__swsetup_r+0x12>
   81fe0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fe2:	2b00      	cmp	r3, #0
   81fe4:	d038      	beq.n	82058 <__swsetup_r+0x84>
   81fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81fea:	b293      	uxth	r3, r2
   81fec:	0718      	lsls	r0, r3, #28
   81fee:	d50c      	bpl.n	8200a <__swsetup_r+0x36>
   81ff0:	6920      	ldr	r0, [r4, #16]
   81ff2:	b1a8      	cbz	r0, 82020 <__swsetup_r+0x4c>
   81ff4:	f013 0201 	ands.w	r2, r3, #1
   81ff8:	d01e      	beq.n	82038 <__swsetup_r+0x64>
   81ffa:	2200      	movs	r2, #0
   81ffc:	6963      	ldr	r3, [r4, #20]
   81ffe:	60a2      	str	r2, [r4, #8]
   82000:	425b      	negs	r3, r3
   82002:	61a3      	str	r3, [r4, #24]
   82004:	b1f0      	cbz	r0, 82044 <__swsetup_r+0x70>
   82006:	2000      	movs	r0, #0
   82008:	bd38      	pop	{r3, r4, r5, pc}
   8200a:	06d9      	lsls	r1, r3, #27
   8200c:	d53b      	bpl.n	82086 <__swsetup_r+0xb2>
   8200e:	0758      	lsls	r0, r3, #29
   82010:	d425      	bmi.n	8205e <__swsetup_r+0x8a>
   82012:	6920      	ldr	r0, [r4, #16]
   82014:	f042 0308 	orr.w	r3, r2, #8
   82018:	81a3      	strh	r3, [r4, #12]
   8201a:	b29b      	uxth	r3, r3
   8201c:	2800      	cmp	r0, #0
   8201e:	d1e9      	bne.n	81ff4 <__swsetup_r+0x20>
   82020:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82024:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82028:	d0e4      	beq.n	81ff4 <__swsetup_r+0x20>
   8202a:	4628      	mov	r0, r5
   8202c:	4621      	mov	r1, r4
   8202e:	f000 fd2b 	bl	82a88 <__smakebuf_r>
   82032:	89a3      	ldrh	r3, [r4, #12]
   82034:	6920      	ldr	r0, [r4, #16]
   82036:	e7dd      	b.n	81ff4 <__swsetup_r+0x20>
   82038:	0799      	lsls	r1, r3, #30
   8203a:	bf58      	it	pl
   8203c:	6962      	ldrpl	r2, [r4, #20]
   8203e:	60a2      	str	r2, [r4, #8]
   82040:	2800      	cmp	r0, #0
   82042:	d1e0      	bne.n	82006 <__swsetup_r+0x32>
   82044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82048:	061a      	lsls	r2, r3, #24
   8204a:	d5dd      	bpl.n	82008 <__swsetup_r+0x34>
   8204c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82050:	81a3      	strh	r3, [r4, #12]
   82052:	f04f 30ff 	mov.w	r0, #4294967295
   82056:	bd38      	pop	{r3, r4, r5, pc}
   82058:	f000 f924 	bl	822a4 <__sinit>
   8205c:	e7c3      	b.n	81fe6 <__swsetup_r+0x12>
   8205e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82060:	b151      	cbz	r1, 82078 <__swsetup_r+0xa4>
   82062:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82066:	4299      	cmp	r1, r3
   82068:	d004      	beq.n	82074 <__swsetup_r+0xa0>
   8206a:	4628      	mov	r0, r5
   8206c:	f000 fa40 	bl	824f0 <_free_r>
   82070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82074:	2300      	movs	r3, #0
   82076:	6323      	str	r3, [r4, #48]	; 0x30
   82078:	2300      	movs	r3, #0
   8207a:	6920      	ldr	r0, [r4, #16]
   8207c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82080:	e884 0009 	stmia.w	r4, {r0, r3}
   82084:	e7c6      	b.n	82014 <__swsetup_r+0x40>
   82086:	2309      	movs	r3, #9
   82088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8208c:	602b      	str	r3, [r5, #0]
   8208e:	f04f 30ff 	mov.w	r0, #4294967295
   82092:	81a2      	strh	r2, [r4, #12]
   82094:	bd38      	pop	{r3, r4, r5, pc}
   82096:	bf00      	nop
   82098:	20070174 	.word	0x20070174

0008209c <register_fini>:
   8209c:	4b02      	ldr	r3, [pc, #8]	; (820a8 <register_fini+0xc>)
   8209e:	b113      	cbz	r3, 820a6 <register_fini+0xa>
   820a0:	4802      	ldr	r0, [pc, #8]	; (820ac <register_fini+0x10>)
   820a2:	f000 b805 	b.w	820b0 <atexit>
   820a6:	4770      	bx	lr
   820a8:	00000000 	.word	0x00000000
   820ac:	0008231d 	.word	0x0008231d

000820b0 <atexit>:
   820b0:	2300      	movs	r3, #0
   820b2:	4601      	mov	r1, r0
   820b4:	461a      	mov	r2, r3
   820b6:	4618      	mov	r0, r3
   820b8:	f001 bbfa 	b.w	838b0 <__register_exitproc>

000820bc <__sflush_r>:
   820bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   820c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820c4:	b29a      	uxth	r2, r3
   820c6:	460d      	mov	r5, r1
   820c8:	0711      	lsls	r1, r2, #28
   820ca:	4680      	mov	r8, r0
   820cc:	d43a      	bmi.n	82144 <__sflush_r+0x88>
   820ce:	686a      	ldr	r2, [r5, #4]
   820d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   820d4:	2a00      	cmp	r2, #0
   820d6:	81ab      	strh	r3, [r5, #12]
   820d8:	dd70      	ble.n	821bc <__sflush_r+0x100>
   820da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820dc:	2c00      	cmp	r4, #0
   820de:	d04a      	beq.n	82176 <__sflush_r+0xba>
   820e0:	2200      	movs	r2, #0
   820e2:	b29b      	uxth	r3, r3
   820e4:	f8d8 6000 	ldr.w	r6, [r8]
   820e8:	f8c8 2000 	str.w	r2, [r8]
   820ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   820f0:	d068      	beq.n	821c4 <__sflush_r+0x108>
   820f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820f4:	075f      	lsls	r7, r3, #29
   820f6:	d505      	bpl.n	82104 <__sflush_r+0x48>
   820f8:	6869      	ldr	r1, [r5, #4]
   820fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820fc:	1a52      	subs	r2, r2, r1
   820fe:	b10b      	cbz	r3, 82104 <__sflush_r+0x48>
   82100:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82102:	1ad2      	subs	r2, r2, r3
   82104:	2300      	movs	r3, #0
   82106:	69e9      	ldr	r1, [r5, #28]
   82108:	4640      	mov	r0, r8
   8210a:	47a0      	blx	r4
   8210c:	1c44      	adds	r4, r0, #1
   8210e:	d03d      	beq.n	8218c <__sflush_r+0xd0>
   82110:	2100      	movs	r1, #0
   82112:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82116:	692a      	ldr	r2, [r5, #16]
   82118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8211c:	81ab      	strh	r3, [r5, #12]
   8211e:	04db      	lsls	r3, r3, #19
   82120:	6069      	str	r1, [r5, #4]
   82122:	602a      	str	r2, [r5, #0]
   82124:	d448      	bmi.n	821b8 <__sflush_r+0xfc>
   82126:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82128:	f8c8 6000 	str.w	r6, [r8]
   8212c:	b319      	cbz	r1, 82176 <__sflush_r+0xba>
   8212e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82132:	4299      	cmp	r1, r3
   82134:	d002      	beq.n	8213c <__sflush_r+0x80>
   82136:	4640      	mov	r0, r8
   82138:	f000 f9da 	bl	824f0 <_free_r>
   8213c:	2000      	movs	r0, #0
   8213e:	6328      	str	r0, [r5, #48]	; 0x30
   82140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82144:	692e      	ldr	r6, [r5, #16]
   82146:	b1b6      	cbz	r6, 82176 <__sflush_r+0xba>
   82148:	0791      	lsls	r1, r2, #30
   8214a:	bf18      	it	ne
   8214c:	2300      	movne	r3, #0
   8214e:	682c      	ldr	r4, [r5, #0]
   82150:	bf08      	it	eq
   82152:	696b      	ldreq	r3, [r5, #20]
   82154:	602e      	str	r6, [r5, #0]
   82156:	1ba4      	subs	r4, r4, r6
   82158:	60ab      	str	r3, [r5, #8]
   8215a:	e00a      	b.n	82172 <__sflush_r+0xb6>
   8215c:	4623      	mov	r3, r4
   8215e:	4632      	mov	r2, r6
   82160:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82162:	69e9      	ldr	r1, [r5, #28]
   82164:	4640      	mov	r0, r8
   82166:	47b8      	blx	r7
   82168:	2800      	cmp	r0, #0
   8216a:	eba4 0400 	sub.w	r4, r4, r0
   8216e:	4406      	add	r6, r0
   82170:	dd04      	ble.n	8217c <__sflush_r+0xc0>
   82172:	2c00      	cmp	r4, #0
   82174:	dcf2      	bgt.n	8215c <__sflush_r+0xa0>
   82176:	2000      	movs	r0, #0
   82178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8217c:	89ab      	ldrh	r3, [r5, #12]
   8217e:	f04f 30ff 	mov.w	r0, #4294967295
   82182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82186:	81ab      	strh	r3, [r5, #12]
   82188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8218c:	f8d8 4000 	ldr.w	r4, [r8]
   82190:	2c1d      	cmp	r4, #29
   82192:	d8f3      	bhi.n	8217c <__sflush_r+0xc0>
   82194:	4b16      	ldr	r3, [pc, #88]	; (821f0 <__sflush_r+0x134>)
   82196:	40e3      	lsrs	r3, r4
   82198:	43db      	mvns	r3, r3
   8219a:	f013 0301 	ands.w	r3, r3, #1
   8219e:	d1ed      	bne.n	8217c <__sflush_r+0xc0>
   821a0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   821a4:	6929      	ldr	r1, [r5, #16]
   821a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   821aa:	81aa      	strh	r2, [r5, #12]
   821ac:	04d2      	lsls	r2, r2, #19
   821ae:	606b      	str	r3, [r5, #4]
   821b0:	6029      	str	r1, [r5, #0]
   821b2:	d5b8      	bpl.n	82126 <__sflush_r+0x6a>
   821b4:	2c00      	cmp	r4, #0
   821b6:	d1b6      	bne.n	82126 <__sflush_r+0x6a>
   821b8:	6528      	str	r0, [r5, #80]	; 0x50
   821ba:	e7b4      	b.n	82126 <__sflush_r+0x6a>
   821bc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   821be:	2a00      	cmp	r2, #0
   821c0:	dc8b      	bgt.n	820da <__sflush_r+0x1e>
   821c2:	e7d8      	b.n	82176 <__sflush_r+0xba>
   821c4:	2301      	movs	r3, #1
   821c6:	69e9      	ldr	r1, [r5, #28]
   821c8:	4640      	mov	r0, r8
   821ca:	47a0      	blx	r4
   821cc:	1c43      	adds	r3, r0, #1
   821ce:	4602      	mov	r2, r0
   821d0:	d002      	beq.n	821d8 <__sflush_r+0x11c>
   821d2:	89ab      	ldrh	r3, [r5, #12]
   821d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   821d6:	e78d      	b.n	820f4 <__sflush_r+0x38>
   821d8:	f8d8 3000 	ldr.w	r3, [r8]
   821dc:	2b00      	cmp	r3, #0
   821de:	d0f8      	beq.n	821d2 <__sflush_r+0x116>
   821e0:	2b1d      	cmp	r3, #29
   821e2:	d001      	beq.n	821e8 <__sflush_r+0x12c>
   821e4:	2b16      	cmp	r3, #22
   821e6:	d1c9      	bne.n	8217c <__sflush_r+0xc0>
   821e8:	f8c8 6000 	str.w	r6, [r8]
   821ec:	e7c3      	b.n	82176 <__sflush_r+0xba>
   821ee:	bf00      	nop
   821f0:	20400001 	.word	0x20400001

000821f4 <_fflush_r>:
   821f4:	b538      	push	{r3, r4, r5, lr}
   821f6:	460d      	mov	r5, r1
   821f8:	4604      	mov	r4, r0
   821fa:	b108      	cbz	r0, 82200 <_fflush_r+0xc>
   821fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821fe:	b1bb      	cbz	r3, 82230 <_fflush_r+0x3c>
   82200:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82204:	b188      	cbz	r0, 8222a <_fflush_r+0x36>
   82206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82208:	07db      	lsls	r3, r3, #31
   8220a:	d401      	bmi.n	82210 <_fflush_r+0x1c>
   8220c:	0581      	lsls	r1, r0, #22
   8220e:	d517      	bpl.n	82240 <_fflush_r+0x4c>
   82210:	4620      	mov	r0, r4
   82212:	4629      	mov	r1, r5
   82214:	f7ff ff52 	bl	820bc <__sflush_r>
   82218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8221a:	4604      	mov	r4, r0
   8221c:	07da      	lsls	r2, r3, #31
   8221e:	d402      	bmi.n	82226 <_fflush_r+0x32>
   82220:	89ab      	ldrh	r3, [r5, #12]
   82222:	059b      	lsls	r3, r3, #22
   82224:	d507      	bpl.n	82236 <_fflush_r+0x42>
   82226:	4620      	mov	r0, r4
   82228:	bd38      	pop	{r3, r4, r5, pc}
   8222a:	4604      	mov	r4, r0
   8222c:	4620      	mov	r0, r4
   8222e:	bd38      	pop	{r3, r4, r5, pc}
   82230:	f000 f838 	bl	822a4 <__sinit>
   82234:	e7e4      	b.n	82200 <_fflush_r+0xc>
   82236:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82238:	f000 fbf6 	bl	82a28 <__retarget_lock_release_recursive>
   8223c:	4620      	mov	r0, r4
   8223e:	bd38      	pop	{r3, r4, r5, pc}
   82240:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82242:	f000 fbef 	bl	82a24 <__retarget_lock_acquire_recursive>
   82246:	e7e3      	b.n	82210 <_fflush_r+0x1c>

00082248 <_cleanup_r>:
   82248:	4901      	ldr	r1, [pc, #4]	; (82250 <_cleanup_r+0x8>)
   8224a:	f000 bbb1 	b.w	829b0 <_fwalk_reent>
   8224e:	bf00      	nop
   82250:	00083999 	.word	0x00083999

00082254 <std.isra.0>:
   82254:	2300      	movs	r3, #0
   82256:	b510      	push	{r4, lr}
   82258:	4604      	mov	r4, r0
   8225a:	8181      	strh	r1, [r0, #12]
   8225c:	81c2      	strh	r2, [r0, #14]
   8225e:	6003      	str	r3, [r0, #0]
   82260:	6043      	str	r3, [r0, #4]
   82262:	6083      	str	r3, [r0, #8]
   82264:	6643      	str	r3, [r0, #100]	; 0x64
   82266:	6103      	str	r3, [r0, #16]
   82268:	6143      	str	r3, [r0, #20]
   8226a:	6183      	str	r3, [r0, #24]
   8226c:	4619      	mov	r1, r3
   8226e:	2208      	movs	r2, #8
   82270:	305c      	adds	r0, #92	; 0x5c
   82272:	f7fe fec9 	bl	81008 <memset>
   82276:	4807      	ldr	r0, [pc, #28]	; (82294 <std.isra.0+0x40>)
   82278:	4907      	ldr	r1, [pc, #28]	; (82298 <std.isra.0+0x44>)
   8227a:	4a08      	ldr	r2, [pc, #32]	; (8229c <std.isra.0+0x48>)
   8227c:	4b08      	ldr	r3, [pc, #32]	; (822a0 <std.isra.0+0x4c>)
   8227e:	6220      	str	r0, [r4, #32]
   82280:	61e4      	str	r4, [r4, #28]
   82282:	6261      	str	r1, [r4, #36]	; 0x24
   82284:	62a2      	str	r2, [r4, #40]	; 0x28
   82286:	62e3      	str	r3, [r4, #44]	; 0x2c
   82288:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82290:	f000 bbc4 	b.w	82a1c <__retarget_lock_init_recursive>
   82294:	00083685 	.word	0x00083685
   82298:	000836a9 	.word	0x000836a9
   8229c:	000836e5 	.word	0x000836e5
   822a0:	00083705 	.word	0x00083705

000822a4 <__sinit>:
   822a4:	b510      	push	{r4, lr}
   822a6:	4604      	mov	r4, r0
   822a8:	4814      	ldr	r0, [pc, #80]	; (822fc <__sinit+0x58>)
   822aa:	f000 fbbb 	bl	82a24 <__retarget_lock_acquire_recursive>
   822ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   822b0:	b9fa      	cbnz	r2, 822f2 <__sinit+0x4e>
   822b2:	2003      	movs	r0, #3
   822b4:	4912      	ldr	r1, [pc, #72]	; (82300 <__sinit+0x5c>)
   822b6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   822ba:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   822be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   822c2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   822c6:	63e1      	str	r1, [r4, #60]	; 0x3c
   822c8:	6860      	ldr	r0, [r4, #4]
   822ca:	2104      	movs	r1, #4
   822cc:	f7ff ffc2 	bl	82254 <std.isra.0>
   822d0:	68a0      	ldr	r0, [r4, #8]
   822d2:	2201      	movs	r2, #1
   822d4:	2109      	movs	r1, #9
   822d6:	f7ff ffbd 	bl	82254 <std.isra.0>
   822da:	68e0      	ldr	r0, [r4, #12]
   822dc:	2202      	movs	r2, #2
   822de:	2112      	movs	r1, #18
   822e0:	f7ff ffb8 	bl	82254 <std.isra.0>
   822e4:	2301      	movs	r3, #1
   822e6:	4805      	ldr	r0, [pc, #20]	; (822fc <__sinit+0x58>)
   822e8:	63a3      	str	r3, [r4, #56]	; 0x38
   822ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   822ee:	f000 bb9b 	b.w	82a28 <__retarget_lock_release_recursive>
   822f2:	4802      	ldr	r0, [pc, #8]	; (822fc <__sinit+0x58>)
   822f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   822f8:	f000 bb96 	b.w	82a28 <__retarget_lock_release_recursive>
   822fc:	20070c9c 	.word	0x20070c9c
   82300:	00082249 	.word	0x00082249

00082304 <__sfp_lock_acquire>:
   82304:	4801      	ldr	r0, [pc, #4]	; (8230c <__sfp_lock_acquire+0x8>)
   82306:	f000 bb8d 	b.w	82a24 <__retarget_lock_acquire_recursive>
   8230a:	bf00      	nop
   8230c:	20070cb0 	.word	0x20070cb0

00082310 <__sfp_lock_release>:
   82310:	4801      	ldr	r0, [pc, #4]	; (82318 <__sfp_lock_release+0x8>)
   82312:	f000 bb89 	b.w	82a28 <__retarget_lock_release_recursive>
   82316:	bf00      	nop
   82318:	20070cb0 	.word	0x20070cb0

0008231c <__libc_fini_array>:
   8231c:	b538      	push	{r3, r4, r5, lr}
   8231e:	4c0a      	ldr	r4, [pc, #40]	; (82348 <__libc_fini_array+0x2c>)
   82320:	4d0a      	ldr	r5, [pc, #40]	; (8234c <__libc_fini_array+0x30>)
   82322:	1b64      	subs	r4, r4, r5
   82324:	10a4      	asrs	r4, r4, #2
   82326:	d00a      	beq.n	8233e <__libc_fini_array+0x22>
   82328:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8232c:	3b01      	subs	r3, #1
   8232e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82332:	3c01      	subs	r4, #1
   82334:	f855 3904 	ldr.w	r3, [r5], #-4
   82338:	4798      	blx	r3
   8233a:	2c00      	cmp	r4, #0
   8233c:	d1f9      	bne.n	82332 <__libc_fini_array+0x16>
   8233e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82342:	f001 be4d 	b.w	83fe0 <_fini>
   82346:	bf00      	nop
   82348:	00083ff0 	.word	0x00083ff0
   8234c:	00083fec 	.word	0x00083fec

00082350 <__fputwc>:
   82350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82354:	b083      	sub	sp, #12
   82356:	4607      	mov	r7, r0
   82358:	4688      	mov	r8, r1
   8235a:	4614      	mov	r4, r2
   8235c:	f000 fb50 	bl	82a00 <__locale_mb_cur_max>
   82360:	2801      	cmp	r0, #1
   82362:	d033      	beq.n	823cc <__fputwc+0x7c>
   82364:	4642      	mov	r2, r8
   82366:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8236a:	a901      	add	r1, sp, #4
   8236c:	4638      	mov	r0, r7
   8236e:	f001 fa53 	bl	83818 <_wcrtomb_r>
   82372:	1c42      	adds	r2, r0, #1
   82374:	4606      	mov	r6, r0
   82376:	d022      	beq.n	823be <__fputwc+0x6e>
   82378:	b390      	cbz	r0, 823e0 <__fputwc+0x90>
   8237a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8237e:	2500      	movs	r5, #0
   82380:	f10d 0904 	add.w	r9, sp, #4
   82384:	e008      	b.n	82398 <__fputwc+0x48>
   82386:	6823      	ldr	r3, [r4, #0]
   82388:	1c5a      	adds	r2, r3, #1
   8238a:	6022      	str	r2, [r4, #0]
   8238c:	7019      	strb	r1, [r3, #0]
   8238e:	3501      	adds	r5, #1
   82390:	42b5      	cmp	r5, r6
   82392:	d225      	bcs.n	823e0 <__fputwc+0x90>
   82394:	f815 1009 	ldrb.w	r1, [r5, r9]
   82398:	68a3      	ldr	r3, [r4, #8]
   8239a:	3b01      	subs	r3, #1
   8239c:	2b00      	cmp	r3, #0
   8239e:	60a3      	str	r3, [r4, #8]
   823a0:	daf1      	bge.n	82386 <__fputwc+0x36>
   823a2:	69a2      	ldr	r2, [r4, #24]
   823a4:	4293      	cmp	r3, r2
   823a6:	db01      	blt.n	823ac <__fputwc+0x5c>
   823a8:	290a      	cmp	r1, #10
   823aa:	d1ec      	bne.n	82386 <__fputwc+0x36>
   823ac:	4622      	mov	r2, r4
   823ae:	4638      	mov	r0, r7
   823b0:	f001 f9da 	bl	83768 <__swbuf_r>
   823b4:	1c43      	adds	r3, r0, #1
   823b6:	d1ea      	bne.n	8238e <__fputwc+0x3e>
   823b8:	b003      	add	sp, #12
   823ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   823be:	89a3      	ldrh	r3, [r4, #12]
   823c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823c4:	81a3      	strh	r3, [r4, #12]
   823c6:	b003      	add	sp, #12
   823c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   823cc:	f108 33ff 	add.w	r3, r8, #4294967295
   823d0:	2bfe      	cmp	r3, #254	; 0xfe
   823d2:	d8c7      	bhi.n	82364 <__fputwc+0x14>
   823d4:	fa5f f188 	uxtb.w	r1, r8
   823d8:	4606      	mov	r6, r0
   823da:	f88d 1004 	strb.w	r1, [sp, #4]
   823de:	e7ce      	b.n	8237e <__fputwc+0x2e>
   823e0:	4640      	mov	r0, r8
   823e2:	b003      	add	sp, #12
   823e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000823e8 <_fputwc_r>:
   823e8:	b530      	push	{r4, r5, lr}
   823ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
   823ec:	4614      	mov	r4, r2
   823ee:	f013 0f01 	tst.w	r3, #1
   823f2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   823f6:	b083      	sub	sp, #12
   823f8:	4605      	mov	r5, r0
   823fa:	b29a      	uxth	r2, r3
   823fc:	d101      	bne.n	82402 <_fputwc_r+0x1a>
   823fe:	0590      	lsls	r0, r2, #22
   82400:	d51c      	bpl.n	8243c <_fputwc_r+0x54>
   82402:	0490      	lsls	r0, r2, #18
   82404:	d406      	bmi.n	82414 <_fputwc_r+0x2c>
   82406:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8240c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82410:	81a3      	strh	r3, [r4, #12]
   82412:	6662      	str	r2, [r4, #100]	; 0x64
   82414:	4628      	mov	r0, r5
   82416:	4622      	mov	r2, r4
   82418:	f7ff ff9a 	bl	82350 <__fputwc>
   8241c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8241e:	4605      	mov	r5, r0
   82420:	07da      	lsls	r2, r3, #31
   82422:	d402      	bmi.n	8242a <_fputwc_r+0x42>
   82424:	89a3      	ldrh	r3, [r4, #12]
   82426:	059b      	lsls	r3, r3, #22
   82428:	d502      	bpl.n	82430 <_fputwc_r+0x48>
   8242a:	4628      	mov	r0, r5
   8242c:	b003      	add	sp, #12
   8242e:	bd30      	pop	{r4, r5, pc}
   82430:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82432:	f000 faf9 	bl	82a28 <__retarget_lock_release_recursive>
   82436:	4628      	mov	r0, r5
   82438:	b003      	add	sp, #12
   8243a:	bd30      	pop	{r4, r5, pc}
   8243c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8243e:	9101      	str	r1, [sp, #4]
   82440:	f000 faf0 	bl	82a24 <__retarget_lock_acquire_recursive>
   82444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82448:	9901      	ldr	r1, [sp, #4]
   8244a:	b29a      	uxth	r2, r3
   8244c:	e7d9      	b.n	82402 <_fputwc_r+0x1a>
   8244e:	bf00      	nop

00082450 <_malloc_trim_r>:
   82450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82452:	460c      	mov	r4, r1
   82454:	4f23      	ldr	r7, [pc, #140]	; (824e4 <_malloc_trim_r+0x94>)
   82456:	4606      	mov	r6, r0
   82458:	f000 ff40 	bl	832dc <__malloc_lock>
   8245c:	68bb      	ldr	r3, [r7, #8]
   8245e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82462:	685d      	ldr	r5, [r3, #4]
   82464:	310f      	adds	r1, #15
   82466:	f025 0503 	bic.w	r5, r5, #3
   8246a:	4429      	add	r1, r5
   8246c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82470:	f021 010f 	bic.w	r1, r1, #15
   82474:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82478:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8247c:	db07      	blt.n	8248e <_malloc_trim_r+0x3e>
   8247e:	2100      	movs	r1, #0
   82480:	4630      	mov	r0, r6
   82482:	f001 f8ed 	bl	83660 <_sbrk_r>
   82486:	68bb      	ldr	r3, [r7, #8]
   82488:	442b      	add	r3, r5
   8248a:	4298      	cmp	r0, r3
   8248c:	d004      	beq.n	82498 <_malloc_trim_r+0x48>
   8248e:	4630      	mov	r0, r6
   82490:	f000 ff2a 	bl	832e8 <__malloc_unlock>
   82494:	2000      	movs	r0, #0
   82496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82498:	4261      	negs	r1, r4
   8249a:	4630      	mov	r0, r6
   8249c:	f001 f8e0 	bl	83660 <_sbrk_r>
   824a0:	3001      	adds	r0, #1
   824a2:	d00d      	beq.n	824c0 <_malloc_trim_r+0x70>
   824a4:	4b10      	ldr	r3, [pc, #64]	; (824e8 <_malloc_trim_r+0x98>)
   824a6:	68ba      	ldr	r2, [r7, #8]
   824a8:	6819      	ldr	r1, [r3, #0]
   824aa:	1b2d      	subs	r5, r5, r4
   824ac:	f045 0501 	orr.w	r5, r5, #1
   824b0:	4630      	mov	r0, r6
   824b2:	1b09      	subs	r1, r1, r4
   824b4:	6055      	str	r5, [r2, #4]
   824b6:	6019      	str	r1, [r3, #0]
   824b8:	f000 ff16 	bl	832e8 <__malloc_unlock>
   824bc:	2001      	movs	r0, #1
   824be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   824c0:	2100      	movs	r1, #0
   824c2:	4630      	mov	r0, r6
   824c4:	f001 f8cc 	bl	83660 <_sbrk_r>
   824c8:	68ba      	ldr	r2, [r7, #8]
   824ca:	1a83      	subs	r3, r0, r2
   824cc:	2b0f      	cmp	r3, #15
   824ce:	ddde      	ble.n	8248e <_malloc_trim_r+0x3e>
   824d0:	4c06      	ldr	r4, [pc, #24]	; (824ec <_malloc_trim_r+0x9c>)
   824d2:	4905      	ldr	r1, [pc, #20]	; (824e8 <_malloc_trim_r+0x98>)
   824d4:	6824      	ldr	r4, [r4, #0]
   824d6:	f043 0301 	orr.w	r3, r3, #1
   824da:	1b00      	subs	r0, r0, r4
   824dc:	6053      	str	r3, [r2, #4]
   824de:	6008      	str	r0, [r1, #0]
   824e0:	e7d5      	b.n	8248e <_malloc_trim_r+0x3e>
   824e2:	bf00      	nop
   824e4:	20070710 	.word	0x20070710
   824e8:	20070c50 	.word	0x20070c50
   824ec:	20070b18 	.word	0x20070b18

000824f0 <_free_r>:
   824f0:	2900      	cmp	r1, #0
   824f2:	d044      	beq.n	8257e <_free_r+0x8e>
   824f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824f8:	460d      	mov	r5, r1
   824fa:	4680      	mov	r8, r0
   824fc:	f000 feee 	bl	832dc <__malloc_lock>
   82500:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82504:	4969      	ldr	r1, [pc, #420]	; (826ac <_free_r+0x1bc>)
   82506:	f1a5 0408 	sub.w	r4, r5, #8
   8250a:	f027 0301 	bic.w	r3, r7, #1
   8250e:	18e2      	adds	r2, r4, r3
   82510:	688e      	ldr	r6, [r1, #8]
   82512:	6850      	ldr	r0, [r2, #4]
   82514:	42b2      	cmp	r2, r6
   82516:	f020 0003 	bic.w	r0, r0, #3
   8251a:	d05e      	beq.n	825da <_free_r+0xea>
   8251c:	07fe      	lsls	r6, r7, #31
   8251e:	6050      	str	r0, [r2, #4]
   82520:	d40b      	bmi.n	8253a <_free_r+0x4a>
   82522:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82526:	f101 0e08 	add.w	lr, r1, #8
   8252a:	1be4      	subs	r4, r4, r7
   8252c:	68a5      	ldr	r5, [r4, #8]
   8252e:	443b      	add	r3, r7
   82530:	4575      	cmp	r5, lr
   82532:	d06d      	beq.n	82610 <_free_r+0x120>
   82534:	68e7      	ldr	r7, [r4, #12]
   82536:	60ef      	str	r7, [r5, #12]
   82538:	60bd      	str	r5, [r7, #8]
   8253a:	1815      	adds	r5, r2, r0
   8253c:	686d      	ldr	r5, [r5, #4]
   8253e:	07ed      	lsls	r5, r5, #31
   82540:	d53e      	bpl.n	825c0 <_free_r+0xd0>
   82542:	f043 0201 	orr.w	r2, r3, #1
   82546:	6062      	str	r2, [r4, #4]
   82548:	50e3      	str	r3, [r4, r3]
   8254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8254e:	d217      	bcs.n	82580 <_free_r+0x90>
   82550:	2201      	movs	r2, #1
   82552:	08db      	lsrs	r3, r3, #3
   82554:	1098      	asrs	r0, r3, #2
   82556:	684d      	ldr	r5, [r1, #4]
   82558:	4413      	add	r3, r2
   8255a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8255e:	4082      	lsls	r2, r0
   82560:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82564:	432a      	orrs	r2, r5
   82566:	3808      	subs	r0, #8
   82568:	60e0      	str	r0, [r4, #12]
   8256a:	60a7      	str	r7, [r4, #8]
   8256c:	604a      	str	r2, [r1, #4]
   8256e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82572:	60fc      	str	r4, [r7, #12]
   82574:	4640      	mov	r0, r8
   82576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8257a:	f000 beb5 	b.w	832e8 <__malloc_unlock>
   8257e:	4770      	bx	lr
   82580:	0a5a      	lsrs	r2, r3, #9
   82582:	2a04      	cmp	r2, #4
   82584:	d852      	bhi.n	8262c <_free_r+0x13c>
   82586:	099a      	lsrs	r2, r3, #6
   82588:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8258c:	00ff      	lsls	r7, r7, #3
   8258e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82592:	19c8      	adds	r0, r1, r7
   82594:	59ca      	ldr	r2, [r1, r7]
   82596:	3808      	subs	r0, #8
   82598:	4290      	cmp	r0, r2
   8259a:	d04f      	beq.n	8263c <_free_r+0x14c>
   8259c:	6851      	ldr	r1, [r2, #4]
   8259e:	f021 0103 	bic.w	r1, r1, #3
   825a2:	428b      	cmp	r3, r1
   825a4:	d232      	bcs.n	8260c <_free_r+0x11c>
   825a6:	6892      	ldr	r2, [r2, #8]
   825a8:	4290      	cmp	r0, r2
   825aa:	d1f7      	bne.n	8259c <_free_r+0xac>
   825ac:	68c3      	ldr	r3, [r0, #12]
   825ae:	60a0      	str	r0, [r4, #8]
   825b0:	60e3      	str	r3, [r4, #12]
   825b2:	609c      	str	r4, [r3, #8]
   825b4:	60c4      	str	r4, [r0, #12]
   825b6:	4640      	mov	r0, r8
   825b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   825bc:	f000 be94 	b.w	832e8 <__malloc_unlock>
   825c0:	6895      	ldr	r5, [r2, #8]
   825c2:	4f3b      	ldr	r7, [pc, #236]	; (826b0 <_free_r+0x1c0>)
   825c4:	4403      	add	r3, r0
   825c6:	42bd      	cmp	r5, r7
   825c8:	d040      	beq.n	8264c <_free_r+0x15c>
   825ca:	68d0      	ldr	r0, [r2, #12]
   825cc:	f043 0201 	orr.w	r2, r3, #1
   825d0:	60e8      	str	r0, [r5, #12]
   825d2:	6085      	str	r5, [r0, #8]
   825d4:	6062      	str	r2, [r4, #4]
   825d6:	50e3      	str	r3, [r4, r3]
   825d8:	e7b7      	b.n	8254a <_free_r+0x5a>
   825da:	07ff      	lsls	r7, r7, #31
   825dc:	4403      	add	r3, r0
   825de:	d407      	bmi.n	825f0 <_free_r+0x100>
   825e0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   825e4:	1b64      	subs	r4, r4, r5
   825e6:	68e2      	ldr	r2, [r4, #12]
   825e8:	68a0      	ldr	r0, [r4, #8]
   825ea:	442b      	add	r3, r5
   825ec:	60c2      	str	r2, [r0, #12]
   825ee:	6090      	str	r0, [r2, #8]
   825f0:	4a30      	ldr	r2, [pc, #192]	; (826b4 <_free_r+0x1c4>)
   825f2:	f043 0001 	orr.w	r0, r3, #1
   825f6:	6812      	ldr	r2, [r2, #0]
   825f8:	6060      	str	r0, [r4, #4]
   825fa:	4293      	cmp	r3, r2
   825fc:	608c      	str	r4, [r1, #8]
   825fe:	d3b9      	bcc.n	82574 <_free_r+0x84>
   82600:	4b2d      	ldr	r3, [pc, #180]	; (826b8 <_free_r+0x1c8>)
   82602:	4640      	mov	r0, r8
   82604:	6819      	ldr	r1, [r3, #0]
   82606:	f7ff ff23 	bl	82450 <_malloc_trim_r>
   8260a:	e7b3      	b.n	82574 <_free_r+0x84>
   8260c:	4610      	mov	r0, r2
   8260e:	e7cd      	b.n	825ac <_free_r+0xbc>
   82610:	1811      	adds	r1, r2, r0
   82612:	6849      	ldr	r1, [r1, #4]
   82614:	07c9      	lsls	r1, r1, #31
   82616:	d444      	bmi.n	826a2 <_free_r+0x1b2>
   82618:	6891      	ldr	r1, [r2, #8]
   8261a:	4403      	add	r3, r0
   8261c:	68d2      	ldr	r2, [r2, #12]
   8261e:	f043 0001 	orr.w	r0, r3, #1
   82622:	60ca      	str	r2, [r1, #12]
   82624:	6091      	str	r1, [r2, #8]
   82626:	6060      	str	r0, [r4, #4]
   82628:	50e3      	str	r3, [r4, r3]
   8262a:	e7a3      	b.n	82574 <_free_r+0x84>
   8262c:	2a14      	cmp	r2, #20
   8262e:	d816      	bhi.n	8265e <_free_r+0x16e>
   82630:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82634:	00ff      	lsls	r7, r7, #3
   82636:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8263a:	e7aa      	b.n	82592 <_free_r+0xa2>
   8263c:	2301      	movs	r3, #1
   8263e:	10aa      	asrs	r2, r5, #2
   82640:	684d      	ldr	r5, [r1, #4]
   82642:	4093      	lsls	r3, r2
   82644:	432b      	orrs	r3, r5
   82646:	604b      	str	r3, [r1, #4]
   82648:	4603      	mov	r3, r0
   8264a:	e7b0      	b.n	825ae <_free_r+0xbe>
   8264c:	f043 0201 	orr.w	r2, r3, #1
   82650:	614c      	str	r4, [r1, #20]
   82652:	610c      	str	r4, [r1, #16]
   82654:	60e5      	str	r5, [r4, #12]
   82656:	60a5      	str	r5, [r4, #8]
   82658:	6062      	str	r2, [r4, #4]
   8265a:	50e3      	str	r3, [r4, r3]
   8265c:	e78a      	b.n	82574 <_free_r+0x84>
   8265e:	2a54      	cmp	r2, #84	; 0x54
   82660:	d806      	bhi.n	82670 <_free_r+0x180>
   82662:	0b1a      	lsrs	r2, r3, #12
   82664:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82668:	00ff      	lsls	r7, r7, #3
   8266a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8266e:	e790      	b.n	82592 <_free_r+0xa2>
   82670:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82674:	d806      	bhi.n	82684 <_free_r+0x194>
   82676:	0bda      	lsrs	r2, r3, #15
   82678:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8267c:	00ff      	lsls	r7, r7, #3
   8267e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82682:	e786      	b.n	82592 <_free_r+0xa2>
   82684:	f240 5054 	movw	r0, #1364	; 0x554
   82688:	4282      	cmp	r2, r0
   8268a:	d806      	bhi.n	8269a <_free_r+0x1aa>
   8268c:	0c9a      	lsrs	r2, r3, #18
   8268e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82692:	00ff      	lsls	r7, r7, #3
   82694:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82698:	e77b      	b.n	82592 <_free_r+0xa2>
   8269a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8269e:	257e      	movs	r5, #126	; 0x7e
   826a0:	e777      	b.n	82592 <_free_r+0xa2>
   826a2:	f043 0101 	orr.w	r1, r3, #1
   826a6:	6061      	str	r1, [r4, #4]
   826a8:	6013      	str	r3, [r2, #0]
   826aa:	e763      	b.n	82574 <_free_r+0x84>
   826ac:	20070710 	.word	0x20070710
   826b0:	20070718 	.word	0x20070718
   826b4:	20070b1c 	.word	0x20070b1c
   826b8:	20070c80 	.word	0x20070c80

000826bc <__sfvwrite_r>:
   826bc:	6893      	ldr	r3, [r2, #8]
   826be:	2b00      	cmp	r3, #0
   826c0:	d071      	beq.n	827a6 <__sfvwrite_r+0xea>
   826c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826c6:	898b      	ldrh	r3, [r1, #12]
   826c8:	b083      	sub	sp, #12
   826ca:	460c      	mov	r4, r1
   826cc:	0719      	lsls	r1, r3, #28
   826ce:	9000      	str	r0, [sp, #0]
   826d0:	4616      	mov	r6, r2
   826d2:	d525      	bpl.n	82720 <__sfvwrite_r+0x64>
   826d4:	6922      	ldr	r2, [r4, #16]
   826d6:	b31a      	cbz	r2, 82720 <__sfvwrite_r+0x64>
   826d8:	f013 0002 	ands.w	r0, r3, #2
   826dc:	6835      	ldr	r5, [r6, #0]
   826de:	d02b      	beq.n	82738 <__sfvwrite_r+0x7c>
   826e0:	f04f 0900 	mov.w	r9, #0
   826e4:	46b0      	mov	r8, r6
   826e6:	464f      	mov	r7, r9
   826e8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 829ac <__sfvwrite_r+0x2f0>
   826ec:	2f00      	cmp	r7, #0
   826ee:	d055      	beq.n	8279c <__sfvwrite_r+0xe0>
   826f0:	4557      	cmp	r7, sl
   826f2:	463b      	mov	r3, r7
   826f4:	464a      	mov	r2, r9
   826f6:	bf28      	it	cs
   826f8:	4653      	movcs	r3, sl
   826fa:	69e1      	ldr	r1, [r4, #28]
   826fc:	9800      	ldr	r0, [sp, #0]
   826fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82700:	47b0      	blx	r6
   82702:	2800      	cmp	r0, #0
   82704:	dd56      	ble.n	827b4 <__sfvwrite_r+0xf8>
   82706:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8270a:	4481      	add	r9, r0
   8270c:	1a1b      	subs	r3, r3, r0
   8270e:	1a3f      	subs	r7, r7, r0
   82710:	f8c8 3008 	str.w	r3, [r8, #8]
   82714:	2b00      	cmp	r3, #0
   82716:	d1e9      	bne.n	826ec <__sfvwrite_r+0x30>
   82718:	2000      	movs	r0, #0
   8271a:	b003      	add	sp, #12
   8271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82720:	4621      	mov	r1, r4
   82722:	9800      	ldr	r0, [sp, #0]
   82724:	f7ff fc56 	bl	81fd4 <__swsetup_r>
   82728:	2800      	cmp	r0, #0
   8272a:	f040 8135 	bne.w	82998 <__sfvwrite_r+0x2dc>
   8272e:	89a3      	ldrh	r3, [r4, #12]
   82730:	6835      	ldr	r5, [r6, #0]
   82732:	f013 0002 	ands.w	r0, r3, #2
   82736:	d1d3      	bne.n	826e0 <__sfvwrite_r+0x24>
   82738:	f013 0901 	ands.w	r9, r3, #1
   8273c:	d144      	bne.n	827c8 <__sfvwrite_r+0x10c>
   8273e:	464f      	mov	r7, r9
   82740:	9601      	str	r6, [sp, #4]
   82742:	b337      	cbz	r7, 82792 <__sfvwrite_r+0xd6>
   82744:	059a      	lsls	r2, r3, #22
   82746:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8274a:	f140 8085 	bpl.w	82858 <__sfvwrite_r+0x19c>
   8274e:	4547      	cmp	r7, r8
   82750:	46c3      	mov	fp, r8
   82752:	f0c0 80ad 	bcc.w	828b0 <__sfvwrite_r+0x1f4>
   82756:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8275a:	f040 80ae 	bne.w	828ba <__sfvwrite_r+0x1fe>
   8275e:	46ba      	mov	sl, r7
   82760:	6820      	ldr	r0, [r4, #0]
   82762:	465a      	mov	r2, fp
   82764:	4649      	mov	r1, r9
   82766:	f000 fd55 	bl	83214 <memmove>
   8276a:	68a2      	ldr	r2, [r4, #8]
   8276c:	6823      	ldr	r3, [r4, #0]
   8276e:	eba2 0208 	sub.w	r2, r2, r8
   82772:	445b      	add	r3, fp
   82774:	60a2      	str	r2, [r4, #8]
   82776:	6023      	str	r3, [r4, #0]
   82778:	9a01      	ldr	r2, [sp, #4]
   8277a:	44d1      	add	r9, sl
   8277c:	6893      	ldr	r3, [r2, #8]
   8277e:	eba7 070a 	sub.w	r7, r7, sl
   82782:	eba3 030a 	sub.w	r3, r3, sl
   82786:	6093      	str	r3, [r2, #8]
   82788:	2b00      	cmp	r3, #0
   8278a:	d0c5      	beq.n	82718 <__sfvwrite_r+0x5c>
   8278c:	89a3      	ldrh	r3, [r4, #12]
   8278e:	2f00      	cmp	r7, #0
   82790:	d1d8      	bne.n	82744 <__sfvwrite_r+0x88>
   82792:	f8d5 9000 	ldr.w	r9, [r5]
   82796:	686f      	ldr	r7, [r5, #4]
   82798:	3508      	adds	r5, #8
   8279a:	e7d2      	b.n	82742 <__sfvwrite_r+0x86>
   8279c:	f8d5 9000 	ldr.w	r9, [r5]
   827a0:	686f      	ldr	r7, [r5, #4]
   827a2:	3508      	adds	r5, #8
   827a4:	e7a2      	b.n	826ec <__sfvwrite_r+0x30>
   827a6:	2000      	movs	r0, #0
   827a8:	4770      	bx	lr
   827aa:	4621      	mov	r1, r4
   827ac:	9800      	ldr	r0, [sp, #0]
   827ae:	f7ff fd21 	bl	821f4 <_fflush_r>
   827b2:	b378      	cbz	r0, 82814 <__sfvwrite_r+0x158>
   827b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   827b8:	f04f 30ff 	mov.w	r0, #4294967295
   827bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827c0:	81a3      	strh	r3, [r4, #12]
   827c2:	b003      	add	sp, #12
   827c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827c8:	4681      	mov	r9, r0
   827ca:	4633      	mov	r3, r6
   827cc:	464e      	mov	r6, r9
   827ce:	46a8      	mov	r8, r5
   827d0:	469a      	mov	sl, r3
   827d2:	464d      	mov	r5, r9
   827d4:	b356      	cbz	r6, 8282c <__sfvwrite_r+0x170>
   827d6:	2800      	cmp	r0, #0
   827d8:	d032      	beq.n	82840 <__sfvwrite_r+0x184>
   827da:	45b1      	cmp	r9, r6
   827dc:	46cb      	mov	fp, r9
   827de:	bf28      	it	cs
   827e0:	46b3      	movcs	fp, r6
   827e2:	6820      	ldr	r0, [r4, #0]
   827e4:	6923      	ldr	r3, [r4, #16]
   827e6:	465f      	mov	r7, fp
   827e8:	4298      	cmp	r0, r3
   827ea:	6962      	ldr	r2, [r4, #20]
   827ec:	d904      	bls.n	827f8 <__sfvwrite_r+0x13c>
   827ee:	68a3      	ldr	r3, [r4, #8]
   827f0:	4413      	add	r3, r2
   827f2:	459b      	cmp	fp, r3
   827f4:	f300 80a8 	bgt.w	82948 <__sfvwrite_r+0x28c>
   827f8:	4593      	cmp	fp, r2
   827fa:	db4d      	blt.n	82898 <__sfvwrite_r+0x1dc>
   827fc:	4613      	mov	r3, r2
   827fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82800:	462a      	mov	r2, r5
   82802:	69e1      	ldr	r1, [r4, #28]
   82804:	9800      	ldr	r0, [sp, #0]
   82806:	47b8      	blx	r7
   82808:	1e07      	subs	r7, r0, #0
   8280a:	ddd3      	ble.n	827b4 <__sfvwrite_r+0xf8>
   8280c:	ebb9 0907 	subs.w	r9, r9, r7
   82810:	d0cb      	beq.n	827aa <__sfvwrite_r+0xee>
   82812:	2001      	movs	r0, #1
   82814:	f8da 3008 	ldr.w	r3, [sl, #8]
   82818:	443d      	add	r5, r7
   8281a:	1bdb      	subs	r3, r3, r7
   8281c:	1bf6      	subs	r6, r6, r7
   8281e:	f8ca 3008 	str.w	r3, [sl, #8]
   82822:	2b00      	cmp	r3, #0
   82824:	f43f af78 	beq.w	82718 <__sfvwrite_r+0x5c>
   82828:	2e00      	cmp	r6, #0
   8282a:	d1d4      	bne.n	827d6 <__sfvwrite_r+0x11a>
   8282c:	f108 0308 	add.w	r3, r8, #8
   82830:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82834:	4698      	mov	r8, r3
   82836:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8283a:	3308      	adds	r3, #8
   8283c:	2e00      	cmp	r6, #0
   8283e:	d0f7      	beq.n	82830 <__sfvwrite_r+0x174>
   82840:	4632      	mov	r2, r6
   82842:	210a      	movs	r1, #10
   82844:	4628      	mov	r0, r5
   82846:	f000 fc29 	bl	8309c <memchr>
   8284a:	2800      	cmp	r0, #0
   8284c:	f000 80a1 	beq.w	82992 <__sfvwrite_r+0x2d6>
   82850:	3001      	adds	r0, #1
   82852:	eba0 0905 	sub.w	r9, r0, r5
   82856:	e7c0      	b.n	827da <__sfvwrite_r+0x11e>
   82858:	6820      	ldr	r0, [r4, #0]
   8285a:	6923      	ldr	r3, [r4, #16]
   8285c:	4298      	cmp	r0, r3
   8285e:	d802      	bhi.n	82866 <__sfvwrite_r+0x1aa>
   82860:	6963      	ldr	r3, [r4, #20]
   82862:	429f      	cmp	r7, r3
   82864:	d25d      	bcs.n	82922 <__sfvwrite_r+0x266>
   82866:	45b8      	cmp	r8, r7
   82868:	bf28      	it	cs
   8286a:	46b8      	movcs	r8, r7
   8286c:	4649      	mov	r1, r9
   8286e:	4642      	mov	r2, r8
   82870:	f000 fcd0 	bl	83214 <memmove>
   82874:	68a3      	ldr	r3, [r4, #8]
   82876:	6822      	ldr	r2, [r4, #0]
   82878:	eba3 0308 	sub.w	r3, r3, r8
   8287c:	4442      	add	r2, r8
   8287e:	60a3      	str	r3, [r4, #8]
   82880:	6022      	str	r2, [r4, #0]
   82882:	b10b      	cbz	r3, 82888 <__sfvwrite_r+0x1cc>
   82884:	46c2      	mov	sl, r8
   82886:	e777      	b.n	82778 <__sfvwrite_r+0xbc>
   82888:	4621      	mov	r1, r4
   8288a:	9800      	ldr	r0, [sp, #0]
   8288c:	f7ff fcb2 	bl	821f4 <_fflush_r>
   82890:	2800      	cmp	r0, #0
   82892:	d18f      	bne.n	827b4 <__sfvwrite_r+0xf8>
   82894:	46c2      	mov	sl, r8
   82896:	e76f      	b.n	82778 <__sfvwrite_r+0xbc>
   82898:	465a      	mov	r2, fp
   8289a:	4629      	mov	r1, r5
   8289c:	f000 fcba 	bl	83214 <memmove>
   828a0:	68a2      	ldr	r2, [r4, #8]
   828a2:	6823      	ldr	r3, [r4, #0]
   828a4:	eba2 020b 	sub.w	r2, r2, fp
   828a8:	445b      	add	r3, fp
   828aa:	60a2      	str	r2, [r4, #8]
   828ac:	6023      	str	r3, [r4, #0]
   828ae:	e7ad      	b.n	8280c <__sfvwrite_r+0x150>
   828b0:	46b8      	mov	r8, r7
   828b2:	46ba      	mov	sl, r7
   828b4:	46bb      	mov	fp, r7
   828b6:	6820      	ldr	r0, [r4, #0]
   828b8:	e753      	b.n	82762 <__sfvwrite_r+0xa6>
   828ba:	6962      	ldr	r2, [r4, #20]
   828bc:	6820      	ldr	r0, [r4, #0]
   828be:	6921      	ldr	r1, [r4, #16]
   828c0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   828c4:	eba0 0a01 	sub.w	sl, r0, r1
   828c8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   828cc:	f10a 0001 	add.w	r0, sl, #1
   828d0:	ea4f 0868 	mov.w	r8, r8, asr #1
   828d4:	4438      	add	r0, r7
   828d6:	4540      	cmp	r0, r8
   828d8:	4642      	mov	r2, r8
   828da:	bf84      	itt	hi
   828dc:	4680      	movhi	r8, r0
   828de:	4642      	movhi	r2, r8
   828e0:	055b      	lsls	r3, r3, #21
   828e2:	d544      	bpl.n	8296e <__sfvwrite_r+0x2b2>
   828e4:	4611      	mov	r1, r2
   828e6:	9800      	ldr	r0, [sp, #0]
   828e8:	f000 f920 	bl	82b2c <_malloc_r>
   828ec:	4683      	mov	fp, r0
   828ee:	2800      	cmp	r0, #0
   828f0:	d055      	beq.n	8299e <__sfvwrite_r+0x2e2>
   828f2:	4652      	mov	r2, sl
   828f4:	6921      	ldr	r1, [r4, #16]
   828f6:	f000 fc17 	bl	83128 <memcpy>
   828fa:	89a3      	ldrh	r3, [r4, #12]
   828fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82904:	81a3      	strh	r3, [r4, #12]
   82906:	eb0b 000a 	add.w	r0, fp, sl
   8290a:	eba8 030a 	sub.w	r3, r8, sl
   8290e:	f8c4 b010 	str.w	fp, [r4, #16]
   82912:	f8c4 8014 	str.w	r8, [r4, #20]
   82916:	6020      	str	r0, [r4, #0]
   82918:	60a3      	str	r3, [r4, #8]
   8291a:	46b8      	mov	r8, r7
   8291c:	46ba      	mov	sl, r7
   8291e:	46bb      	mov	fp, r7
   82920:	e71f      	b.n	82762 <__sfvwrite_r+0xa6>
   82922:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82926:	42ba      	cmp	r2, r7
   82928:	bf28      	it	cs
   8292a:	463a      	movcs	r2, r7
   8292c:	fb92 f2f3 	sdiv	r2, r2, r3
   82930:	69e1      	ldr	r1, [r4, #28]
   82932:	fb03 f302 	mul.w	r3, r3, r2
   82936:	9800      	ldr	r0, [sp, #0]
   82938:	464a      	mov	r2, r9
   8293a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8293c:	47b0      	blx	r6
   8293e:	f1b0 0a00 	subs.w	sl, r0, #0
   82942:	f73f af19 	bgt.w	82778 <__sfvwrite_r+0xbc>
   82946:	e735      	b.n	827b4 <__sfvwrite_r+0xf8>
   82948:	461a      	mov	r2, r3
   8294a:	4629      	mov	r1, r5
   8294c:	9301      	str	r3, [sp, #4]
   8294e:	f000 fc61 	bl	83214 <memmove>
   82952:	6822      	ldr	r2, [r4, #0]
   82954:	9b01      	ldr	r3, [sp, #4]
   82956:	4621      	mov	r1, r4
   82958:	441a      	add	r2, r3
   8295a:	6022      	str	r2, [r4, #0]
   8295c:	9800      	ldr	r0, [sp, #0]
   8295e:	f7ff fc49 	bl	821f4 <_fflush_r>
   82962:	9b01      	ldr	r3, [sp, #4]
   82964:	2800      	cmp	r0, #0
   82966:	f47f af25 	bne.w	827b4 <__sfvwrite_r+0xf8>
   8296a:	461f      	mov	r7, r3
   8296c:	e74e      	b.n	8280c <__sfvwrite_r+0x150>
   8296e:	9800      	ldr	r0, [sp, #0]
   82970:	f000 fcc0 	bl	832f4 <_realloc_r>
   82974:	4683      	mov	fp, r0
   82976:	2800      	cmp	r0, #0
   82978:	d1c5      	bne.n	82906 <__sfvwrite_r+0x24a>
   8297a:	9d00      	ldr	r5, [sp, #0]
   8297c:	6921      	ldr	r1, [r4, #16]
   8297e:	4628      	mov	r0, r5
   82980:	f7ff fdb6 	bl	824f0 <_free_r>
   82984:	220c      	movs	r2, #12
   82986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8298a:	602a      	str	r2, [r5, #0]
   8298c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82990:	e712      	b.n	827b8 <__sfvwrite_r+0xfc>
   82992:	f106 0901 	add.w	r9, r6, #1
   82996:	e720      	b.n	827da <__sfvwrite_r+0x11e>
   82998:	f04f 30ff 	mov.w	r0, #4294967295
   8299c:	e6bd      	b.n	8271a <__sfvwrite_r+0x5e>
   8299e:	220c      	movs	r2, #12
   829a0:	9900      	ldr	r1, [sp, #0]
   829a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829a6:	600a      	str	r2, [r1, #0]
   829a8:	e706      	b.n	827b8 <__sfvwrite_r+0xfc>
   829aa:	bf00      	nop
   829ac:	7ffffc00 	.word	0x7ffffc00

000829b0 <_fwalk_reent>:
   829b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   829b4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   829b8:	d01e      	beq.n	829f8 <_fwalk_reent+0x48>
   829ba:	4688      	mov	r8, r1
   829bc:	4607      	mov	r7, r0
   829be:	f04f 0900 	mov.w	r9, #0
   829c2:	6875      	ldr	r5, [r6, #4]
   829c4:	68b4      	ldr	r4, [r6, #8]
   829c6:	3d01      	subs	r5, #1
   829c8:	d410      	bmi.n	829ec <_fwalk_reent+0x3c>
   829ca:	89a3      	ldrh	r3, [r4, #12]
   829cc:	3d01      	subs	r5, #1
   829ce:	2b01      	cmp	r3, #1
   829d0:	d908      	bls.n	829e4 <_fwalk_reent+0x34>
   829d2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   829d6:	3301      	adds	r3, #1
   829d8:	d004      	beq.n	829e4 <_fwalk_reent+0x34>
   829da:	4621      	mov	r1, r4
   829dc:	4638      	mov	r0, r7
   829de:	47c0      	blx	r8
   829e0:	ea49 0900 	orr.w	r9, r9, r0
   829e4:	1c6b      	adds	r3, r5, #1
   829e6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   829ea:	d1ee      	bne.n	829ca <_fwalk_reent+0x1a>
   829ec:	6836      	ldr	r6, [r6, #0]
   829ee:	2e00      	cmp	r6, #0
   829f0:	d1e7      	bne.n	829c2 <_fwalk_reent+0x12>
   829f2:	4648      	mov	r0, r9
   829f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829f8:	46b1      	mov	r9, r6
   829fa:	4648      	mov	r0, r9
   829fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082a00 <__locale_mb_cur_max>:
   82a00:	4b04      	ldr	r3, [pc, #16]	; (82a14 <__locale_mb_cur_max+0x14>)
   82a02:	4a05      	ldr	r2, [pc, #20]	; (82a18 <__locale_mb_cur_max+0x18>)
   82a04:	681b      	ldr	r3, [r3, #0]
   82a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82a08:	2b00      	cmp	r3, #0
   82a0a:	bf08      	it	eq
   82a0c:	4613      	moveq	r3, r2
   82a0e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82a12:	4770      	bx	lr
   82a14:	20070174 	.word	0x20070174
   82a18:	200705a4 	.word	0x200705a4

00082a1c <__retarget_lock_init_recursive>:
   82a1c:	4770      	bx	lr
   82a1e:	bf00      	nop

00082a20 <__retarget_lock_close_recursive>:
   82a20:	4770      	bx	lr
   82a22:	bf00      	nop

00082a24 <__retarget_lock_acquire_recursive>:
   82a24:	4770      	bx	lr
   82a26:	bf00      	nop

00082a28 <__retarget_lock_release_recursive>:
   82a28:	4770      	bx	lr
   82a2a:	bf00      	nop

00082a2c <__swhatbuf_r>:
   82a2c:	b570      	push	{r4, r5, r6, lr}
   82a2e:	460c      	mov	r4, r1
   82a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a34:	b090      	sub	sp, #64	; 0x40
   82a36:	2900      	cmp	r1, #0
   82a38:	4615      	mov	r5, r2
   82a3a:	461e      	mov	r6, r3
   82a3c:	db14      	blt.n	82a68 <__swhatbuf_r+0x3c>
   82a3e:	aa01      	add	r2, sp, #4
   82a40:	f001 f80c 	bl	83a5c <_fstat_r>
   82a44:	2800      	cmp	r0, #0
   82a46:	db0f      	blt.n	82a68 <__swhatbuf_r+0x3c>
   82a48:	9a02      	ldr	r2, [sp, #8]
   82a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82a52:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82a56:	fab2 f282 	clz	r2, r2
   82a5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82a5e:	0952      	lsrs	r2, r2, #5
   82a60:	6032      	str	r2, [r6, #0]
   82a62:	602b      	str	r3, [r5, #0]
   82a64:	b010      	add	sp, #64	; 0x40
   82a66:	bd70      	pop	{r4, r5, r6, pc}
   82a68:	2300      	movs	r3, #0
   82a6a:	89a2      	ldrh	r2, [r4, #12]
   82a6c:	6033      	str	r3, [r6, #0]
   82a6e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82a72:	d004      	beq.n	82a7e <__swhatbuf_r+0x52>
   82a74:	2240      	movs	r2, #64	; 0x40
   82a76:	4618      	mov	r0, r3
   82a78:	602a      	str	r2, [r5, #0]
   82a7a:	b010      	add	sp, #64	; 0x40
   82a7c:	bd70      	pop	{r4, r5, r6, pc}
   82a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a82:	602b      	str	r3, [r5, #0]
   82a84:	b010      	add	sp, #64	; 0x40
   82a86:	bd70      	pop	{r4, r5, r6, pc}

00082a88 <__smakebuf_r>:
   82a88:	898a      	ldrh	r2, [r1, #12]
   82a8a:	460b      	mov	r3, r1
   82a8c:	0792      	lsls	r2, r2, #30
   82a8e:	d506      	bpl.n	82a9e <__smakebuf_r+0x16>
   82a90:	2101      	movs	r1, #1
   82a92:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82a96:	6159      	str	r1, [r3, #20]
   82a98:	601a      	str	r2, [r3, #0]
   82a9a:	611a      	str	r2, [r3, #16]
   82a9c:	4770      	bx	lr
   82a9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82aa0:	b083      	sub	sp, #12
   82aa2:	ab01      	add	r3, sp, #4
   82aa4:	466a      	mov	r2, sp
   82aa6:	460c      	mov	r4, r1
   82aa8:	4606      	mov	r6, r0
   82aaa:	f7ff ffbf 	bl	82a2c <__swhatbuf_r>
   82aae:	9900      	ldr	r1, [sp, #0]
   82ab0:	4605      	mov	r5, r0
   82ab2:	4630      	mov	r0, r6
   82ab4:	f000 f83a 	bl	82b2c <_malloc_r>
   82ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82abc:	b1d8      	cbz	r0, 82af6 <__smakebuf_r+0x6e>
   82abe:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82ac2:	4f15      	ldr	r7, [pc, #84]	; (82b18 <__smakebuf_r+0x90>)
   82ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ac8:	63f7      	str	r7, [r6, #60]	; 0x3c
   82aca:	81a3      	strh	r3, [r4, #12]
   82acc:	6020      	str	r0, [r4, #0]
   82ace:	6120      	str	r0, [r4, #16]
   82ad0:	6161      	str	r1, [r4, #20]
   82ad2:	b91a      	cbnz	r2, 82adc <__smakebuf_r+0x54>
   82ad4:	432b      	orrs	r3, r5
   82ad6:	81a3      	strh	r3, [r4, #12]
   82ad8:	b003      	add	sp, #12
   82ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82adc:	4630      	mov	r0, r6
   82ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82ae2:	f000 ffcf 	bl	83a84 <_isatty_r>
   82ae6:	b1a0      	cbz	r0, 82b12 <__smakebuf_r+0x8a>
   82ae8:	89a3      	ldrh	r3, [r4, #12]
   82aea:	f023 0303 	bic.w	r3, r3, #3
   82aee:	f043 0301 	orr.w	r3, r3, #1
   82af2:	b21b      	sxth	r3, r3
   82af4:	e7ee      	b.n	82ad4 <__smakebuf_r+0x4c>
   82af6:	059a      	lsls	r2, r3, #22
   82af8:	d4ee      	bmi.n	82ad8 <__smakebuf_r+0x50>
   82afa:	2101      	movs	r1, #1
   82afc:	f023 0303 	bic.w	r3, r3, #3
   82b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82b04:	f043 0302 	orr.w	r3, r3, #2
   82b08:	81a3      	strh	r3, [r4, #12]
   82b0a:	6161      	str	r1, [r4, #20]
   82b0c:	6022      	str	r2, [r4, #0]
   82b0e:	6122      	str	r2, [r4, #16]
   82b10:	e7e2      	b.n	82ad8 <__smakebuf_r+0x50>
   82b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b16:	e7dd      	b.n	82ad4 <__smakebuf_r+0x4c>
   82b18:	00082249 	.word	0x00082249

00082b1c <malloc>:
   82b1c:	4b02      	ldr	r3, [pc, #8]	; (82b28 <malloc+0xc>)
   82b1e:	4601      	mov	r1, r0
   82b20:	6818      	ldr	r0, [r3, #0]
   82b22:	f000 b803 	b.w	82b2c <_malloc_r>
   82b26:	bf00      	nop
   82b28:	20070174 	.word	0x20070174

00082b2c <_malloc_r>:
   82b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b30:	f101 060b 	add.w	r6, r1, #11
   82b34:	2e16      	cmp	r6, #22
   82b36:	b083      	sub	sp, #12
   82b38:	4605      	mov	r5, r0
   82b3a:	f240 809e 	bls.w	82c7a <_malloc_r+0x14e>
   82b3e:	f036 0607 	bics.w	r6, r6, #7
   82b42:	f100 80bd 	bmi.w	82cc0 <_malloc_r+0x194>
   82b46:	42b1      	cmp	r1, r6
   82b48:	f200 80ba 	bhi.w	82cc0 <_malloc_r+0x194>
   82b4c:	f000 fbc6 	bl	832dc <__malloc_lock>
   82b50:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82b54:	f0c0 8285 	bcc.w	83062 <_malloc_r+0x536>
   82b58:	0a73      	lsrs	r3, r6, #9
   82b5a:	f000 80b8 	beq.w	82cce <_malloc_r+0x1a2>
   82b5e:	2b04      	cmp	r3, #4
   82b60:	f200 816c 	bhi.w	82e3c <_malloc_r+0x310>
   82b64:	09b3      	lsrs	r3, r6, #6
   82b66:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82b6a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82b6e:	00c1      	lsls	r1, r0, #3
   82b70:	4fb8      	ldr	r7, [pc, #736]	; (82e54 <_malloc_r+0x328>)
   82b72:	4439      	add	r1, r7
   82b74:	684c      	ldr	r4, [r1, #4]
   82b76:	3908      	subs	r1, #8
   82b78:	42a1      	cmp	r1, r4
   82b7a:	d106      	bne.n	82b8a <_malloc_r+0x5e>
   82b7c:	e00c      	b.n	82b98 <_malloc_r+0x6c>
   82b7e:	2a00      	cmp	r2, #0
   82b80:	f280 80ab 	bge.w	82cda <_malloc_r+0x1ae>
   82b84:	68e4      	ldr	r4, [r4, #12]
   82b86:	42a1      	cmp	r1, r4
   82b88:	d006      	beq.n	82b98 <_malloc_r+0x6c>
   82b8a:	6863      	ldr	r3, [r4, #4]
   82b8c:	f023 0303 	bic.w	r3, r3, #3
   82b90:	1b9a      	subs	r2, r3, r6
   82b92:	2a0f      	cmp	r2, #15
   82b94:	ddf3      	ble.n	82b7e <_malloc_r+0x52>
   82b96:	4670      	mov	r0, lr
   82b98:	693c      	ldr	r4, [r7, #16]
   82b9a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82e68 <_malloc_r+0x33c>
   82b9e:	4574      	cmp	r4, lr
   82ba0:	f000 819e 	beq.w	82ee0 <_malloc_r+0x3b4>
   82ba4:	6863      	ldr	r3, [r4, #4]
   82ba6:	f023 0303 	bic.w	r3, r3, #3
   82baa:	1b9a      	subs	r2, r3, r6
   82bac:	2a0f      	cmp	r2, #15
   82bae:	f300 8183 	bgt.w	82eb8 <_malloc_r+0x38c>
   82bb2:	2a00      	cmp	r2, #0
   82bb4:	f8c7 e014 	str.w	lr, [r7, #20]
   82bb8:	f8c7 e010 	str.w	lr, [r7, #16]
   82bbc:	f280 8091 	bge.w	82ce2 <_malloc_r+0x1b6>
   82bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82bc4:	f080 8154 	bcs.w	82e70 <_malloc_r+0x344>
   82bc8:	2201      	movs	r2, #1
   82bca:	08db      	lsrs	r3, r3, #3
   82bcc:	6879      	ldr	r1, [r7, #4]
   82bce:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82bd2:	4413      	add	r3, r2
   82bd4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82bd8:	fa02 f20c 	lsl.w	r2, r2, ip
   82bdc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82be0:	430a      	orrs	r2, r1
   82be2:	f1ac 0108 	sub.w	r1, ip, #8
   82be6:	60e1      	str	r1, [r4, #12]
   82be8:	f8c4 8008 	str.w	r8, [r4, #8]
   82bec:	607a      	str	r2, [r7, #4]
   82bee:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82bf2:	f8c8 400c 	str.w	r4, [r8, #12]
   82bf6:	2401      	movs	r4, #1
   82bf8:	1083      	asrs	r3, r0, #2
   82bfa:	409c      	lsls	r4, r3
   82bfc:	4294      	cmp	r4, r2
   82bfe:	d87d      	bhi.n	82cfc <_malloc_r+0x1d0>
   82c00:	4214      	tst	r4, r2
   82c02:	d106      	bne.n	82c12 <_malloc_r+0xe6>
   82c04:	f020 0003 	bic.w	r0, r0, #3
   82c08:	0064      	lsls	r4, r4, #1
   82c0a:	4214      	tst	r4, r2
   82c0c:	f100 0004 	add.w	r0, r0, #4
   82c10:	d0fa      	beq.n	82c08 <_malloc_r+0xdc>
   82c12:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82c16:	46cc      	mov	ip, r9
   82c18:	4680      	mov	r8, r0
   82c1a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82c1e:	459c      	cmp	ip, r3
   82c20:	d107      	bne.n	82c32 <_malloc_r+0x106>
   82c22:	e15f      	b.n	82ee4 <_malloc_r+0x3b8>
   82c24:	2a00      	cmp	r2, #0
   82c26:	f280 816d 	bge.w	82f04 <_malloc_r+0x3d8>
   82c2a:	68db      	ldr	r3, [r3, #12]
   82c2c:	459c      	cmp	ip, r3
   82c2e:	f000 8159 	beq.w	82ee4 <_malloc_r+0x3b8>
   82c32:	6859      	ldr	r1, [r3, #4]
   82c34:	f021 0103 	bic.w	r1, r1, #3
   82c38:	1b8a      	subs	r2, r1, r6
   82c3a:	2a0f      	cmp	r2, #15
   82c3c:	ddf2      	ble.n	82c24 <_malloc_r+0xf8>
   82c3e:	68dc      	ldr	r4, [r3, #12]
   82c40:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82c44:	f046 0801 	orr.w	r8, r6, #1
   82c48:	4628      	mov	r0, r5
   82c4a:	441e      	add	r6, r3
   82c4c:	f042 0501 	orr.w	r5, r2, #1
   82c50:	f8c3 8004 	str.w	r8, [r3, #4]
   82c54:	f8cc 400c 	str.w	r4, [ip, #12]
   82c58:	f8c4 c008 	str.w	ip, [r4, #8]
   82c5c:	617e      	str	r6, [r7, #20]
   82c5e:	613e      	str	r6, [r7, #16]
   82c60:	f8c6 e00c 	str.w	lr, [r6, #12]
   82c64:	f8c6 e008 	str.w	lr, [r6, #8]
   82c68:	6075      	str	r5, [r6, #4]
   82c6a:	505a      	str	r2, [r3, r1]
   82c6c:	9300      	str	r3, [sp, #0]
   82c6e:	f000 fb3b 	bl	832e8 <__malloc_unlock>
   82c72:	9b00      	ldr	r3, [sp, #0]
   82c74:	f103 0408 	add.w	r4, r3, #8
   82c78:	e01e      	b.n	82cb8 <_malloc_r+0x18c>
   82c7a:	2910      	cmp	r1, #16
   82c7c:	d820      	bhi.n	82cc0 <_malloc_r+0x194>
   82c7e:	f000 fb2d 	bl	832dc <__malloc_lock>
   82c82:	2610      	movs	r6, #16
   82c84:	2318      	movs	r3, #24
   82c86:	2002      	movs	r0, #2
   82c88:	4f72      	ldr	r7, [pc, #456]	; (82e54 <_malloc_r+0x328>)
   82c8a:	443b      	add	r3, r7
   82c8c:	685c      	ldr	r4, [r3, #4]
   82c8e:	f1a3 0208 	sub.w	r2, r3, #8
   82c92:	4294      	cmp	r4, r2
   82c94:	f000 812f 	beq.w	82ef6 <_malloc_r+0x3ca>
   82c98:	6863      	ldr	r3, [r4, #4]
   82c9a:	68e1      	ldr	r1, [r4, #12]
   82c9c:	f023 0303 	bic.w	r3, r3, #3
   82ca0:	4423      	add	r3, r4
   82ca2:	685a      	ldr	r2, [r3, #4]
   82ca4:	68a6      	ldr	r6, [r4, #8]
   82ca6:	f042 0201 	orr.w	r2, r2, #1
   82caa:	60f1      	str	r1, [r6, #12]
   82cac:	4628      	mov	r0, r5
   82cae:	608e      	str	r6, [r1, #8]
   82cb0:	605a      	str	r2, [r3, #4]
   82cb2:	f000 fb19 	bl	832e8 <__malloc_unlock>
   82cb6:	3408      	adds	r4, #8
   82cb8:	4620      	mov	r0, r4
   82cba:	b003      	add	sp, #12
   82cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cc0:	2400      	movs	r4, #0
   82cc2:	230c      	movs	r3, #12
   82cc4:	4620      	mov	r0, r4
   82cc6:	602b      	str	r3, [r5, #0]
   82cc8:	b003      	add	sp, #12
   82cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cce:	2040      	movs	r0, #64	; 0x40
   82cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
   82cd4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82cd8:	e74a      	b.n	82b70 <_malloc_r+0x44>
   82cda:	4423      	add	r3, r4
   82cdc:	685a      	ldr	r2, [r3, #4]
   82cde:	68e1      	ldr	r1, [r4, #12]
   82ce0:	e7e0      	b.n	82ca4 <_malloc_r+0x178>
   82ce2:	4423      	add	r3, r4
   82ce4:	685a      	ldr	r2, [r3, #4]
   82ce6:	4628      	mov	r0, r5
   82ce8:	f042 0201 	orr.w	r2, r2, #1
   82cec:	605a      	str	r2, [r3, #4]
   82cee:	3408      	adds	r4, #8
   82cf0:	f000 fafa 	bl	832e8 <__malloc_unlock>
   82cf4:	4620      	mov	r0, r4
   82cf6:	b003      	add	sp, #12
   82cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cfc:	68bc      	ldr	r4, [r7, #8]
   82cfe:	6863      	ldr	r3, [r4, #4]
   82d00:	f023 0803 	bic.w	r8, r3, #3
   82d04:	45b0      	cmp	r8, r6
   82d06:	d304      	bcc.n	82d12 <_malloc_r+0x1e6>
   82d08:	eba8 0306 	sub.w	r3, r8, r6
   82d0c:	2b0f      	cmp	r3, #15
   82d0e:	f300 8085 	bgt.w	82e1c <_malloc_r+0x2f0>
   82d12:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82e6c <_malloc_r+0x340>
   82d16:	4b50      	ldr	r3, [pc, #320]	; (82e58 <_malloc_r+0x32c>)
   82d18:	f8d9 2000 	ldr.w	r2, [r9]
   82d1c:	681b      	ldr	r3, [r3, #0]
   82d1e:	3201      	adds	r2, #1
   82d20:	4433      	add	r3, r6
   82d22:	eb04 0a08 	add.w	sl, r4, r8
   82d26:	f000 8154 	beq.w	82fd2 <_malloc_r+0x4a6>
   82d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82d2e:	330f      	adds	r3, #15
   82d30:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82d34:	f02b 0b0f 	bic.w	fp, fp, #15
   82d38:	4659      	mov	r1, fp
   82d3a:	4628      	mov	r0, r5
   82d3c:	f000 fc90 	bl	83660 <_sbrk_r>
   82d40:	1c41      	adds	r1, r0, #1
   82d42:	4602      	mov	r2, r0
   82d44:	f000 80fb 	beq.w	82f3e <_malloc_r+0x412>
   82d48:	4582      	cmp	sl, r0
   82d4a:	f200 80f6 	bhi.w	82f3a <_malloc_r+0x40e>
   82d4e:	4b43      	ldr	r3, [pc, #268]	; (82e5c <_malloc_r+0x330>)
   82d50:	6819      	ldr	r1, [r3, #0]
   82d52:	4459      	add	r1, fp
   82d54:	6019      	str	r1, [r3, #0]
   82d56:	f000 814c 	beq.w	82ff2 <_malloc_r+0x4c6>
   82d5a:	f8d9 0000 	ldr.w	r0, [r9]
   82d5e:	3001      	adds	r0, #1
   82d60:	bf1b      	ittet	ne
   82d62:	eba2 0a0a 	subne.w	sl, r2, sl
   82d66:	4451      	addne	r1, sl
   82d68:	f8c9 2000 	streq.w	r2, [r9]
   82d6c:	6019      	strne	r1, [r3, #0]
   82d6e:	f012 0107 	ands.w	r1, r2, #7
   82d72:	f000 8114 	beq.w	82f9e <_malloc_r+0x472>
   82d76:	f1c1 0008 	rsb	r0, r1, #8
   82d7a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82d7e:	4402      	add	r2, r0
   82d80:	3108      	adds	r1, #8
   82d82:	eb02 090b 	add.w	r9, r2, fp
   82d86:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82d8a:	eba1 0909 	sub.w	r9, r1, r9
   82d8e:	4649      	mov	r1, r9
   82d90:	4628      	mov	r0, r5
   82d92:	9301      	str	r3, [sp, #4]
   82d94:	9200      	str	r2, [sp, #0]
   82d96:	f000 fc63 	bl	83660 <_sbrk_r>
   82d9a:	1c43      	adds	r3, r0, #1
   82d9c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82da0:	f000 8142 	beq.w	83028 <_malloc_r+0x4fc>
   82da4:	1a80      	subs	r0, r0, r2
   82da6:	4448      	add	r0, r9
   82da8:	f040 0001 	orr.w	r0, r0, #1
   82dac:	6819      	ldr	r1, [r3, #0]
   82dae:	42bc      	cmp	r4, r7
   82db0:	4449      	add	r1, r9
   82db2:	60ba      	str	r2, [r7, #8]
   82db4:	6019      	str	r1, [r3, #0]
   82db6:	6050      	str	r0, [r2, #4]
   82db8:	d017      	beq.n	82dea <_malloc_r+0x2be>
   82dba:	f1b8 0f0f 	cmp.w	r8, #15
   82dbe:	f240 80fa 	bls.w	82fb6 <_malloc_r+0x48a>
   82dc2:	f04f 0c05 	mov.w	ip, #5
   82dc6:	6862      	ldr	r2, [r4, #4]
   82dc8:	f1a8 000c 	sub.w	r0, r8, #12
   82dcc:	f020 0007 	bic.w	r0, r0, #7
   82dd0:	f002 0201 	and.w	r2, r2, #1
   82dd4:	eb04 0e00 	add.w	lr, r4, r0
   82dd8:	4302      	orrs	r2, r0
   82dda:	280f      	cmp	r0, #15
   82ddc:	6062      	str	r2, [r4, #4]
   82dde:	f8ce c004 	str.w	ip, [lr, #4]
   82de2:	f8ce c008 	str.w	ip, [lr, #8]
   82de6:	f200 8116 	bhi.w	83016 <_malloc_r+0x4ea>
   82dea:	4b1d      	ldr	r3, [pc, #116]	; (82e60 <_malloc_r+0x334>)
   82dec:	68bc      	ldr	r4, [r7, #8]
   82dee:	681a      	ldr	r2, [r3, #0]
   82df0:	4291      	cmp	r1, r2
   82df2:	bf88      	it	hi
   82df4:	6019      	strhi	r1, [r3, #0]
   82df6:	4b1b      	ldr	r3, [pc, #108]	; (82e64 <_malloc_r+0x338>)
   82df8:	681a      	ldr	r2, [r3, #0]
   82dfa:	4291      	cmp	r1, r2
   82dfc:	6862      	ldr	r2, [r4, #4]
   82dfe:	bf88      	it	hi
   82e00:	6019      	strhi	r1, [r3, #0]
   82e02:	f022 0203 	bic.w	r2, r2, #3
   82e06:	4296      	cmp	r6, r2
   82e08:	eba2 0306 	sub.w	r3, r2, r6
   82e0c:	d801      	bhi.n	82e12 <_malloc_r+0x2e6>
   82e0e:	2b0f      	cmp	r3, #15
   82e10:	dc04      	bgt.n	82e1c <_malloc_r+0x2f0>
   82e12:	4628      	mov	r0, r5
   82e14:	f000 fa68 	bl	832e8 <__malloc_unlock>
   82e18:	2400      	movs	r4, #0
   82e1a:	e74d      	b.n	82cb8 <_malloc_r+0x18c>
   82e1c:	f046 0201 	orr.w	r2, r6, #1
   82e20:	f043 0301 	orr.w	r3, r3, #1
   82e24:	4426      	add	r6, r4
   82e26:	6062      	str	r2, [r4, #4]
   82e28:	4628      	mov	r0, r5
   82e2a:	60be      	str	r6, [r7, #8]
   82e2c:	3408      	adds	r4, #8
   82e2e:	6073      	str	r3, [r6, #4]
   82e30:	f000 fa5a 	bl	832e8 <__malloc_unlock>
   82e34:	4620      	mov	r0, r4
   82e36:	b003      	add	sp, #12
   82e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e3c:	2b14      	cmp	r3, #20
   82e3e:	d970      	bls.n	82f22 <_malloc_r+0x3f6>
   82e40:	2b54      	cmp	r3, #84	; 0x54
   82e42:	f200 80a2 	bhi.w	82f8a <_malloc_r+0x45e>
   82e46:	0b33      	lsrs	r3, r6, #12
   82e48:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82e4c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82e50:	00c1      	lsls	r1, r0, #3
   82e52:	e68d      	b.n	82b70 <_malloc_r+0x44>
   82e54:	20070710 	.word	0x20070710
   82e58:	20070c80 	.word	0x20070c80
   82e5c:	20070c50 	.word	0x20070c50
   82e60:	20070c78 	.word	0x20070c78
   82e64:	20070c7c 	.word	0x20070c7c
   82e68:	20070718 	.word	0x20070718
   82e6c:	20070b18 	.word	0x20070b18
   82e70:	0a5a      	lsrs	r2, r3, #9
   82e72:	2a04      	cmp	r2, #4
   82e74:	d95b      	bls.n	82f2e <_malloc_r+0x402>
   82e76:	2a14      	cmp	r2, #20
   82e78:	f200 80ae 	bhi.w	82fd8 <_malloc_r+0x4ac>
   82e7c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82e80:	00c9      	lsls	r1, r1, #3
   82e82:	325b      	adds	r2, #91	; 0x5b
   82e84:	eb07 0c01 	add.w	ip, r7, r1
   82e88:	5879      	ldr	r1, [r7, r1]
   82e8a:	f1ac 0c08 	sub.w	ip, ip, #8
   82e8e:	458c      	cmp	ip, r1
   82e90:	f000 8088 	beq.w	82fa4 <_malloc_r+0x478>
   82e94:	684a      	ldr	r2, [r1, #4]
   82e96:	f022 0203 	bic.w	r2, r2, #3
   82e9a:	4293      	cmp	r3, r2
   82e9c:	d273      	bcs.n	82f86 <_malloc_r+0x45a>
   82e9e:	6889      	ldr	r1, [r1, #8]
   82ea0:	458c      	cmp	ip, r1
   82ea2:	d1f7      	bne.n	82e94 <_malloc_r+0x368>
   82ea4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82ea8:	687a      	ldr	r2, [r7, #4]
   82eaa:	60e3      	str	r3, [r4, #12]
   82eac:	f8c4 c008 	str.w	ip, [r4, #8]
   82eb0:	609c      	str	r4, [r3, #8]
   82eb2:	f8cc 400c 	str.w	r4, [ip, #12]
   82eb6:	e69e      	b.n	82bf6 <_malloc_r+0xca>
   82eb8:	f046 0c01 	orr.w	ip, r6, #1
   82ebc:	f042 0101 	orr.w	r1, r2, #1
   82ec0:	4426      	add	r6, r4
   82ec2:	f8c4 c004 	str.w	ip, [r4, #4]
   82ec6:	4628      	mov	r0, r5
   82ec8:	617e      	str	r6, [r7, #20]
   82eca:	613e      	str	r6, [r7, #16]
   82ecc:	f8c6 e00c 	str.w	lr, [r6, #12]
   82ed0:	f8c6 e008 	str.w	lr, [r6, #8]
   82ed4:	6071      	str	r1, [r6, #4]
   82ed6:	50e2      	str	r2, [r4, r3]
   82ed8:	f000 fa06 	bl	832e8 <__malloc_unlock>
   82edc:	3408      	adds	r4, #8
   82ede:	e6eb      	b.n	82cb8 <_malloc_r+0x18c>
   82ee0:	687a      	ldr	r2, [r7, #4]
   82ee2:	e688      	b.n	82bf6 <_malloc_r+0xca>
   82ee4:	f108 0801 	add.w	r8, r8, #1
   82ee8:	f018 0f03 	tst.w	r8, #3
   82eec:	f10c 0c08 	add.w	ip, ip, #8
   82ef0:	f47f ae93 	bne.w	82c1a <_malloc_r+0xee>
   82ef4:	e02d      	b.n	82f52 <_malloc_r+0x426>
   82ef6:	68dc      	ldr	r4, [r3, #12]
   82ef8:	42a3      	cmp	r3, r4
   82efa:	bf08      	it	eq
   82efc:	3002      	addeq	r0, #2
   82efe:	f43f ae4b 	beq.w	82b98 <_malloc_r+0x6c>
   82f02:	e6c9      	b.n	82c98 <_malloc_r+0x16c>
   82f04:	461c      	mov	r4, r3
   82f06:	4419      	add	r1, r3
   82f08:	684a      	ldr	r2, [r1, #4]
   82f0a:	68db      	ldr	r3, [r3, #12]
   82f0c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82f10:	f042 0201 	orr.w	r2, r2, #1
   82f14:	604a      	str	r2, [r1, #4]
   82f16:	4628      	mov	r0, r5
   82f18:	60f3      	str	r3, [r6, #12]
   82f1a:	609e      	str	r6, [r3, #8]
   82f1c:	f000 f9e4 	bl	832e8 <__malloc_unlock>
   82f20:	e6ca      	b.n	82cb8 <_malloc_r+0x18c>
   82f22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82f26:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   82f2a:	00c1      	lsls	r1, r0, #3
   82f2c:	e620      	b.n	82b70 <_malloc_r+0x44>
   82f2e:	099a      	lsrs	r2, r3, #6
   82f30:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82f34:	00c9      	lsls	r1, r1, #3
   82f36:	3238      	adds	r2, #56	; 0x38
   82f38:	e7a4      	b.n	82e84 <_malloc_r+0x358>
   82f3a:	42bc      	cmp	r4, r7
   82f3c:	d054      	beq.n	82fe8 <_malloc_r+0x4bc>
   82f3e:	68bc      	ldr	r4, [r7, #8]
   82f40:	6862      	ldr	r2, [r4, #4]
   82f42:	f022 0203 	bic.w	r2, r2, #3
   82f46:	e75e      	b.n	82e06 <_malloc_r+0x2da>
   82f48:	f859 3908 	ldr.w	r3, [r9], #-8
   82f4c:	4599      	cmp	r9, r3
   82f4e:	f040 8086 	bne.w	8305e <_malloc_r+0x532>
   82f52:	f010 0f03 	tst.w	r0, #3
   82f56:	f100 30ff 	add.w	r0, r0, #4294967295
   82f5a:	d1f5      	bne.n	82f48 <_malloc_r+0x41c>
   82f5c:	687b      	ldr	r3, [r7, #4]
   82f5e:	ea23 0304 	bic.w	r3, r3, r4
   82f62:	607b      	str	r3, [r7, #4]
   82f64:	0064      	lsls	r4, r4, #1
   82f66:	429c      	cmp	r4, r3
   82f68:	f63f aec8 	bhi.w	82cfc <_malloc_r+0x1d0>
   82f6c:	2c00      	cmp	r4, #0
   82f6e:	f43f aec5 	beq.w	82cfc <_malloc_r+0x1d0>
   82f72:	421c      	tst	r4, r3
   82f74:	4640      	mov	r0, r8
   82f76:	f47f ae4c 	bne.w	82c12 <_malloc_r+0xe6>
   82f7a:	0064      	lsls	r4, r4, #1
   82f7c:	421c      	tst	r4, r3
   82f7e:	f100 0004 	add.w	r0, r0, #4
   82f82:	d0fa      	beq.n	82f7a <_malloc_r+0x44e>
   82f84:	e645      	b.n	82c12 <_malloc_r+0xe6>
   82f86:	468c      	mov	ip, r1
   82f88:	e78c      	b.n	82ea4 <_malloc_r+0x378>
   82f8a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f8e:	d815      	bhi.n	82fbc <_malloc_r+0x490>
   82f90:	0bf3      	lsrs	r3, r6, #15
   82f92:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82f96:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   82f9a:	00c1      	lsls	r1, r0, #3
   82f9c:	e5e8      	b.n	82b70 <_malloc_r+0x44>
   82f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82fa2:	e6ee      	b.n	82d82 <_malloc_r+0x256>
   82fa4:	2101      	movs	r1, #1
   82fa6:	687b      	ldr	r3, [r7, #4]
   82fa8:	1092      	asrs	r2, r2, #2
   82faa:	fa01 f202 	lsl.w	r2, r1, r2
   82fae:	431a      	orrs	r2, r3
   82fb0:	607a      	str	r2, [r7, #4]
   82fb2:	4663      	mov	r3, ip
   82fb4:	e779      	b.n	82eaa <_malloc_r+0x37e>
   82fb6:	2301      	movs	r3, #1
   82fb8:	6053      	str	r3, [r2, #4]
   82fba:	e72a      	b.n	82e12 <_malloc_r+0x2e6>
   82fbc:	f240 5254 	movw	r2, #1364	; 0x554
   82fc0:	4293      	cmp	r3, r2
   82fc2:	d822      	bhi.n	8300a <_malloc_r+0x4de>
   82fc4:	0cb3      	lsrs	r3, r6, #18
   82fc6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82fca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82fce:	00c1      	lsls	r1, r0, #3
   82fd0:	e5ce      	b.n	82b70 <_malloc_r+0x44>
   82fd2:	f103 0b10 	add.w	fp, r3, #16
   82fd6:	e6af      	b.n	82d38 <_malloc_r+0x20c>
   82fd8:	2a54      	cmp	r2, #84	; 0x54
   82fda:	d829      	bhi.n	83030 <_malloc_r+0x504>
   82fdc:	0b1a      	lsrs	r2, r3, #12
   82fde:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82fe2:	00c9      	lsls	r1, r1, #3
   82fe4:	326e      	adds	r2, #110	; 0x6e
   82fe6:	e74d      	b.n	82e84 <_malloc_r+0x358>
   82fe8:	4b20      	ldr	r3, [pc, #128]	; (8306c <_malloc_r+0x540>)
   82fea:	6819      	ldr	r1, [r3, #0]
   82fec:	4459      	add	r1, fp
   82fee:	6019      	str	r1, [r3, #0]
   82ff0:	e6b3      	b.n	82d5a <_malloc_r+0x22e>
   82ff2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82ff6:	2800      	cmp	r0, #0
   82ff8:	f47f aeaf 	bne.w	82d5a <_malloc_r+0x22e>
   82ffc:	eb08 030b 	add.w	r3, r8, fp
   83000:	68ba      	ldr	r2, [r7, #8]
   83002:	f043 0301 	orr.w	r3, r3, #1
   83006:	6053      	str	r3, [r2, #4]
   83008:	e6ef      	b.n	82dea <_malloc_r+0x2be>
   8300a:	207f      	movs	r0, #127	; 0x7f
   8300c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83010:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83014:	e5ac      	b.n	82b70 <_malloc_r+0x44>
   83016:	f104 0108 	add.w	r1, r4, #8
   8301a:	4628      	mov	r0, r5
   8301c:	9300      	str	r3, [sp, #0]
   8301e:	f7ff fa67 	bl	824f0 <_free_r>
   83022:	9b00      	ldr	r3, [sp, #0]
   83024:	6819      	ldr	r1, [r3, #0]
   83026:	e6e0      	b.n	82dea <_malloc_r+0x2be>
   83028:	2001      	movs	r0, #1
   8302a:	f04f 0900 	mov.w	r9, #0
   8302e:	e6bd      	b.n	82dac <_malloc_r+0x280>
   83030:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83034:	d805      	bhi.n	83042 <_malloc_r+0x516>
   83036:	0bda      	lsrs	r2, r3, #15
   83038:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8303c:	00c9      	lsls	r1, r1, #3
   8303e:	3277      	adds	r2, #119	; 0x77
   83040:	e720      	b.n	82e84 <_malloc_r+0x358>
   83042:	f240 5154 	movw	r1, #1364	; 0x554
   83046:	428a      	cmp	r2, r1
   83048:	d805      	bhi.n	83056 <_malloc_r+0x52a>
   8304a:	0c9a      	lsrs	r2, r3, #18
   8304c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83050:	00c9      	lsls	r1, r1, #3
   83052:	327c      	adds	r2, #124	; 0x7c
   83054:	e716      	b.n	82e84 <_malloc_r+0x358>
   83056:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8305a:	227e      	movs	r2, #126	; 0x7e
   8305c:	e712      	b.n	82e84 <_malloc_r+0x358>
   8305e:	687b      	ldr	r3, [r7, #4]
   83060:	e780      	b.n	82f64 <_malloc_r+0x438>
   83062:	08f0      	lsrs	r0, r6, #3
   83064:	f106 0308 	add.w	r3, r6, #8
   83068:	e60e      	b.n	82c88 <_malloc_r+0x15c>
   8306a:	bf00      	nop
   8306c:	20070c50 	.word	0x20070c50

00083070 <__ascii_mbtowc>:
   83070:	b082      	sub	sp, #8
   83072:	b149      	cbz	r1, 83088 <__ascii_mbtowc+0x18>
   83074:	b15a      	cbz	r2, 8308e <__ascii_mbtowc+0x1e>
   83076:	b16b      	cbz	r3, 83094 <__ascii_mbtowc+0x24>
   83078:	7813      	ldrb	r3, [r2, #0]
   8307a:	600b      	str	r3, [r1, #0]
   8307c:	7812      	ldrb	r2, [r2, #0]
   8307e:	1c10      	adds	r0, r2, #0
   83080:	bf18      	it	ne
   83082:	2001      	movne	r0, #1
   83084:	b002      	add	sp, #8
   83086:	4770      	bx	lr
   83088:	a901      	add	r1, sp, #4
   8308a:	2a00      	cmp	r2, #0
   8308c:	d1f3      	bne.n	83076 <__ascii_mbtowc+0x6>
   8308e:	4610      	mov	r0, r2
   83090:	b002      	add	sp, #8
   83092:	4770      	bx	lr
   83094:	f06f 0001 	mvn.w	r0, #1
   83098:	e7f4      	b.n	83084 <__ascii_mbtowc+0x14>
   8309a:	bf00      	nop

0008309c <memchr>:
   8309c:	0783      	lsls	r3, r0, #30
   8309e:	b470      	push	{r4, r5, r6}
   830a0:	b2cd      	uxtb	r5, r1
   830a2:	d03d      	beq.n	83120 <memchr+0x84>
   830a4:	1e54      	subs	r4, r2, #1
   830a6:	b30a      	cbz	r2, 830ec <memchr+0x50>
   830a8:	7803      	ldrb	r3, [r0, #0]
   830aa:	42ab      	cmp	r3, r5
   830ac:	d01f      	beq.n	830ee <memchr+0x52>
   830ae:	1c43      	adds	r3, r0, #1
   830b0:	e005      	b.n	830be <memchr+0x22>
   830b2:	f114 34ff 	adds.w	r4, r4, #4294967295
   830b6:	d319      	bcc.n	830ec <memchr+0x50>
   830b8:	7802      	ldrb	r2, [r0, #0]
   830ba:	42aa      	cmp	r2, r5
   830bc:	d017      	beq.n	830ee <memchr+0x52>
   830be:	f013 0f03 	tst.w	r3, #3
   830c2:	4618      	mov	r0, r3
   830c4:	f103 0301 	add.w	r3, r3, #1
   830c8:	d1f3      	bne.n	830b2 <memchr+0x16>
   830ca:	2c03      	cmp	r4, #3
   830cc:	d811      	bhi.n	830f2 <memchr+0x56>
   830ce:	b34c      	cbz	r4, 83124 <memchr+0x88>
   830d0:	7803      	ldrb	r3, [r0, #0]
   830d2:	42ab      	cmp	r3, r5
   830d4:	d00b      	beq.n	830ee <memchr+0x52>
   830d6:	4404      	add	r4, r0
   830d8:	1c43      	adds	r3, r0, #1
   830da:	e002      	b.n	830e2 <memchr+0x46>
   830dc:	7802      	ldrb	r2, [r0, #0]
   830de:	42aa      	cmp	r2, r5
   830e0:	d005      	beq.n	830ee <memchr+0x52>
   830e2:	429c      	cmp	r4, r3
   830e4:	4618      	mov	r0, r3
   830e6:	f103 0301 	add.w	r3, r3, #1
   830ea:	d1f7      	bne.n	830dc <memchr+0x40>
   830ec:	2000      	movs	r0, #0
   830ee:	bc70      	pop	{r4, r5, r6}
   830f0:	4770      	bx	lr
   830f2:	0209      	lsls	r1, r1, #8
   830f4:	b289      	uxth	r1, r1
   830f6:	4329      	orrs	r1, r5
   830f8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   830fc:	6803      	ldr	r3, [r0, #0]
   830fe:	4606      	mov	r6, r0
   83100:	404b      	eors	r3, r1
   83102:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83106:	ea22 0303 	bic.w	r3, r2, r3
   8310a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8310e:	f100 0004 	add.w	r0, r0, #4
   83112:	d103      	bne.n	8311c <memchr+0x80>
   83114:	3c04      	subs	r4, #4
   83116:	2c03      	cmp	r4, #3
   83118:	d8f0      	bhi.n	830fc <memchr+0x60>
   8311a:	e7d8      	b.n	830ce <memchr+0x32>
   8311c:	4630      	mov	r0, r6
   8311e:	e7d7      	b.n	830d0 <memchr+0x34>
   83120:	4614      	mov	r4, r2
   83122:	e7d2      	b.n	830ca <memchr+0x2e>
   83124:	4620      	mov	r0, r4
   83126:	e7e2      	b.n	830ee <memchr+0x52>

00083128 <memcpy>:
   83128:	4684      	mov	ip, r0
   8312a:	ea41 0300 	orr.w	r3, r1, r0
   8312e:	f013 0303 	ands.w	r3, r3, #3
   83132:	d149      	bne.n	831c8 <memcpy+0xa0>
   83134:	3a40      	subs	r2, #64	; 0x40
   83136:	d323      	bcc.n	83180 <memcpy+0x58>
   83138:	680b      	ldr	r3, [r1, #0]
   8313a:	6003      	str	r3, [r0, #0]
   8313c:	684b      	ldr	r3, [r1, #4]
   8313e:	6043      	str	r3, [r0, #4]
   83140:	688b      	ldr	r3, [r1, #8]
   83142:	6083      	str	r3, [r0, #8]
   83144:	68cb      	ldr	r3, [r1, #12]
   83146:	60c3      	str	r3, [r0, #12]
   83148:	690b      	ldr	r3, [r1, #16]
   8314a:	6103      	str	r3, [r0, #16]
   8314c:	694b      	ldr	r3, [r1, #20]
   8314e:	6143      	str	r3, [r0, #20]
   83150:	698b      	ldr	r3, [r1, #24]
   83152:	6183      	str	r3, [r0, #24]
   83154:	69cb      	ldr	r3, [r1, #28]
   83156:	61c3      	str	r3, [r0, #28]
   83158:	6a0b      	ldr	r3, [r1, #32]
   8315a:	6203      	str	r3, [r0, #32]
   8315c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8315e:	6243      	str	r3, [r0, #36]	; 0x24
   83160:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83162:	6283      	str	r3, [r0, #40]	; 0x28
   83164:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83166:	62c3      	str	r3, [r0, #44]	; 0x2c
   83168:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8316a:	6303      	str	r3, [r0, #48]	; 0x30
   8316c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8316e:	6343      	str	r3, [r0, #52]	; 0x34
   83170:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83172:	6383      	str	r3, [r0, #56]	; 0x38
   83174:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83176:	63c3      	str	r3, [r0, #60]	; 0x3c
   83178:	3040      	adds	r0, #64	; 0x40
   8317a:	3140      	adds	r1, #64	; 0x40
   8317c:	3a40      	subs	r2, #64	; 0x40
   8317e:	d2db      	bcs.n	83138 <memcpy+0x10>
   83180:	3230      	adds	r2, #48	; 0x30
   83182:	d30b      	bcc.n	8319c <memcpy+0x74>
   83184:	680b      	ldr	r3, [r1, #0]
   83186:	6003      	str	r3, [r0, #0]
   83188:	684b      	ldr	r3, [r1, #4]
   8318a:	6043      	str	r3, [r0, #4]
   8318c:	688b      	ldr	r3, [r1, #8]
   8318e:	6083      	str	r3, [r0, #8]
   83190:	68cb      	ldr	r3, [r1, #12]
   83192:	60c3      	str	r3, [r0, #12]
   83194:	3010      	adds	r0, #16
   83196:	3110      	adds	r1, #16
   83198:	3a10      	subs	r2, #16
   8319a:	d2f3      	bcs.n	83184 <memcpy+0x5c>
   8319c:	320c      	adds	r2, #12
   8319e:	d305      	bcc.n	831ac <memcpy+0x84>
   831a0:	f851 3b04 	ldr.w	r3, [r1], #4
   831a4:	f840 3b04 	str.w	r3, [r0], #4
   831a8:	3a04      	subs	r2, #4
   831aa:	d2f9      	bcs.n	831a0 <memcpy+0x78>
   831ac:	3204      	adds	r2, #4
   831ae:	d008      	beq.n	831c2 <memcpy+0x9a>
   831b0:	07d2      	lsls	r2, r2, #31
   831b2:	bf1c      	itt	ne
   831b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831b8:	f800 3b01 	strbne.w	r3, [r0], #1
   831bc:	d301      	bcc.n	831c2 <memcpy+0x9a>
   831be:	880b      	ldrh	r3, [r1, #0]
   831c0:	8003      	strh	r3, [r0, #0]
   831c2:	4660      	mov	r0, ip
   831c4:	4770      	bx	lr
   831c6:	bf00      	nop
   831c8:	2a08      	cmp	r2, #8
   831ca:	d313      	bcc.n	831f4 <memcpy+0xcc>
   831cc:	078b      	lsls	r3, r1, #30
   831ce:	d0b1      	beq.n	83134 <memcpy+0xc>
   831d0:	f010 0303 	ands.w	r3, r0, #3
   831d4:	d0ae      	beq.n	83134 <memcpy+0xc>
   831d6:	f1c3 0304 	rsb	r3, r3, #4
   831da:	1ad2      	subs	r2, r2, r3
   831dc:	07db      	lsls	r3, r3, #31
   831de:	bf1c      	itt	ne
   831e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831e4:	f800 3b01 	strbne.w	r3, [r0], #1
   831e8:	d3a4      	bcc.n	83134 <memcpy+0xc>
   831ea:	f831 3b02 	ldrh.w	r3, [r1], #2
   831ee:	f820 3b02 	strh.w	r3, [r0], #2
   831f2:	e79f      	b.n	83134 <memcpy+0xc>
   831f4:	3a04      	subs	r2, #4
   831f6:	d3d9      	bcc.n	831ac <memcpy+0x84>
   831f8:	3a01      	subs	r2, #1
   831fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   831fe:	f800 3b01 	strb.w	r3, [r0], #1
   83202:	d2f9      	bcs.n	831f8 <memcpy+0xd0>
   83204:	780b      	ldrb	r3, [r1, #0]
   83206:	7003      	strb	r3, [r0, #0]
   83208:	784b      	ldrb	r3, [r1, #1]
   8320a:	7043      	strb	r3, [r0, #1]
   8320c:	788b      	ldrb	r3, [r1, #2]
   8320e:	7083      	strb	r3, [r0, #2]
   83210:	4660      	mov	r0, ip
   83212:	4770      	bx	lr

00083214 <memmove>:
   83214:	4288      	cmp	r0, r1
   83216:	b5f0      	push	{r4, r5, r6, r7, lr}
   83218:	d90d      	bls.n	83236 <memmove+0x22>
   8321a:	188b      	adds	r3, r1, r2
   8321c:	4298      	cmp	r0, r3
   8321e:	d20a      	bcs.n	83236 <memmove+0x22>
   83220:	1884      	adds	r4, r0, r2
   83222:	2a00      	cmp	r2, #0
   83224:	d051      	beq.n	832ca <memmove+0xb6>
   83226:	4622      	mov	r2, r4
   83228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8322c:	4299      	cmp	r1, r3
   8322e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83232:	d1f9      	bne.n	83228 <memmove+0x14>
   83234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83236:	2a0f      	cmp	r2, #15
   83238:	d948      	bls.n	832cc <memmove+0xb8>
   8323a:	ea41 0300 	orr.w	r3, r1, r0
   8323e:	079b      	lsls	r3, r3, #30
   83240:	d146      	bne.n	832d0 <memmove+0xbc>
   83242:	4615      	mov	r5, r2
   83244:	f100 0410 	add.w	r4, r0, #16
   83248:	f101 0310 	add.w	r3, r1, #16
   8324c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83250:	3d10      	subs	r5, #16
   83252:	f844 6c10 	str.w	r6, [r4, #-16]
   83256:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8325a:	2d0f      	cmp	r5, #15
   8325c:	f844 6c0c 	str.w	r6, [r4, #-12]
   83260:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83264:	f104 0410 	add.w	r4, r4, #16
   83268:	f844 6c18 	str.w	r6, [r4, #-24]
   8326c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83270:	f103 0310 	add.w	r3, r3, #16
   83274:	f844 6c14 	str.w	r6, [r4, #-20]
   83278:	d8e8      	bhi.n	8324c <memmove+0x38>
   8327a:	f1a2 0310 	sub.w	r3, r2, #16
   8327e:	f023 030f 	bic.w	r3, r3, #15
   83282:	f002 0e0f 	and.w	lr, r2, #15
   83286:	3310      	adds	r3, #16
   83288:	f1be 0f03 	cmp.w	lr, #3
   8328c:	4419      	add	r1, r3
   8328e:	4403      	add	r3, r0
   83290:	d921      	bls.n	832d6 <memmove+0xc2>
   83292:	460e      	mov	r6, r1
   83294:	4674      	mov	r4, lr
   83296:	1f1d      	subs	r5, r3, #4
   83298:	f856 7b04 	ldr.w	r7, [r6], #4
   8329c:	3c04      	subs	r4, #4
   8329e:	2c03      	cmp	r4, #3
   832a0:	f845 7f04 	str.w	r7, [r5, #4]!
   832a4:	d8f8      	bhi.n	83298 <memmove+0x84>
   832a6:	f1ae 0404 	sub.w	r4, lr, #4
   832aa:	f024 0403 	bic.w	r4, r4, #3
   832ae:	3404      	adds	r4, #4
   832b0:	4421      	add	r1, r4
   832b2:	4423      	add	r3, r4
   832b4:	f002 0203 	and.w	r2, r2, #3
   832b8:	b162      	cbz	r2, 832d4 <memmove+0xc0>
   832ba:	3b01      	subs	r3, #1
   832bc:	440a      	add	r2, r1
   832be:	f811 4b01 	ldrb.w	r4, [r1], #1
   832c2:	428a      	cmp	r2, r1
   832c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   832c8:	d1f9      	bne.n	832be <memmove+0xaa>
   832ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832cc:	4603      	mov	r3, r0
   832ce:	e7f3      	b.n	832b8 <memmove+0xa4>
   832d0:	4603      	mov	r3, r0
   832d2:	e7f2      	b.n	832ba <memmove+0xa6>
   832d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832d6:	4672      	mov	r2, lr
   832d8:	e7ee      	b.n	832b8 <memmove+0xa4>
   832da:	bf00      	nop

000832dc <__malloc_lock>:
   832dc:	4801      	ldr	r0, [pc, #4]	; (832e4 <__malloc_lock+0x8>)
   832de:	f7ff bba1 	b.w	82a24 <__retarget_lock_acquire_recursive>
   832e2:	bf00      	nop
   832e4:	20070ca0 	.word	0x20070ca0

000832e8 <__malloc_unlock>:
   832e8:	4801      	ldr	r0, [pc, #4]	; (832f0 <__malloc_unlock+0x8>)
   832ea:	f7ff bb9d 	b.w	82a28 <__retarget_lock_release_recursive>
   832ee:	bf00      	nop
   832f0:	20070ca0 	.word	0x20070ca0

000832f4 <_realloc_r>:
   832f4:	2900      	cmp	r1, #0
   832f6:	f000 8094 	beq.w	83422 <_realloc_r+0x12e>
   832fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832fe:	460c      	mov	r4, r1
   83300:	4615      	mov	r5, r2
   83302:	b083      	sub	sp, #12
   83304:	4680      	mov	r8, r0
   83306:	f105 060b 	add.w	r6, r5, #11
   8330a:	f7ff ffe7 	bl	832dc <__malloc_lock>
   8330e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83312:	2e16      	cmp	r6, #22
   83314:	f02e 0703 	bic.w	r7, lr, #3
   83318:	f1a4 0908 	sub.w	r9, r4, #8
   8331c:	d83c      	bhi.n	83398 <_realloc_r+0xa4>
   8331e:	2210      	movs	r2, #16
   83320:	4616      	mov	r6, r2
   83322:	42b5      	cmp	r5, r6
   83324:	d83d      	bhi.n	833a2 <_realloc_r+0xae>
   83326:	4297      	cmp	r7, r2
   83328:	da43      	bge.n	833b2 <_realloc_r+0xbe>
   8332a:	4bc6      	ldr	r3, [pc, #792]	; (83644 <_realloc_r+0x350>)
   8332c:	eb09 0007 	add.w	r0, r9, r7
   83330:	6899      	ldr	r1, [r3, #8]
   83332:	4288      	cmp	r0, r1
   83334:	f000 80c3 	beq.w	834be <_realloc_r+0x1ca>
   83338:	6843      	ldr	r3, [r0, #4]
   8333a:	f023 0101 	bic.w	r1, r3, #1
   8333e:	4401      	add	r1, r0
   83340:	6849      	ldr	r1, [r1, #4]
   83342:	07c9      	lsls	r1, r1, #31
   83344:	d54d      	bpl.n	833e2 <_realloc_r+0xee>
   83346:	f01e 0f01 	tst.w	lr, #1
   8334a:	f000 809b 	beq.w	83484 <_realloc_r+0x190>
   8334e:	4629      	mov	r1, r5
   83350:	4640      	mov	r0, r8
   83352:	f7ff fbeb 	bl	82b2c <_malloc_r>
   83356:	4605      	mov	r5, r0
   83358:	2800      	cmp	r0, #0
   8335a:	d03b      	beq.n	833d4 <_realloc_r+0xe0>
   8335c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83360:	f1a0 0208 	sub.w	r2, r0, #8
   83364:	f023 0301 	bic.w	r3, r3, #1
   83368:	444b      	add	r3, r9
   8336a:	429a      	cmp	r2, r3
   8336c:	f000 812b 	beq.w	835c6 <_realloc_r+0x2d2>
   83370:	1f3a      	subs	r2, r7, #4
   83372:	2a24      	cmp	r2, #36	; 0x24
   83374:	f200 8118 	bhi.w	835a8 <_realloc_r+0x2b4>
   83378:	2a13      	cmp	r2, #19
   8337a:	f200 80eb 	bhi.w	83554 <_realloc_r+0x260>
   8337e:	4603      	mov	r3, r0
   83380:	4622      	mov	r2, r4
   83382:	6811      	ldr	r1, [r2, #0]
   83384:	6019      	str	r1, [r3, #0]
   83386:	6851      	ldr	r1, [r2, #4]
   83388:	6059      	str	r1, [r3, #4]
   8338a:	6892      	ldr	r2, [r2, #8]
   8338c:	609a      	str	r2, [r3, #8]
   8338e:	4621      	mov	r1, r4
   83390:	4640      	mov	r0, r8
   83392:	f7ff f8ad 	bl	824f0 <_free_r>
   83396:	e01d      	b.n	833d4 <_realloc_r+0xe0>
   83398:	f026 0607 	bic.w	r6, r6, #7
   8339c:	2e00      	cmp	r6, #0
   8339e:	4632      	mov	r2, r6
   833a0:	dabf      	bge.n	83322 <_realloc_r+0x2e>
   833a2:	2500      	movs	r5, #0
   833a4:	230c      	movs	r3, #12
   833a6:	4628      	mov	r0, r5
   833a8:	f8c8 3000 	str.w	r3, [r8]
   833ac:	b003      	add	sp, #12
   833ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833b2:	4625      	mov	r5, r4
   833b4:	1bbb      	subs	r3, r7, r6
   833b6:	2b0f      	cmp	r3, #15
   833b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
   833bc:	d81d      	bhi.n	833fa <_realloc_r+0x106>
   833be:	f002 0201 	and.w	r2, r2, #1
   833c2:	433a      	orrs	r2, r7
   833c4:	eb09 0107 	add.w	r1, r9, r7
   833c8:	f8c9 2004 	str.w	r2, [r9, #4]
   833cc:	684b      	ldr	r3, [r1, #4]
   833ce:	f043 0301 	orr.w	r3, r3, #1
   833d2:	604b      	str	r3, [r1, #4]
   833d4:	4640      	mov	r0, r8
   833d6:	f7ff ff87 	bl	832e8 <__malloc_unlock>
   833da:	4628      	mov	r0, r5
   833dc:	b003      	add	sp, #12
   833de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833e2:	f023 0303 	bic.w	r3, r3, #3
   833e6:	18f9      	adds	r1, r7, r3
   833e8:	4291      	cmp	r1, r2
   833ea:	db1d      	blt.n	83428 <_realloc_r+0x134>
   833ec:	68c3      	ldr	r3, [r0, #12]
   833ee:	6882      	ldr	r2, [r0, #8]
   833f0:	4625      	mov	r5, r4
   833f2:	60d3      	str	r3, [r2, #12]
   833f4:	460f      	mov	r7, r1
   833f6:	609a      	str	r2, [r3, #8]
   833f8:	e7dc      	b.n	833b4 <_realloc_r+0xc0>
   833fa:	f002 0201 	and.w	r2, r2, #1
   833fe:	eb09 0106 	add.w	r1, r9, r6
   83402:	f043 0301 	orr.w	r3, r3, #1
   83406:	4332      	orrs	r2, r6
   83408:	f8c9 2004 	str.w	r2, [r9, #4]
   8340c:	444f      	add	r7, r9
   8340e:	604b      	str	r3, [r1, #4]
   83410:	687b      	ldr	r3, [r7, #4]
   83412:	3108      	adds	r1, #8
   83414:	f043 0301 	orr.w	r3, r3, #1
   83418:	607b      	str	r3, [r7, #4]
   8341a:	4640      	mov	r0, r8
   8341c:	f7ff f868 	bl	824f0 <_free_r>
   83420:	e7d8      	b.n	833d4 <_realloc_r+0xe0>
   83422:	4611      	mov	r1, r2
   83424:	f7ff bb82 	b.w	82b2c <_malloc_r>
   83428:	f01e 0f01 	tst.w	lr, #1
   8342c:	d18f      	bne.n	8334e <_realloc_r+0x5a>
   8342e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83432:	eba9 0a01 	sub.w	sl, r9, r1
   83436:	f8da 1004 	ldr.w	r1, [sl, #4]
   8343a:	f021 0103 	bic.w	r1, r1, #3
   8343e:	440b      	add	r3, r1
   83440:	443b      	add	r3, r7
   83442:	4293      	cmp	r3, r2
   83444:	db26      	blt.n	83494 <_realloc_r+0x1a0>
   83446:	4655      	mov	r5, sl
   83448:	68c1      	ldr	r1, [r0, #12]
   8344a:	6880      	ldr	r0, [r0, #8]
   8344c:	1f3a      	subs	r2, r7, #4
   8344e:	60c1      	str	r1, [r0, #12]
   83450:	6088      	str	r0, [r1, #8]
   83452:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83456:	f8da 100c 	ldr.w	r1, [sl, #12]
   8345a:	2a24      	cmp	r2, #36	; 0x24
   8345c:	60c1      	str	r1, [r0, #12]
   8345e:	6088      	str	r0, [r1, #8]
   83460:	d826      	bhi.n	834b0 <_realloc_r+0x1bc>
   83462:	2a13      	cmp	r2, #19
   83464:	f240 8081 	bls.w	8356a <_realloc_r+0x276>
   83468:	6821      	ldr	r1, [r4, #0]
   8346a:	2a1b      	cmp	r2, #27
   8346c:	f8ca 1008 	str.w	r1, [sl, #8]
   83470:	6861      	ldr	r1, [r4, #4]
   83472:	f8ca 100c 	str.w	r1, [sl, #12]
   83476:	f200 80ad 	bhi.w	835d4 <_realloc_r+0x2e0>
   8347a:	f104 0008 	add.w	r0, r4, #8
   8347e:	f10a 0210 	add.w	r2, sl, #16
   83482:	e074      	b.n	8356e <_realloc_r+0x27a>
   83484:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83488:	eba9 0a03 	sub.w	sl, r9, r3
   8348c:	f8da 1004 	ldr.w	r1, [sl, #4]
   83490:	f021 0103 	bic.w	r1, r1, #3
   83494:	187b      	adds	r3, r7, r1
   83496:	4293      	cmp	r3, r2
   83498:	f6ff af59 	blt.w	8334e <_realloc_r+0x5a>
   8349c:	4655      	mov	r5, sl
   8349e:	f8da 100c 	ldr.w	r1, [sl, #12]
   834a2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   834a6:	1f3a      	subs	r2, r7, #4
   834a8:	2a24      	cmp	r2, #36	; 0x24
   834aa:	60c1      	str	r1, [r0, #12]
   834ac:	6088      	str	r0, [r1, #8]
   834ae:	d9d8      	bls.n	83462 <_realloc_r+0x16e>
   834b0:	4621      	mov	r1, r4
   834b2:	4628      	mov	r0, r5
   834b4:	461f      	mov	r7, r3
   834b6:	46d1      	mov	r9, sl
   834b8:	f7ff feac 	bl	83214 <memmove>
   834bc:	e77a      	b.n	833b4 <_realloc_r+0xc0>
   834be:	6841      	ldr	r1, [r0, #4]
   834c0:	f106 0010 	add.w	r0, r6, #16
   834c4:	f021 0b03 	bic.w	fp, r1, #3
   834c8:	44bb      	add	fp, r7
   834ca:	4583      	cmp	fp, r0
   834cc:	da58      	bge.n	83580 <_realloc_r+0x28c>
   834ce:	f01e 0f01 	tst.w	lr, #1
   834d2:	f47f af3c 	bne.w	8334e <_realloc_r+0x5a>
   834d6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   834da:	eba9 0a01 	sub.w	sl, r9, r1
   834de:	f8da 1004 	ldr.w	r1, [sl, #4]
   834e2:	f021 0103 	bic.w	r1, r1, #3
   834e6:	448b      	add	fp, r1
   834e8:	4558      	cmp	r0, fp
   834ea:	dcd3      	bgt.n	83494 <_realloc_r+0x1a0>
   834ec:	4655      	mov	r5, sl
   834ee:	f8da 100c 	ldr.w	r1, [sl, #12]
   834f2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   834f6:	1f3a      	subs	r2, r7, #4
   834f8:	2a24      	cmp	r2, #36	; 0x24
   834fa:	60c1      	str	r1, [r0, #12]
   834fc:	6088      	str	r0, [r1, #8]
   834fe:	f200 808d 	bhi.w	8361c <_realloc_r+0x328>
   83502:	2a13      	cmp	r2, #19
   83504:	f240 8087 	bls.w	83616 <_realloc_r+0x322>
   83508:	6821      	ldr	r1, [r4, #0]
   8350a:	2a1b      	cmp	r2, #27
   8350c:	f8ca 1008 	str.w	r1, [sl, #8]
   83510:	6861      	ldr	r1, [r4, #4]
   83512:	f8ca 100c 	str.w	r1, [sl, #12]
   83516:	f200 8088 	bhi.w	8362a <_realloc_r+0x336>
   8351a:	f104 0108 	add.w	r1, r4, #8
   8351e:	f10a 0210 	add.w	r2, sl, #16
   83522:	6808      	ldr	r0, [r1, #0]
   83524:	6010      	str	r0, [r2, #0]
   83526:	6848      	ldr	r0, [r1, #4]
   83528:	6050      	str	r0, [r2, #4]
   8352a:	6889      	ldr	r1, [r1, #8]
   8352c:	6091      	str	r1, [r2, #8]
   8352e:	ebab 0206 	sub.w	r2, fp, r6
   83532:	eb0a 0106 	add.w	r1, sl, r6
   83536:	f042 0201 	orr.w	r2, r2, #1
   8353a:	6099      	str	r1, [r3, #8]
   8353c:	604a      	str	r2, [r1, #4]
   8353e:	f8da 3004 	ldr.w	r3, [sl, #4]
   83542:	4640      	mov	r0, r8
   83544:	f003 0301 	and.w	r3, r3, #1
   83548:	431e      	orrs	r6, r3
   8354a:	f8ca 6004 	str.w	r6, [sl, #4]
   8354e:	f7ff fecb 	bl	832e8 <__malloc_unlock>
   83552:	e742      	b.n	833da <_realloc_r+0xe6>
   83554:	6823      	ldr	r3, [r4, #0]
   83556:	2a1b      	cmp	r2, #27
   83558:	6003      	str	r3, [r0, #0]
   8355a:	6863      	ldr	r3, [r4, #4]
   8355c:	6043      	str	r3, [r0, #4]
   8355e:	d827      	bhi.n	835b0 <_realloc_r+0x2bc>
   83560:	f100 0308 	add.w	r3, r0, #8
   83564:	f104 0208 	add.w	r2, r4, #8
   83568:	e70b      	b.n	83382 <_realloc_r+0x8e>
   8356a:	4620      	mov	r0, r4
   8356c:	462a      	mov	r2, r5
   8356e:	6801      	ldr	r1, [r0, #0]
   83570:	461f      	mov	r7, r3
   83572:	6011      	str	r1, [r2, #0]
   83574:	6841      	ldr	r1, [r0, #4]
   83576:	46d1      	mov	r9, sl
   83578:	6051      	str	r1, [r2, #4]
   8357a:	6883      	ldr	r3, [r0, #8]
   8357c:	6093      	str	r3, [r2, #8]
   8357e:	e719      	b.n	833b4 <_realloc_r+0xc0>
   83580:	ebab 0b06 	sub.w	fp, fp, r6
   83584:	eb09 0106 	add.w	r1, r9, r6
   83588:	f04b 0201 	orr.w	r2, fp, #1
   8358c:	6099      	str	r1, [r3, #8]
   8358e:	604a      	str	r2, [r1, #4]
   83590:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83594:	4640      	mov	r0, r8
   83596:	f003 0301 	and.w	r3, r3, #1
   8359a:	431e      	orrs	r6, r3
   8359c:	f844 6c04 	str.w	r6, [r4, #-4]
   835a0:	f7ff fea2 	bl	832e8 <__malloc_unlock>
   835a4:	4625      	mov	r5, r4
   835a6:	e718      	b.n	833da <_realloc_r+0xe6>
   835a8:	4621      	mov	r1, r4
   835aa:	f7ff fe33 	bl	83214 <memmove>
   835ae:	e6ee      	b.n	8338e <_realloc_r+0x9a>
   835b0:	68a3      	ldr	r3, [r4, #8]
   835b2:	2a24      	cmp	r2, #36	; 0x24
   835b4:	6083      	str	r3, [r0, #8]
   835b6:	68e3      	ldr	r3, [r4, #12]
   835b8:	60c3      	str	r3, [r0, #12]
   835ba:	d018      	beq.n	835ee <_realloc_r+0x2fa>
   835bc:	f100 0310 	add.w	r3, r0, #16
   835c0:	f104 0210 	add.w	r2, r4, #16
   835c4:	e6dd      	b.n	83382 <_realloc_r+0x8e>
   835c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   835ca:	4625      	mov	r5, r4
   835cc:	f023 0303 	bic.w	r3, r3, #3
   835d0:	441f      	add	r7, r3
   835d2:	e6ef      	b.n	833b4 <_realloc_r+0xc0>
   835d4:	68a1      	ldr	r1, [r4, #8]
   835d6:	2a24      	cmp	r2, #36	; 0x24
   835d8:	f8ca 1010 	str.w	r1, [sl, #16]
   835dc:	68e1      	ldr	r1, [r4, #12]
   835de:	f8ca 1014 	str.w	r1, [sl, #20]
   835e2:	d00d      	beq.n	83600 <_realloc_r+0x30c>
   835e4:	f104 0010 	add.w	r0, r4, #16
   835e8:	f10a 0218 	add.w	r2, sl, #24
   835ec:	e7bf      	b.n	8356e <_realloc_r+0x27a>
   835ee:	6922      	ldr	r2, [r4, #16]
   835f0:	f100 0318 	add.w	r3, r0, #24
   835f4:	6102      	str	r2, [r0, #16]
   835f6:	6961      	ldr	r1, [r4, #20]
   835f8:	f104 0218 	add.w	r2, r4, #24
   835fc:	6141      	str	r1, [r0, #20]
   835fe:	e6c0      	b.n	83382 <_realloc_r+0x8e>
   83600:	6922      	ldr	r2, [r4, #16]
   83602:	f104 0018 	add.w	r0, r4, #24
   83606:	f8ca 2018 	str.w	r2, [sl, #24]
   8360a:	6961      	ldr	r1, [r4, #20]
   8360c:	f10a 0220 	add.w	r2, sl, #32
   83610:	f8ca 101c 	str.w	r1, [sl, #28]
   83614:	e7ab      	b.n	8356e <_realloc_r+0x27a>
   83616:	4621      	mov	r1, r4
   83618:	462a      	mov	r2, r5
   8361a:	e782      	b.n	83522 <_realloc_r+0x22e>
   8361c:	4621      	mov	r1, r4
   8361e:	4628      	mov	r0, r5
   83620:	9301      	str	r3, [sp, #4]
   83622:	f7ff fdf7 	bl	83214 <memmove>
   83626:	9b01      	ldr	r3, [sp, #4]
   83628:	e781      	b.n	8352e <_realloc_r+0x23a>
   8362a:	68a1      	ldr	r1, [r4, #8]
   8362c:	2a24      	cmp	r2, #36	; 0x24
   8362e:	f8ca 1010 	str.w	r1, [sl, #16]
   83632:	68e1      	ldr	r1, [r4, #12]
   83634:	f8ca 1014 	str.w	r1, [sl, #20]
   83638:	d006      	beq.n	83648 <_realloc_r+0x354>
   8363a:	f104 0110 	add.w	r1, r4, #16
   8363e:	f10a 0218 	add.w	r2, sl, #24
   83642:	e76e      	b.n	83522 <_realloc_r+0x22e>
   83644:	20070710 	.word	0x20070710
   83648:	6922      	ldr	r2, [r4, #16]
   8364a:	f104 0118 	add.w	r1, r4, #24
   8364e:	f8ca 2018 	str.w	r2, [sl, #24]
   83652:	6960      	ldr	r0, [r4, #20]
   83654:	f10a 0220 	add.w	r2, sl, #32
   83658:	f8ca 001c 	str.w	r0, [sl, #28]
   8365c:	e761      	b.n	83522 <_realloc_r+0x22e>
   8365e:	bf00      	nop

00083660 <_sbrk_r>:
   83660:	b538      	push	{r3, r4, r5, lr}
   83662:	2300      	movs	r3, #0
   83664:	4c06      	ldr	r4, [pc, #24]	; (83680 <_sbrk_r+0x20>)
   83666:	4605      	mov	r5, r0
   83668:	4608      	mov	r0, r1
   8366a:	6023      	str	r3, [r4, #0]
   8366c:	f7fd faa2 	bl	80bb4 <_sbrk>
   83670:	1c43      	adds	r3, r0, #1
   83672:	d000      	beq.n	83676 <_sbrk_r+0x16>
   83674:	bd38      	pop	{r3, r4, r5, pc}
   83676:	6823      	ldr	r3, [r4, #0]
   83678:	2b00      	cmp	r3, #0
   8367a:	d0fb      	beq.n	83674 <_sbrk_r+0x14>
   8367c:	602b      	str	r3, [r5, #0]
   8367e:	bd38      	pop	{r3, r4, r5, pc}
   83680:	20070cb4 	.word	0x20070cb4

00083684 <__sread>:
   83684:	b510      	push	{r4, lr}
   83686:	460c      	mov	r4, r1
   83688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8368c:	f000 fa22 	bl	83ad4 <_read_r>
   83690:	2800      	cmp	r0, #0
   83692:	db03      	blt.n	8369c <__sread+0x18>
   83694:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83696:	4403      	add	r3, r0
   83698:	6523      	str	r3, [r4, #80]	; 0x50
   8369a:	bd10      	pop	{r4, pc}
   8369c:	89a3      	ldrh	r3, [r4, #12]
   8369e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   836a2:	81a3      	strh	r3, [r4, #12]
   836a4:	bd10      	pop	{r4, pc}
   836a6:	bf00      	nop

000836a8 <__swrite>:
   836a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836ac:	460c      	mov	r4, r1
   836ae:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   836b2:	461f      	mov	r7, r3
   836b4:	05cb      	lsls	r3, r1, #23
   836b6:	4616      	mov	r6, r2
   836b8:	4605      	mov	r5, r0
   836ba:	d507      	bpl.n	836cc <__swrite+0x24>
   836bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836c0:	2302      	movs	r3, #2
   836c2:	2200      	movs	r2, #0
   836c4:	f000 f9f0 	bl	83aa8 <_lseek_r>
   836c8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   836cc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   836d0:	81a1      	strh	r1, [r4, #12]
   836d2:	463b      	mov	r3, r7
   836d4:	4632      	mov	r2, r6
   836d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836da:	4628      	mov	r0, r5
   836dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836e0:	f000 b8d0 	b.w	83884 <_write_r>

000836e4 <__sseek>:
   836e4:	b510      	push	{r4, lr}
   836e6:	460c      	mov	r4, r1
   836e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836ec:	f000 f9dc 	bl	83aa8 <_lseek_r>
   836f0:	89a3      	ldrh	r3, [r4, #12]
   836f2:	1c42      	adds	r2, r0, #1
   836f4:	bf0e      	itee	eq
   836f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   836fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   836fe:	6520      	strne	r0, [r4, #80]	; 0x50
   83700:	81a3      	strh	r3, [r4, #12]
   83702:	bd10      	pop	{r4, pc}

00083704 <__sclose>:
   83704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83708:	f000 b934 	b.w	83974 <_close_r>

0008370c <strlen>:
   8370c:	f020 0103 	bic.w	r1, r0, #3
   83710:	f010 0003 	ands.w	r0, r0, #3
   83714:	f1c0 0000 	rsb	r0, r0, #0
   83718:	f851 3b04 	ldr.w	r3, [r1], #4
   8371c:	f100 0c04 	add.w	ip, r0, #4
   83720:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83724:	f06f 0200 	mvn.w	r2, #0
   83728:	bf1c      	itt	ne
   8372a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8372e:	4313      	orrne	r3, r2
   83730:	f04f 0c01 	mov.w	ip, #1
   83734:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83738:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8373c:	eba3 020c 	sub.w	r2, r3, ip
   83740:	ea22 0203 	bic.w	r2, r2, r3
   83744:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83748:	bf04      	itt	eq
   8374a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8374e:	3004      	addeq	r0, #4
   83750:	d0f4      	beq.n	8373c <strlen+0x30>
   83752:	f1c2 0100 	rsb	r1, r2, #0
   83756:	ea02 0201 	and.w	r2, r2, r1
   8375a:	fab2 f282 	clz	r2, r2
   8375e:	f1c2 021f 	rsb	r2, r2, #31
   83762:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83766:	4770      	bx	lr

00083768 <__swbuf_r>:
   83768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8376a:	460d      	mov	r5, r1
   8376c:	4614      	mov	r4, r2
   8376e:	4606      	mov	r6, r0
   83770:	b110      	cbz	r0, 83778 <__swbuf_r+0x10>
   83772:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83774:	2b00      	cmp	r3, #0
   83776:	d04b      	beq.n	83810 <__swbuf_r+0xa8>
   83778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8377c:	69a3      	ldr	r3, [r4, #24]
   8377e:	b291      	uxth	r1, r2
   83780:	0708      	lsls	r0, r1, #28
   83782:	60a3      	str	r3, [r4, #8]
   83784:	d539      	bpl.n	837fa <__swbuf_r+0x92>
   83786:	6923      	ldr	r3, [r4, #16]
   83788:	2b00      	cmp	r3, #0
   8378a:	d036      	beq.n	837fa <__swbuf_r+0x92>
   8378c:	b2ed      	uxtb	r5, r5
   8378e:	0489      	lsls	r1, r1, #18
   83790:	462f      	mov	r7, r5
   83792:	d515      	bpl.n	837c0 <__swbuf_r+0x58>
   83794:	6822      	ldr	r2, [r4, #0]
   83796:	6961      	ldr	r1, [r4, #20]
   83798:	1ad3      	subs	r3, r2, r3
   8379a:	428b      	cmp	r3, r1
   8379c:	da1c      	bge.n	837d8 <__swbuf_r+0x70>
   8379e:	3301      	adds	r3, #1
   837a0:	68a1      	ldr	r1, [r4, #8]
   837a2:	1c50      	adds	r0, r2, #1
   837a4:	3901      	subs	r1, #1
   837a6:	60a1      	str	r1, [r4, #8]
   837a8:	6020      	str	r0, [r4, #0]
   837aa:	7015      	strb	r5, [r2, #0]
   837ac:	6962      	ldr	r2, [r4, #20]
   837ae:	429a      	cmp	r2, r3
   837b0:	d01a      	beq.n	837e8 <__swbuf_r+0x80>
   837b2:	89a3      	ldrh	r3, [r4, #12]
   837b4:	07db      	lsls	r3, r3, #31
   837b6:	d501      	bpl.n	837bc <__swbuf_r+0x54>
   837b8:	2d0a      	cmp	r5, #10
   837ba:	d015      	beq.n	837e8 <__swbuf_r+0x80>
   837bc:	4638      	mov	r0, r7
   837be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   837c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   837c6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   837ca:	81a2      	strh	r2, [r4, #12]
   837cc:	6822      	ldr	r2, [r4, #0]
   837ce:	6661      	str	r1, [r4, #100]	; 0x64
   837d0:	6961      	ldr	r1, [r4, #20]
   837d2:	1ad3      	subs	r3, r2, r3
   837d4:	428b      	cmp	r3, r1
   837d6:	dbe2      	blt.n	8379e <__swbuf_r+0x36>
   837d8:	4621      	mov	r1, r4
   837da:	4630      	mov	r0, r6
   837dc:	f7fe fd0a 	bl	821f4 <_fflush_r>
   837e0:	b940      	cbnz	r0, 837f4 <__swbuf_r+0x8c>
   837e2:	2301      	movs	r3, #1
   837e4:	6822      	ldr	r2, [r4, #0]
   837e6:	e7db      	b.n	837a0 <__swbuf_r+0x38>
   837e8:	4621      	mov	r1, r4
   837ea:	4630      	mov	r0, r6
   837ec:	f7fe fd02 	bl	821f4 <_fflush_r>
   837f0:	2800      	cmp	r0, #0
   837f2:	d0e3      	beq.n	837bc <__swbuf_r+0x54>
   837f4:	f04f 37ff 	mov.w	r7, #4294967295
   837f8:	e7e0      	b.n	837bc <__swbuf_r+0x54>
   837fa:	4621      	mov	r1, r4
   837fc:	4630      	mov	r0, r6
   837fe:	f7fe fbe9 	bl	81fd4 <__swsetup_r>
   83802:	2800      	cmp	r0, #0
   83804:	d1f6      	bne.n	837f4 <__swbuf_r+0x8c>
   83806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8380a:	6923      	ldr	r3, [r4, #16]
   8380c:	b291      	uxth	r1, r2
   8380e:	e7bd      	b.n	8378c <__swbuf_r+0x24>
   83810:	f7fe fd48 	bl	822a4 <__sinit>
   83814:	e7b0      	b.n	83778 <__swbuf_r+0x10>
   83816:	bf00      	nop

00083818 <_wcrtomb_r>:
   83818:	b5f0      	push	{r4, r5, r6, r7, lr}
   8381a:	4606      	mov	r6, r0
   8381c:	b085      	sub	sp, #20
   8381e:	461f      	mov	r7, r3
   83820:	b189      	cbz	r1, 83846 <_wcrtomb_r+0x2e>
   83822:	4c10      	ldr	r4, [pc, #64]	; (83864 <_wcrtomb_r+0x4c>)
   83824:	4d10      	ldr	r5, [pc, #64]	; (83868 <_wcrtomb_r+0x50>)
   83826:	6824      	ldr	r4, [r4, #0]
   83828:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8382a:	2c00      	cmp	r4, #0
   8382c:	bf08      	it	eq
   8382e:	462c      	moveq	r4, r5
   83830:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83834:	47a0      	blx	r4
   83836:	1c43      	adds	r3, r0, #1
   83838:	d103      	bne.n	83842 <_wcrtomb_r+0x2a>
   8383a:	2200      	movs	r2, #0
   8383c:	238a      	movs	r3, #138	; 0x8a
   8383e:	603a      	str	r2, [r7, #0]
   83840:	6033      	str	r3, [r6, #0]
   83842:	b005      	add	sp, #20
   83844:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83846:	460c      	mov	r4, r1
   83848:	4a06      	ldr	r2, [pc, #24]	; (83864 <_wcrtomb_r+0x4c>)
   8384a:	4d07      	ldr	r5, [pc, #28]	; (83868 <_wcrtomb_r+0x50>)
   8384c:	6811      	ldr	r1, [r2, #0]
   8384e:	4622      	mov	r2, r4
   83850:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83852:	a901      	add	r1, sp, #4
   83854:	2c00      	cmp	r4, #0
   83856:	bf08      	it	eq
   83858:	462c      	moveq	r4, r5
   8385a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8385e:	47a0      	blx	r4
   83860:	e7e9      	b.n	83836 <_wcrtomb_r+0x1e>
   83862:	bf00      	nop
   83864:	20070174 	.word	0x20070174
   83868:	200705a4 	.word	0x200705a4

0008386c <__ascii_wctomb>:
   8386c:	b119      	cbz	r1, 83876 <__ascii_wctomb+0xa>
   8386e:	2aff      	cmp	r2, #255	; 0xff
   83870:	d803      	bhi.n	8387a <__ascii_wctomb+0xe>
   83872:	700a      	strb	r2, [r1, #0]
   83874:	2101      	movs	r1, #1
   83876:	4608      	mov	r0, r1
   83878:	4770      	bx	lr
   8387a:	238a      	movs	r3, #138	; 0x8a
   8387c:	f04f 31ff 	mov.w	r1, #4294967295
   83880:	6003      	str	r3, [r0, #0]
   83882:	e7f8      	b.n	83876 <__ascii_wctomb+0xa>

00083884 <_write_r>:
   83884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83886:	460e      	mov	r6, r1
   83888:	2500      	movs	r5, #0
   8388a:	4c08      	ldr	r4, [pc, #32]	; (838ac <_write_r+0x28>)
   8388c:	4611      	mov	r1, r2
   8388e:	4607      	mov	r7, r0
   83890:	461a      	mov	r2, r3
   83892:	4630      	mov	r0, r6
   83894:	6025      	str	r5, [r4, #0]
   83896:	f7fc fccd 	bl	80234 <_write>
   8389a:	1c43      	adds	r3, r0, #1
   8389c:	d000      	beq.n	838a0 <_write_r+0x1c>
   8389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838a0:	6823      	ldr	r3, [r4, #0]
   838a2:	2b00      	cmp	r3, #0
   838a4:	d0fb      	beq.n	8389e <_write_r+0x1a>
   838a6:	603b      	str	r3, [r7, #0]
   838a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838aa:	bf00      	nop
   838ac:	20070cb4 	.word	0x20070cb4

000838b0 <__register_exitproc>:
   838b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   838b4:	4d2c      	ldr	r5, [pc, #176]	; (83968 <__register_exitproc+0xb8>)
   838b6:	4606      	mov	r6, r0
   838b8:	6828      	ldr	r0, [r5, #0]
   838ba:	4698      	mov	r8, r3
   838bc:	460f      	mov	r7, r1
   838be:	4691      	mov	r9, r2
   838c0:	f7ff f8b0 	bl	82a24 <__retarget_lock_acquire_recursive>
   838c4:	4b29      	ldr	r3, [pc, #164]	; (8396c <__register_exitproc+0xbc>)
   838c6:	681c      	ldr	r4, [r3, #0]
   838c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   838cc:	2b00      	cmp	r3, #0
   838ce:	d03e      	beq.n	8394e <__register_exitproc+0x9e>
   838d0:	685a      	ldr	r2, [r3, #4]
   838d2:	2a1f      	cmp	r2, #31
   838d4:	dc1c      	bgt.n	83910 <__register_exitproc+0x60>
   838d6:	f102 0e01 	add.w	lr, r2, #1
   838da:	b176      	cbz	r6, 838fa <__register_exitproc+0x4a>
   838dc:	2101      	movs	r1, #1
   838de:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   838e2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   838e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   838ea:	4091      	lsls	r1, r2
   838ec:	4308      	orrs	r0, r1
   838ee:	2e02      	cmp	r6, #2
   838f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   838f4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   838f8:	d023      	beq.n	83942 <__register_exitproc+0x92>
   838fa:	3202      	adds	r2, #2
   838fc:	f8c3 e004 	str.w	lr, [r3, #4]
   83900:	6828      	ldr	r0, [r5, #0]
   83902:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83906:	f7ff f88f 	bl	82a28 <__retarget_lock_release_recursive>
   8390a:	2000      	movs	r0, #0
   8390c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83910:	4b17      	ldr	r3, [pc, #92]	; (83970 <__register_exitproc+0xc0>)
   83912:	b30b      	cbz	r3, 83958 <__register_exitproc+0xa8>
   83914:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83918:	f7ff f900 	bl	82b1c <malloc>
   8391c:	4603      	mov	r3, r0
   8391e:	b1d8      	cbz	r0, 83958 <__register_exitproc+0xa8>
   83920:	2000      	movs	r0, #0
   83922:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83926:	f04f 0e01 	mov.w	lr, #1
   8392a:	6058      	str	r0, [r3, #4]
   8392c:	6019      	str	r1, [r3, #0]
   8392e:	4602      	mov	r2, r0
   83930:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83934:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83938:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8393c:	2e00      	cmp	r6, #0
   8393e:	d0dc      	beq.n	838fa <__register_exitproc+0x4a>
   83940:	e7cc      	b.n	838dc <__register_exitproc+0x2c>
   83942:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83946:	4301      	orrs	r1, r0
   83948:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8394c:	e7d5      	b.n	838fa <__register_exitproc+0x4a>
   8394e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83952:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83956:	e7bb      	b.n	838d0 <__register_exitproc+0x20>
   83958:	6828      	ldr	r0, [r5, #0]
   8395a:	f7ff f865 	bl	82a28 <__retarget_lock_release_recursive>
   8395e:	f04f 30ff 	mov.w	r0, #4294967295
   83962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83966:	bf00      	nop
   83968:	200705a0 	.word	0x200705a0
   8396c:	00083e64 	.word	0x00083e64
   83970:	00082b1d 	.word	0x00082b1d

00083974 <_close_r>:
   83974:	b538      	push	{r3, r4, r5, lr}
   83976:	2300      	movs	r3, #0
   83978:	4c06      	ldr	r4, [pc, #24]	; (83994 <_close_r+0x20>)
   8397a:	4605      	mov	r5, r0
   8397c:	4608      	mov	r0, r1
   8397e:	6023      	str	r3, [r4, #0]
   83980:	f7fd f934 	bl	80bec <_close>
   83984:	1c43      	adds	r3, r0, #1
   83986:	d000      	beq.n	8398a <_close_r+0x16>
   83988:	bd38      	pop	{r3, r4, r5, pc}
   8398a:	6823      	ldr	r3, [r4, #0]
   8398c:	2b00      	cmp	r3, #0
   8398e:	d0fb      	beq.n	83988 <_close_r+0x14>
   83990:	602b      	str	r3, [r5, #0]
   83992:	bd38      	pop	{r3, r4, r5, pc}
   83994:	20070cb4 	.word	0x20070cb4

00083998 <_fclose_r>:
   83998:	b570      	push	{r4, r5, r6, lr}
   8399a:	b159      	cbz	r1, 839b4 <_fclose_r+0x1c>
   8399c:	4605      	mov	r5, r0
   8399e:	460c      	mov	r4, r1
   839a0:	b110      	cbz	r0, 839a8 <_fclose_r+0x10>
   839a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839a4:	2b00      	cmp	r3, #0
   839a6:	d03c      	beq.n	83a22 <_fclose_r+0x8a>
   839a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   839aa:	07d8      	lsls	r0, r3, #31
   839ac:	d505      	bpl.n	839ba <_fclose_r+0x22>
   839ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839b2:	b92b      	cbnz	r3, 839c0 <_fclose_r+0x28>
   839b4:	2600      	movs	r6, #0
   839b6:	4630      	mov	r0, r6
   839b8:	bd70      	pop	{r4, r5, r6, pc}
   839ba:	89a3      	ldrh	r3, [r4, #12]
   839bc:	0599      	lsls	r1, r3, #22
   839be:	d53c      	bpl.n	83a3a <_fclose_r+0xa2>
   839c0:	4621      	mov	r1, r4
   839c2:	4628      	mov	r0, r5
   839c4:	f7fe fb7a 	bl	820bc <__sflush_r>
   839c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   839ca:	4606      	mov	r6, r0
   839cc:	b133      	cbz	r3, 839dc <_fclose_r+0x44>
   839ce:	69e1      	ldr	r1, [r4, #28]
   839d0:	4628      	mov	r0, r5
   839d2:	4798      	blx	r3
   839d4:	2800      	cmp	r0, #0
   839d6:	bfb8      	it	lt
   839d8:	f04f 36ff 	movlt.w	r6, #4294967295
   839dc:	89a3      	ldrh	r3, [r4, #12]
   839de:	061a      	lsls	r2, r3, #24
   839e0:	d422      	bmi.n	83a28 <_fclose_r+0x90>
   839e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839e4:	b141      	cbz	r1, 839f8 <_fclose_r+0x60>
   839e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839ea:	4299      	cmp	r1, r3
   839ec:	d002      	beq.n	839f4 <_fclose_r+0x5c>
   839ee:	4628      	mov	r0, r5
   839f0:	f7fe fd7e 	bl	824f0 <_free_r>
   839f4:	2300      	movs	r3, #0
   839f6:	6323      	str	r3, [r4, #48]	; 0x30
   839f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   839fa:	b121      	cbz	r1, 83a06 <_fclose_r+0x6e>
   839fc:	4628      	mov	r0, r5
   839fe:	f7fe fd77 	bl	824f0 <_free_r>
   83a02:	2300      	movs	r3, #0
   83a04:	6463      	str	r3, [r4, #68]	; 0x44
   83a06:	f7fe fc7d 	bl	82304 <__sfp_lock_acquire>
   83a0a:	2200      	movs	r2, #0
   83a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a0e:	81a2      	strh	r2, [r4, #12]
   83a10:	07db      	lsls	r3, r3, #31
   83a12:	d50e      	bpl.n	83a32 <_fclose_r+0x9a>
   83a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a16:	f7ff f803 	bl	82a20 <__retarget_lock_close_recursive>
   83a1a:	f7fe fc79 	bl	82310 <__sfp_lock_release>
   83a1e:	4630      	mov	r0, r6
   83a20:	bd70      	pop	{r4, r5, r6, pc}
   83a22:	f7fe fc3f 	bl	822a4 <__sinit>
   83a26:	e7bf      	b.n	839a8 <_fclose_r+0x10>
   83a28:	6921      	ldr	r1, [r4, #16]
   83a2a:	4628      	mov	r0, r5
   83a2c:	f7fe fd60 	bl	824f0 <_free_r>
   83a30:	e7d7      	b.n	839e2 <_fclose_r+0x4a>
   83a32:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a34:	f7fe fff8 	bl	82a28 <__retarget_lock_release_recursive>
   83a38:	e7ec      	b.n	83a14 <_fclose_r+0x7c>
   83a3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a3c:	f7fe fff2 	bl	82a24 <__retarget_lock_acquire_recursive>
   83a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a44:	2b00      	cmp	r3, #0
   83a46:	d1bb      	bne.n	839c0 <_fclose_r+0x28>
   83a48:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83a4a:	f016 0601 	ands.w	r6, r6, #1
   83a4e:	d1b1      	bne.n	839b4 <_fclose_r+0x1c>
   83a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a52:	f7fe ffe9 	bl	82a28 <__retarget_lock_release_recursive>
   83a56:	4630      	mov	r0, r6
   83a58:	bd70      	pop	{r4, r5, r6, pc}
   83a5a:	bf00      	nop

00083a5c <_fstat_r>:
   83a5c:	b570      	push	{r4, r5, r6, lr}
   83a5e:	460d      	mov	r5, r1
   83a60:	2300      	movs	r3, #0
   83a62:	4c07      	ldr	r4, [pc, #28]	; (83a80 <_fstat_r+0x24>)
   83a64:	4606      	mov	r6, r0
   83a66:	4611      	mov	r1, r2
   83a68:	4628      	mov	r0, r5
   83a6a:	6023      	str	r3, [r4, #0]
   83a6c:	f7fd f8c1 	bl	80bf2 <_fstat>
   83a70:	1c43      	adds	r3, r0, #1
   83a72:	d000      	beq.n	83a76 <_fstat_r+0x1a>
   83a74:	bd70      	pop	{r4, r5, r6, pc}
   83a76:	6823      	ldr	r3, [r4, #0]
   83a78:	2b00      	cmp	r3, #0
   83a7a:	d0fb      	beq.n	83a74 <_fstat_r+0x18>
   83a7c:	6033      	str	r3, [r6, #0]
   83a7e:	bd70      	pop	{r4, r5, r6, pc}
   83a80:	20070cb4 	.word	0x20070cb4

00083a84 <_isatty_r>:
   83a84:	b538      	push	{r3, r4, r5, lr}
   83a86:	2300      	movs	r3, #0
   83a88:	4c06      	ldr	r4, [pc, #24]	; (83aa4 <_isatty_r+0x20>)
   83a8a:	4605      	mov	r5, r0
   83a8c:	4608      	mov	r0, r1
   83a8e:	6023      	str	r3, [r4, #0]
   83a90:	f7fd f8b4 	bl	80bfc <_isatty>
   83a94:	1c43      	adds	r3, r0, #1
   83a96:	d000      	beq.n	83a9a <_isatty_r+0x16>
   83a98:	bd38      	pop	{r3, r4, r5, pc}
   83a9a:	6823      	ldr	r3, [r4, #0]
   83a9c:	2b00      	cmp	r3, #0
   83a9e:	d0fb      	beq.n	83a98 <_isatty_r+0x14>
   83aa0:	602b      	str	r3, [r5, #0]
   83aa2:	bd38      	pop	{r3, r4, r5, pc}
   83aa4:	20070cb4 	.word	0x20070cb4

00083aa8 <_lseek_r>:
   83aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83aaa:	460e      	mov	r6, r1
   83aac:	2500      	movs	r5, #0
   83aae:	4c08      	ldr	r4, [pc, #32]	; (83ad0 <_lseek_r+0x28>)
   83ab0:	4611      	mov	r1, r2
   83ab2:	4607      	mov	r7, r0
   83ab4:	461a      	mov	r2, r3
   83ab6:	4630      	mov	r0, r6
   83ab8:	6025      	str	r5, [r4, #0]
   83aba:	f7fd f8a1 	bl	80c00 <_lseek>
   83abe:	1c43      	adds	r3, r0, #1
   83ac0:	d000      	beq.n	83ac4 <_lseek_r+0x1c>
   83ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ac4:	6823      	ldr	r3, [r4, #0]
   83ac6:	2b00      	cmp	r3, #0
   83ac8:	d0fb      	beq.n	83ac2 <_lseek_r+0x1a>
   83aca:	603b      	str	r3, [r7, #0]
   83acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ace:	bf00      	nop
   83ad0:	20070cb4 	.word	0x20070cb4

00083ad4 <_read_r>:
   83ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ad6:	460e      	mov	r6, r1
   83ad8:	2500      	movs	r5, #0
   83ada:	4c08      	ldr	r4, [pc, #32]	; (83afc <_read_r+0x28>)
   83adc:	4611      	mov	r1, r2
   83ade:	4607      	mov	r7, r0
   83ae0:	461a      	mov	r2, r3
   83ae2:	4630      	mov	r0, r6
   83ae4:	6025      	str	r5, [r4, #0]
   83ae6:	f7fc fb3b 	bl	80160 <_read>
   83aea:	1c43      	adds	r3, r0, #1
   83aec:	d000      	beq.n	83af0 <_read_r+0x1c>
   83aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83af0:	6823      	ldr	r3, [r4, #0]
   83af2:	2b00      	cmp	r3, #0
   83af4:	d0fb      	beq.n	83aee <_read_r+0x1a>
   83af6:	603b      	str	r3, [r7, #0]
   83af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83afa:	bf00      	nop
   83afc:	20070cb4 	.word	0x20070cb4

00083b00 <__aeabi_uldivmod>:
   83b00:	b953      	cbnz	r3, 83b18 <__aeabi_uldivmod+0x18>
   83b02:	b94a      	cbnz	r2, 83b18 <__aeabi_uldivmod+0x18>
   83b04:	2900      	cmp	r1, #0
   83b06:	bf08      	it	eq
   83b08:	2800      	cmpeq	r0, #0
   83b0a:	bf1c      	itt	ne
   83b0c:	f04f 31ff 	movne.w	r1, #4294967295
   83b10:	f04f 30ff 	movne.w	r0, #4294967295
   83b14:	f000 b97a 	b.w	83e0c <__aeabi_idiv0>
   83b18:	f1ad 0c08 	sub.w	ip, sp, #8
   83b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83b20:	f000 f806 	bl	83b30 <__udivmoddi4>
   83b24:	f8dd e004 	ldr.w	lr, [sp, #4]
   83b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83b2c:	b004      	add	sp, #16
   83b2e:	4770      	bx	lr

00083b30 <__udivmoddi4>:
   83b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83b34:	468c      	mov	ip, r1
   83b36:	460e      	mov	r6, r1
   83b38:	4604      	mov	r4, r0
   83b3a:	9d08      	ldr	r5, [sp, #32]
   83b3c:	2b00      	cmp	r3, #0
   83b3e:	d150      	bne.n	83be2 <__udivmoddi4+0xb2>
   83b40:	428a      	cmp	r2, r1
   83b42:	4617      	mov	r7, r2
   83b44:	d96c      	bls.n	83c20 <__udivmoddi4+0xf0>
   83b46:	fab2 fe82 	clz	lr, r2
   83b4a:	f1be 0f00 	cmp.w	lr, #0
   83b4e:	d00b      	beq.n	83b68 <__udivmoddi4+0x38>
   83b50:	f1ce 0c20 	rsb	ip, lr, #32
   83b54:	fa01 f60e 	lsl.w	r6, r1, lr
   83b58:	fa20 fc0c 	lsr.w	ip, r0, ip
   83b5c:	fa02 f70e 	lsl.w	r7, r2, lr
   83b60:	ea4c 0c06 	orr.w	ip, ip, r6
   83b64:	fa00 f40e 	lsl.w	r4, r0, lr
   83b68:	0c3a      	lsrs	r2, r7, #16
   83b6a:	fbbc f9f2 	udiv	r9, ip, r2
   83b6e:	b2bb      	uxth	r3, r7
   83b70:	fb02 cc19 	mls	ip, r2, r9, ip
   83b74:	fb09 fa03 	mul.w	sl, r9, r3
   83b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83b7c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83b80:	45b2      	cmp	sl, r6
   83b82:	d90a      	bls.n	83b9a <__udivmoddi4+0x6a>
   83b84:	19f6      	adds	r6, r6, r7
   83b86:	f109 31ff 	add.w	r1, r9, #4294967295
   83b8a:	f080 8125 	bcs.w	83dd8 <__udivmoddi4+0x2a8>
   83b8e:	45b2      	cmp	sl, r6
   83b90:	f240 8122 	bls.w	83dd8 <__udivmoddi4+0x2a8>
   83b94:	f1a9 0902 	sub.w	r9, r9, #2
   83b98:	443e      	add	r6, r7
   83b9a:	eba6 060a 	sub.w	r6, r6, sl
   83b9e:	fbb6 f0f2 	udiv	r0, r6, r2
   83ba2:	fb02 6610 	mls	r6, r2, r0, r6
   83ba6:	fb00 f303 	mul.w	r3, r0, r3
   83baa:	b2a4      	uxth	r4, r4
   83bac:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83bb0:	42a3      	cmp	r3, r4
   83bb2:	d909      	bls.n	83bc8 <__udivmoddi4+0x98>
   83bb4:	19e4      	adds	r4, r4, r7
   83bb6:	f100 32ff 	add.w	r2, r0, #4294967295
   83bba:	f080 810b 	bcs.w	83dd4 <__udivmoddi4+0x2a4>
   83bbe:	42a3      	cmp	r3, r4
   83bc0:	f240 8108 	bls.w	83dd4 <__udivmoddi4+0x2a4>
   83bc4:	3802      	subs	r0, #2
   83bc6:	443c      	add	r4, r7
   83bc8:	2100      	movs	r1, #0
   83bca:	1ae4      	subs	r4, r4, r3
   83bcc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83bd0:	2d00      	cmp	r5, #0
   83bd2:	d062      	beq.n	83c9a <__udivmoddi4+0x16a>
   83bd4:	2300      	movs	r3, #0
   83bd6:	fa24 f40e 	lsr.w	r4, r4, lr
   83bda:	602c      	str	r4, [r5, #0]
   83bdc:	606b      	str	r3, [r5, #4]
   83bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83be2:	428b      	cmp	r3, r1
   83be4:	d907      	bls.n	83bf6 <__udivmoddi4+0xc6>
   83be6:	2d00      	cmp	r5, #0
   83be8:	d055      	beq.n	83c96 <__udivmoddi4+0x166>
   83bea:	2100      	movs	r1, #0
   83bec:	e885 0041 	stmia.w	r5, {r0, r6}
   83bf0:	4608      	mov	r0, r1
   83bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83bf6:	fab3 f183 	clz	r1, r3
   83bfa:	2900      	cmp	r1, #0
   83bfc:	f040 808f 	bne.w	83d1e <__udivmoddi4+0x1ee>
   83c00:	42b3      	cmp	r3, r6
   83c02:	d302      	bcc.n	83c0a <__udivmoddi4+0xda>
   83c04:	4282      	cmp	r2, r0
   83c06:	f200 80fc 	bhi.w	83e02 <__udivmoddi4+0x2d2>
   83c0a:	1a84      	subs	r4, r0, r2
   83c0c:	eb66 0603 	sbc.w	r6, r6, r3
   83c10:	2001      	movs	r0, #1
   83c12:	46b4      	mov	ip, r6
   83c14:	2d00      	cmp	r5, #0
   83c16:	d040      	beq.n	83c9a <__udivmoddi4+0x16a>
   83c18:	e885 1010 	stmia.w	r5, {r4, ip}
   83c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c20:	b912      	cbnz	r2, 83c28 <__udivmoddi4+0xf8>
   83c22:	2701      	movs	r7, #1
   83c24:	fbb7 f7f2 	udiv	r7, r7, r2
   83c28:	fab7 fe87 	clz	lr, r7
   83c2c:	f1be 0f00 	cmp.w	lr, #0
   83c30:	d135      	bne.n	83c9e <__udivmoddi4+0x16e>
   83c32:	2101      	movs	r1, #1
   83c34:	1bf6      	subs	r6, r6, r7
   83c36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83c3a:	fa1f f887 	uxth.w	r8, r7
   83c3e:	fbb6 f2fc 	udiv	r2, r6, ip
   83c42:	fb0c 6612 	mls	r6, ip, r2, r6
   83c46:	fb08 f002 	mul.w	r0, r8, r2
   83c4a:	0c23      	lsrs	r3, r4, #16
   83c4c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83c50:	42b0      	cmp	r0, r6
   83c52:	d907      	bls.n	83c64 <__udivmoddi4+0x134>
   83c54:	19f6      	adds	r6, r6, r7
   83c56:	f102 33ff 	add.w	r3, r2, #4294967295
   83c5a:	d202      	bcs.n	83c62 <__udivmoddi4+0x132>
   83c5c:	42b0      	cmp	r0, r6
   83c5e:	f200 80d2 	bhi.w	83e06 <__udivmoddi4+0x2d6>
   83c62:	461a      	mov	r2, r3
   83c64:	1a36      	subs	r6, r6, r0
   83c66:	fbb6 f0fc 	udiv	r0, r6, ip
   83c6a:	fb0c 6610 	mls	r6, ip, r0, r6
   83c6e:	fb08 f800 	mul.w	r8, r8, r0
   83c72:	b2a3      	uxth	r3, r4
   83c74:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83c78:	45a0      	cmp	r8, r4
   83c7a:	d907      	bls.n	83c8c <__udivmoddi4+0x15c>
   83c7c:	19e4      	adds	r4, r4, r7
   83c7e:	f100 33ff 	add.w	r3, r0, #4294967295
   83c82:	d202      	bcs.n	83c8a <__udivmoddi4+0x15a>
   83c84:	45a0      	cmp	r8, r4
   83c86:	f200 80b9 	bhi.w	83dfc <__udivmoddi4+0x2cc>
   83c8a:	4618      	mov	r0, r3
   83c8c:	eba4 0408 	sub.w	r4, r4, r8
   83c90:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83c94:	e79c      	b.n	83bd0 <__udivmoddi4+0xa0>
   83c96:	4629      	mov	r1, r5
   83c98:	4628      	mov	r0, r5
   83c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c9e:	fa07 f70e 	lsl.w	r7, r7, lr
   83ca2:	f1ce 0320 	rsb	r3, lr, #32
   83ca6:	fa26 f203 	lsr.w	r2, r6, r3
   83caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83cae:	fbb2 f1fc 	udiv	r1, r2, ip
   83cb2:	fa1f f887 	uxth.w	r8, r7
   83cb6:	fb0c 2211 	mls	r2, ip, r1, r2
   83cba:	fa06 f60e 	lsl.w	r6, r6, lr
   83cbe:	fa20 f303 	lsr.w	r3, r0, r3
   83cc2:	fb01 f908 	mul.w	r9, r1, r8
   83cc6:	4333      	orrs	r3, r6
   83cc8:	0c1e      	lsrs	r6, r3, #16
   83cca:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83cce:	45b1      	cmp	r9, r6
   83cd0:	fa00 f40e 	lsl.w	r4, r0, lr
   83cd4:	d909      	bls.n	83cea <__udivmoddi4+0x1ba>
   83cd6:	19f6      	adds	r6, r6, r7
   83cd8:	f101 32ff 	add.w	r2, r1, #4294967295
   83cdc:	f080 808c 	bcs.w	83df8 <__udivmoddi4+0x2c8>
   83ce0:	45b1      	cmp	r9, r6
   83ce2:	f240 8089 	bls.w	83df8 <__udivmoddi4+0x2c8>
   83ce6:	3902      	subs	r1, #2
   83ce8:	443e      	add	r6, r7
   83cea:	eba6 0609 	sub.w	r6, r6, r9
   83cee:	fbb6 f0fc 	udiv	r0, r6, ip
   83cf2:	fb0c 6210 	mls	r2, ip, r0, r6
   83cf6:	fb00 f908 	mul.w	r9, r0, r8
   83cfa:	b29e      	uxth	r6, r3
   83cfc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83d00:	45b1      	cmp	r9, r6
   83d02:	d907      	bls.n	83d14 <__udivmoddi4+0x1e4>
   83d04:	19f6      	adds	r6, r6, r7
   83d06:	f100 33ff 	add.w	r3, r0, #4294967295
   83d0a:	d271      	bcs.n	83df0 <__udivmoddi4+0x2c0>
   83d0c:	45b1      	cmp	r9, r6
   83d0e:	d96f      	bls.n	83df0 <__udivmoddi4+0x2c0>
   83d10:	3802      	subs	r0, #2
   83d12:	443e      	add	r6, r7
   83d14:	eba6 0609 	sub.w	r6, r6, r9
   83d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83d1c:	e78f      	b.n	83c3e <__udivmoddi4+0x10e>
   83d1e:	f1c1 0720 	rsb	r7, r1, #32
   83d22:	fa22 f807 	lsr.w	r8, r2, r7
   83d26:	408b      	lsls	r3, r1
   83d28:	ea48 0303 	orr.w	r3, r8, r3
   83d2c:	fa26 f407 	lsr.w	r4, r6, r7
   83d30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83d34:	fbb4 f9fe 	udiv	r9, r4, lr
   83d38:	fa1f fc83 	uxth.w	ip, r3
   83d3c:	fb0e 4419 	mls	r4, lr, r9, r4
   83d40:	408e      	lsls	r6, r1
   83d42:	fa20 f807 	lsr.w	r8, r0, r7
   83d46:	fb09 fa0c 	mul.w	sl, r9, ip
   83d4a:	ea48 0806 	orr.w	r8, r8, r6
   83d4e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83d52:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83d56:	45a2      	cmp	sl, r4
   83d58:	fa02 f201 	lsl.w	r2, r2, r1
   83d5c:	fa00 f601 	lsl.w	r6, r0, r1
   83d60:	d908      	bls.n	83d74 <__udivmoddi4+0x244>
   83d62:	18e4      	adds	r4, r4, r3
   83d64:	f109 30ff 	add.w	r0, r9, #4294967295
   83d68:	d244      	bcs.n	83df4 <__udivmoddi4+0x2c4>
   83d6a:	45a2      	cmp	sl, r4
   83d6c:	d942      	bls.n	83df4 <__udivmoddi4+0x2c4>
   83d6e:	f1a9 0902 	sub.w	r9, r9, #2
   83d72:	441c      	add	r4, r3
   83d74:	eba4 040a 	sub.w	r4, r4, sl
   83d78:	fbb4 f0fe 	udiv	r0, r4, lr
   83d7c:	fb0e 4410 	mls	r4, lr, r0, r4
   83d80:	fb00 fc0c 	mul.w	ip, r0, ip
   83d84:	fa1f f888 	uxth.w	r8, r8
   83d88:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83d8c:	45a4      	cmp	ip, r4
   83d8e:	d907      	bls.n	83da0 <__udivmoddi4+0x270>
   83d90:	18e4      	adds	r4, r4, r3
   83d92:	f100 3eff 	add.w	lr, r0, #4294967295
   83d96:	d229      	bcs.n	83dec <__udivmoddi4+0x2bc>
   83d98:	45a4      	cmp	ip, r4
   83d9a:	d927      	bls.n	83dec <__udivmoddi4+0x2bc>
   83d9c:	3802      	subs	r0, #2
   83d9e:	441c      	add	r4, r3
   83da0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83da4:	fba0 8902 	umull	r8, r9, r0, r2
   83da8:	eba4 0c0c 	sub.w	ip, r4, ip
   83dac:	45cc      	cmp	ip, r9
   83dae:	46c2      	mov	sl, r8
   83db0:	46ce      	mov	lr, r9
   83db2:	d315      	bcc.n	83de0 <__udivmoddi4+0x2b0>
   83db4:	d012      	beq.n	83ddc <__udivmoddi4+0x2ac>
   83db6:	b155      	cbz	r5, 83dce <__udivmoddi4+0x29e>
   83db8:	ebb6 030a 	subs.w	r3, r6, sl
   83dbc:	eb6c 060e 	sbc.w	r6, ip, lr
   83dc0:	fa06 f707 	lsl.w	r7, r6, r7
   83dc4:	40cb      	lsrs	r3, r1
   83dc6:	431f      	orrs	r7, r3
   83dc8:	40ce      	lsrs	r6, r1
   83dca:	602f      	str	r7, [r5, #0]
   83dcc:	606e      	str	r6, [r5, #4]
   83dce:	2100      	movs	r1, #0
   83dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dd4:	4610      	mov	r0, r2
   83dd6:	e6f7      	b.n	83bc8 <__udivmoddi4+0x98>
   83dd8:	4689      	mov	r9, r1
   83dda:	e6de      	b.n	83b9a <__udivmoddi4+0x6a>
   83ddc:	4546      	cmp	r6, r8
   83dde:	d2ea      	bcs.n	83db6 <__udivmoddi4+0x286>
   83de0:	ebb8 0a02 	subs.w	sl, r8, r2
   83de4:	eb69 0e03 	sbc.w	lr, r9, r3
   83de8:	3801      	subs	r0, #1
   83dea:	e7e4      	b.n	83db6 <__udivmoddi4+0x286>
   83dec:	4670      	mov	r0, lr
   83dee:	e7d7      	b.n	83da0 <__udivmoddi4+0x270>
   83df0:	4618      	mov	r0, r3
   83df2:	e78f      	b.n	83d14 <__udivmoddi4+0x1e4>
   83df4:	4681      	mov	r9, r0
   83df6:	e7bd      	b.n	83d74 <__udivmoddi4+0x244>
   83df8:	4611      	mov	r1, r2
   83dfa:	e776      	b.n	83cea <__udivmoddi4+0x1ba>
   83dfc:	3802      	subs	r0, #2
   83dfe:	443c      	add	r4, r7
   83e00:	e744      	b.n	83c8c <__udivmoddi4+0x15c>
   83e02:	4608      	mov	r0, r1
   83e04:	e706      	b.n	83c14 <__udivmoddi4+0xe4>
   83e06:	3a02      	subs	r2, #2
   83e08:	443e      	add	r6, r7
   83e0a:	e72b      	b.n	83c64 <__udivmoddi4+0x134>

00083e0c <__aeabi_idiv0>:
   83e0c:	4770      	bx	lr
   83e0e:	bf00      	nop
   83e10:	68746f42 	.word	0x68746f42
   83e14:	74756220 	.word	0x74756220
   83e18:	736e6f74 	.word	0x736e6f74
   83e1c:	65727020 	.word	0x65727020
   83e20:	64657373 	.word	0x64657373
   83e24:	0000000a 	.word	0x0000000a
   83e28:	74747542 	.word	0x74747542
   83e2c:	31206e6f 	.word	0x31206e6f
   83e30:	65727020 	.word	0x65727020
   83e34:	64657373 	.word	0x64657373
   83e38:	0000000a 	.word	0x0000000a
   83e3c:	74747542 	.word	0x74747542
   83e40:	32206e6f 	.word	0x32206e6f
   83e44:	65727020 	.word	0x65727020
   83e48:	64657373 	.word	0x64657373
   83e4c:	0000000a 	.word	0x0000000a
   83e50:	62206f4e 	.word	0x62206f4e
   83e54:	6f747475 	.word	0x6f747475
   83e58:	7270206e 	.word	0x7270206e
   83e5c:	65737365 	.word	0x65737365
   83e60:	00000a64 	.word	0x00000a64

00083e64 <_global_impure_ptr>:
   83e64:	20070178 33323130 37363534 42413938     x.. 0123456789AB
   83e74:	46454443 00000000 33323130 37363534     CDEF....01234567
   83e84:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83e94:	0000296c                                l)..

00083e98 <blanks.7217>:
   83e98:	20202020 20202020 20202020 20202020                     

00083ea8 <zeroes.7218>:
   83ea8:	30303030 30303030 30303030 30303030     0000000000000000
   83eb8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083ec8 <_ctype_>:
   83ec8:	20202000 20202020 28282020 20282828     .         ((((( 
   83ed8:	20202020 20202020 20202020 20202020                     
   83ee8:	10108820 10101010 10101010 10101010      ...............
   83ef8:	04040410 04040404 10040404 10101010     ................
   83f08:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83f18:	01010101 01010101 01010101 10101010     ................
   83f28:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83f38:	02020202 02020202 02020202 10101010     ................
   83f48:	00000020 00000000 00000000 00000000      ...............
	...

00083fcc <_init>:
   83fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fce:	bf00      	nop
   83fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fd2:	bc08      	pop	{r3}
   83fd4:	469e      	mov	lr, r3
   83fd6:	4770      	bx	lr

00083fd8 <__init_array_start>:
   83fd8:	0008209d 	.word	0x0008209d

00083fdc <__frame_dummy_init_array_entry>:
   83fdc:	00080119                                ....

00083fe0 <_fini>:
   83fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fe2:	bf00      	nop
   83fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fe6:	bc08      	pop	{r3}
   83fe8:	469e      	mov	lr, r3
   83fea:	4770      	bx	lr

00083fec <__fini_array_start>:
   83fec:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070170 	.word	0x20070170

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <pin_table>:
2007012c:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
2007013c:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
2007014c:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
2007015c:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
2007016c:	00013433                                         34

2007016e <g_interrupt_enabled>:
2007016e:	09000001                                         ..

20070170 <SystemCoreClock>:
20070170:	003d0900                                ..=.

20070174 <_impure_ptr>:
20070174:	20070178                                x.. 

20070178 <impure_data>:
20070178:	00000000 20070464 200704cc 20070534     ....d.. ... 4.. 
	...
20070220:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070230:	0005deec 0000000b 00000000 00000000     ................
	...

200705a0 <__atexit_recursive_mutex>:
200705a0:	20070c90                                ... 

200705a4 <__global_locale>:
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00000043 00000000 00000000 00000000     C...............
	...
20070664:	00000043 00000000 00000000 00000000     C...............
	...
20070684:	0008386d 00083071 00000000 00083ec8     m8..q0.......>..
20070694:	00083ec4 00083e78 00083e78 00083e78     .>..x>..x>..x>..
200706a4:	00083e78 00083e78 00083e78 00083e78     x>..x>..x>..x>..
200706b4:	00083e78 00083e78 ffffffff ffffffff     x>..x>..........
200706c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ec:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070710 <__malloc_av_>:
	...
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 
20070af8:	20070af0 20070af0 20070af8 20070af8     ... ... ... ... 
20070b08:	20070b00 20070b00 20070b08 20070b08     ... ... ... ... 

20070b18 <__malloc_sbrk_base>:
20070b18:	ffffffff                                ....

20070b1c <__malloc_trim_threshold>:
20070b1c:	00020000                                ....
